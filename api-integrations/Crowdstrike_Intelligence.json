{
  "components": {
    "schemas": {
      "activities.ActivityExtField": {
        "properties": {
          "description": {
            "description": "Description for the field.",
            "type": "string"
          },
          "display": {
            "description": "User friendly display name for the field",
            "type": "string"
          },
          "example": {
            "$ref": "#/components/schemas/activities.ActivityExtField.example"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/activities.ActivityExtField"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the field as it should be passed back to the API through conditions or data mapping.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/fielddata.FieldSource"
          },
          "type": {
            "description": "Underlying type for the field, can be a primitive json schema type or signal field type.",
            "type": "string"
          },
          "x-cs-not-parameterizable": {
            "description": "This property is set if the notPramaterizable is set to true.",
            "type": "boolean"
          }
        },
        "required": ["display", "name"]
      },
      "activities.ActivityExtField.example": {},
      "detectsapi.AggregateAlertQueryRequest": {
        "properties": {
          "date_ranges": {
            "description": "DateRanges applies to date_range aggregations.",
            "items": {
              "$ref": "#/components/schemas/msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "description": "Exclude Post-filtering on queried fields",
            "type": "string"
          },
          "field": {
            "description": "Field applies for example to date_histogram and range aggregations.",
            "type": "string"
          },
          "filter": {
            "description": "FQL query specifying the filter parameters.",
            "type": "string"
          },
          "from": {
            "description": "used in bucket sort aggregations as an offset",
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "description": "Include Post-filtering on queried fields",
            "type": "string"
          },
          "interval": {
            "description": "Interval applies for example to date_histogram aggregations (uses calendar_interval). Possible values: year, month, week, day, hour, minute.",
            "type": "string"
          },
          "max_doc_count": {
            "description": "only return terms that match less than a configured number of hits.",
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "description": "only return terms that match more than a configured number of hits.",
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "description": "Missing is a value for missing term field. The behavior that query should return if the document does not have the field in the query",
            "type": "string"
          },
          "name": {
            "description": "Name of the aggregate query",
            "type": "string"
          },
          "q": {
            "description": "represents full text query",
            "type": "string"
          },
          "ranges": {
            "description": "Ranges applies to range aggregations.",
            "items": {
              "$ref": "#/components/schemas/msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "description": "how many term buckets should be returned.",
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "description": "Sort spec, ex: 'pattern_id|desc'.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "sub aggregate alert query.",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregateAlertQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "description": "TimeZone timezone to specify when bucketing results.",
            "type": "string"
          },
          "type": {
            "description": "Datastore supported value types: term, terms, date_histogram, facet, range, cardinality. Exact allowed values specific to endpoint.",
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "detectsapi.AggregationResult": {
        "properties": {
          "buckets": {
            "description": "collection of aggregate results matching the criteria",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResultItem"
            },
            "type": "array"
          },
          "name": {
            "description": "aggregate query name as provided in the request",
            "type": "string"
          },
          "sum_other_doc_count": {
            "description": "sum of the document counts for all buckets that are not part of the response",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": ["buckets", "name"]
      },
      "detectsapi.AggregationResultItem": {
        "properties": {
          "count": {
            "description": "total count of items falling in this bucket",
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "description": "used to determine the start of the range in aggregations",
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "description": "the formatted string version using the format parameter specification",
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/detectsapi.AggregationResultItem.label"
          },
          "string_from": {
            "description": "string representation of 'From' date",
            "type": "string"
          },
          "string_to": {
            "description": "string representation of 'To' date",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "nested aggregation result",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "description": "used to determine end of the range in aggregations",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "numeric aggregations (Min, Max, Avg, Percentile...)",
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "description": "string representation of Value",
            "type": "string"
          }
        },
        "required": ["count"]
      },
      "detectsapi.AggregationResultItem.label": {},
      "domain.AggregationResult": {
        "properties": {
          "buckets": {
            "description": "Aggregation buckets containing aggregated information",
            "items": {
              "$ref": "#/components/schemas/domain.AggregationResultItem"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the aggregation, equal to the name of it from the AggregateQueryRequest name",
            "type": "string"
          },
          "sum_other_doc_count": {
            "description": "sum count of the documents not included in the buckets",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": ["buckets", "name"]
      },
      "domain.AggregationResultItem": {
        "properties": {
          "count": {
            "description": "count of the documents in the bucket",
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "description": "numerical value of the date or number start of the range",
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "description": "string value of the key, usually not populated",
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/domain.AggregationResultItem.label"
          },
          "string_from": {
            "description": "string value of the from property, usually representing a date or number",
            "type": "string"
          },
          "string_to": {
            "description": "string value of the to property, usually representing a date or number",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "sub-aggregations of the bucket",
            "items": {
              "$ref": "#/components/schemas/domain.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "description": "numerical value of the date or number end of the range",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "numerical value of the bucket",
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "description": "value as a string, usually not populated",
            "type": "string"
          }
        },
        "required": ["count"]
      },
      "domain.AggregationResultItem.label": {},
      "domain.ScriptHelp": {
        "properties": {
          "args": {
            "items": {
              "$ref": "#/components/schemas/model.Argument"
            },
            "type": "array"
          },
          "command": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "examples": {
            "type": "string"
          },
          "internal_only": {
            "type": "boolean"
          },
          "runnable": {
            "type": "boolean"
          },
          "sub_commands": {
            "items": {
              "$ref": "#/components/schemas/domain.ScriptHelp"
            },
            "type": "array"
          }
        },
        "required": [
          "args",
          "command",
          "description",
          "examples",
          "internal_only",
          "runnable",
          "sub_commands"
        ]
      },
      "fielddata.FieldSource": {
        "properties": {
          "case_sensitive": {
            "description": "Indicates whether the field is case sensitive for searching against fulcrum. Some downstream APIs are and others are not, so this is needed so that UI can handle this cohesively.",
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/fielddata.FieldSourceOption"
            },
            "type": "array"
          },
          "sort": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          }
        },
        "required": ["strict"]
      },
      "fielddata.FieldSourceOption": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/fielddata.FieldSourceOption.id"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id"]
      },
      "fielddata.FieldSourceOption.id": {},
      "fwmgr.msa.AggregateQueryRequest": {
        "properties": {
          "date_ranges": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "type": "string"
          },
          "extended_bounds": {
            "$ref": "#/components/schemas/fwmgr.msa.ExtendedBoundsSpec"
          },
          "field": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "max_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregateQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "fwmgr.msa.AggregationResult": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResultItem"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": ["buckets", "name"]
      },
      "fwmgr.msa.AggregationResultItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/fwmgr.msa.AggregationResultItem.label"
          },
          "string_from": {
            "type": "string"
          },
          "string_to": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "type": "string"
          }
        },
        "required": ["count"]
      },
      "fwmgr.msa.AggregationResultItem.label": {},
      "fwmgr.msa.DateRangeSpec": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": ["from", "to"]
      },
      "fwmgr.msa.ExtendedBoundsSpec": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          }
        },
        "required": ["max", "min"]
      },
      "fwmgr.msa.RangeSpec": {
        "properties": {
          "From": {
            "format": "double",
            "type": "number"
          },
          "To": {
            "format": "double",
            "type": "number"
          }
        },
        "required": ["From", "To"]
      },
      "graph.TimerEventDefinition": {
        "properties": {
          "end_date": {
            "description": "End date in mm-dd-yyyy format",
            "type": "string"
          },
          "skip_concurrent": {
            "description": "Flag indicating if concurrent execution of scheduled workflow should be skipped or not",
            "type": "boolean"
          },
          "start_date": {
            "description": "Start date in mm-dd-yyyy format",
            "type": "string"
          },
          "time_cycle": {
            "description": "A time cycle element specifies repeating intervals, and can be specified using using cron expressions.",
            "type": "string"
          },
          "tz": {
            "description": "Timezone label from IANA timezone database, for example, America/Los_Angeles",
            "type": "string"
          }
        },
        "required": ["skip_concurrent", "time_cycle", "tz"]
      },
      "jsonschema.Authorization": {
        "properties": {
          "apiScope": {
            "type": "string"
          },
          "complexPermissions": {
            "$ref": "#/components/schemas/jsonschema.ComplexPermissions"
          },
          "featureFlag": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.Permission"
            },
            "type": "array"
          }
        },
        "required": ["complexPermissions", "featureFlag", "permissions"]
      },
      "jsonschema.CollectionIndexField": {
        "properties": {
          "field": {
            "type": "string"
          },
          "fql_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": ["field", "fql_name", "type"]
      },
      "jsonschema.ComplexPermissions": {
        "properties": {
          "OR": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.ComplexPermissions.OR"
            },
            "type": "array"
          }
        }
      },
      "jsonschema.ComplexPermissions.OR": {
        "properties": {
          "AND": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.Permission"
            },
            "type": "array"
          }
        }
      },
      "jsonschema.ConditionGroupFields": {
        "properties": {
          "condition_control": {
            "type": "boolean"
          },
          "control_name": {
            "type": "string"
          },
          "controller": {
            "type": "boolean"
          },
          "dependent_control": {
            "type": "string"
          },
          "requires_meta": {
            "type": "string"
          },
          "reset_fields": {
            "$ref": "#/components/schemas/jsonschema.ResetFields"
          }
        }
      },
      "jsonschema.DurationOption": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["name", "value"]
      },
      "jsonschema.Permission": {
        "properties": {
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        },
        "required": ["action", "resource"]
      },
      "jsonschema.Pivot": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "entity": {
            "type": "string"
          },
          "entityValue": {
            "type": "string"
          },
          "queryString": {
            "type": "string"
          },
          "searchable": {
            "type": "boolean"
          },
          "sortByDisplay": {
            "type": "boolean"
          },
          "sortByValue": {
            "type": "boolean"
          },
          "sortDesc": {
            "type": "boolean"
          },
          "strict": {
            "type": "boolean"
          }
        }
      },
      "jsonschema.ResetFields": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["fields"]
      },
      "jsonschema.Schema": {
        "properties": {
          "SubSchema": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "definitions": {
            "type": "object"
          }
        },
        "required": ["SubSchema"]
      },
      "jsonschema.SignalsExtensions": {
        "properties": {
          "enum_wrapper": {
            "type": "boolean"
          },
          "example_display_map": {
            "type": "object"
          },
          "path_name": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        }
      },
      "jsonschema.SubSchema": {
        "properties": {
          "$ref": {
            "type": "string"
          },
          "$schema": {
            "type": "string"
          },
          "additionalItems": {
            "type": "string"
          },
          "additionalProperties": {
            "type": "string"
          },
          "allOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "anyOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "binaryEncoding": {
            "type": "string"
          },
          "const": {
            "$ref": "#/components/schemas/jsonschema.SubSchema.const"
          },
          "default": {
            "$ref": "#/components/schemas/jsonschema.SubSchema.default"
          },
          "dependencies": {
            "type": "object"
          },
          "deprecated": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "else": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "enum": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema.enum"
            },
            "type": "array"
          },
          "errorMessage": {
            "type": "string"
          },
          "examples": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema.examples"
            },
            "type": "array"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "format": {
            "type": "string"
          },
          "if": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "items": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "maxItems": {
            "format": "int32",
            "type": "integer"
          },
          "maxLength": {
            "format": "int32",
            "type": "integer"
          },
          "maxProperties": {
            "format": "int32",
            "type": "integer"
          },
          "maximum": {
            "format": "int32",
            "type": "integer"
          },
          "media": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "minItems": {
            "format": "int32",
            "type": "integer"
          },
          "minLength": {
            "format": "int32",
            "type": "integer"
          },
          "minProperties": {
            "format": "int32",
            "type": "integer"
          },
          "minimum": {
            "format": "int32",
            "type": "integer"
          },
          "multipleOf": {
            "format": "int32",
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "oneOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "patternProperties": {
            "type": "object"
          },
          "properties": {
            "type": "object"
          },
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "then": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "ui:component": {
            "type": "string"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "x-cs-authorization": {
            "$ref": "#/components/schemas/jsonschema.Authorization"
          },
          "x-cs-can-create": {
            "type": "boolean"
          },
          "x-cs-condition-group-fields": {
            "$ref": "#/components/schemas/jsonschema.ConditionGroupFields"
          },
          "x-cs-do-not-hide": {
            "type": "boolean"
          },
          "x-cs-immutable": {
            "type": "boolean"
          },
          "x-cs-indexable": {
            "type": "boolean"
          },
          "x-cs-indexable-fields": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.CollectionIndexField"
            },
            "type": "array"
          },
          "x-cs-max-duration": {
            "format": "int32",
            "type": "integer"
          },
          "x-cs-min-duration": {
            "format": "int32",
            "type": "integer"
          },
          "x-cs-not-parameterizable": {
            "type": "boolean"
          },
          "x-cs-order": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-pivot": {
            "$ref": "#/components/schemas/jsonschema.Pivot"
          },
          "x-cs-signals": {
            "$ref": "#/components/schemas/jsonschema.SignalsExtensions"
          },
          "x-cs-signals-category": {
            "type": "string"
          },
          "x-cs-signals-operators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-signals-subCategory": {
            "type": "string"
          },
          "x-cs-tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-ui": {
            "$ref": "#/components/schemas/jsonschema.UIExtensions"
          },
          "x-cs-workflow": {
            "$ref": "#/components/schemas/jsonschema.WorkflowExtensions"
          }
        }
      },
      "jsonschema.SubSchema.const": {},
      "jsonschema.SubSchema.default": {},
      "jsonschema.SubSchema.enum": {},
      "jsonschema.SubSchema.examples": {},
      "jsonschema.UIExtensions": {
        "properties": {
          "accept": {
            "description": "supported file extensions for file upload, eg. '.yaml', '.json'",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "component": {
            "type": "string"
          },
          "customGroupName": {
            "type": "string"
          },
          "durationOptions": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.DurationOption"
            },
            "type": "array"
          },
          "encoding": {
            "description": "supported encoding for file upload, eg. 'base64'",
            "type": "string"
          },
          "helperText": {
            "type": "string"
          },
          "schema_reference": {
            "description": "local reference to look up the dynamic json schema and mobiledoc card configuration returned in the top-level of api response",
            "type": "string"
          }
        }
      },
      "jsonschema.WorkflowExtensions": {
        "properties": {
          "description": {
            "type": "string"
          },
          "max_file_size": {
            "description": "max file size allowed in bytes",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-no-variable-injection": {
            "type": "boolean"
          }
        }
      },
      "malquery.QueryError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": ["code", "message"]
      },
      "malquery.SampleMetadata": {
        "properties": {
          "family": {
            "description": "Sample family",
            "type": "string"
          },
          "filesize": {
            "description": "Sample size",
            "format": "int32",
            "type": "integer"
          },
          "filetype": {
            "description": "Sample file type",
            "type": "string"
          },
          "first_seen": {
            "description": "Date when it was first seen",
            "type": "string"
          },
          "label": {
            "description": "Sample label",
            "type": "string"
          },
          "md5": {
            "description": "Sample MD5",
            "type": "string"
          },
          "sha1": {
            "description": "Sample SHA1",
            "type": "string"
          },
          "sha256": {
            "description": "Sample SHA256",
            "type": "string"
          }
        }
      },
      "malquery.SampleMetadataResponse": {
        "properties": {
          "errors": {
            "description": "Errors that occurred during the request",
            "items": {
              "$ref": "#/components/schemas/malquery.QueryError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/malquery.SamplesMetadataMetaInfo"
          },
          "resources": {
            "description": "List of sample metadata",
            "items": {
              "$ref": "#/components/schemas/malquery.SampleMetadata"
            },
            "type": "array"
          }
        },
        "required": ["errors", "meta", "resources"]
      },
      "malquery.SamplesMetadataMetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": ["trace_id"]
      },
      "model.Argument": {
        "properties": {
          "arg_name": {
            "type": "string"
          },
          "arg_type": {
            "type": "string"
          },
          "command_level": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "data_type": {
            "type": "string"
          },
          "default_value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required": {
            "type": "boolean"
          },
          "requires_value": {
            "type": "boolean"
          },
          "script_id": {
            "format": "integer",
            "type": "integer"
          },
          "sequence": {
            "format": "integer",
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "arg_name",
          "arg_type",
          "command_level",
          "created_at",
          "data_type",
          "default_value",
          "description",
          "encoding",
          "id",
          "options",
          "required",
          "requires_value",
          "script_id",
          "sequence",
          "updated_at"
        ]
      },
      "msa.APIError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["code", "message"]
      },
      "msa.AggregateQueryRequest": {
        "properties": {
          "date_ranges": {
            "items": {
              "$ref": "#/components/schemas/msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "type": "string"
          },
          "extended_bounds": {
            "$ref": "#/components/schemas/msa.ExtendedBoundsSpec"
          },
          "field": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "max_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregateQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "msa.AggregationResult": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResultItem"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": ["buckets", "name"]
      },
      "msa.AggregationResultItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/msa.AggregationResultItem.label"
          },
          "string_from": {
            "type": "string"
          },
          "string_to": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "type": "string"
          }
        },
        "required": ["count"]
      },
      "msa.AggregationResultItem.label": {},
      "msa.DateRangeSpec": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": ["from", "to"]
      },
      "msa.ErrorsOnly": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": ["errors", "meta"]
      },
      "msa.ExtendedBoundsSpec": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          }
        },
        "required": ["max", "min"]
      },
      "msa.Facet": {
        "properties": {
          "by": {
            "items": {
              "$ref": "#/components/schemas/msa.Facet"
            },
            "type": "array"
          },
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "facet": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "term": {
            "type": "string"
          }
        },
        "required": ["count", "term"]
      },
      "msa.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msa.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msa.Resources"
          }
        },
        "required": ["query_time", "trace_id"]
      },
      "msa.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": ["limit", "offset", "total"]
      },
      "msa.RangeSpec": {
        "properties": {
          "From": {
            "format": "double",
            "type": "number"
          },
          "To": {
            "format": "double",
            "type": "number"
          }
        },
        "required": ["From", "To"]
      },
      "msa.ReplyMetaOnly": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msa.APIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msa.MetaInfo"
          }
        },
        "required": ["meta"]
      },
      "msa.Resources": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": ["resources_affected"]
      },
      "msaspec.Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["code", "message"]
      },
      "msaspec.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": ["query_time", "trace_id"]
      },
      "msaspec.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": ["limit", "offset", "total"]
      },
      "msaspec.Writes": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": ["resources_affected"]
      },
      "triggers.TriggerExtField": {
        "properties": {
          "description": {
            "description": "Description for the field.",
            "type": "string"
          },
          "display": {
            "description": "User friendly display name for the field",
            "type": "string"
          },
          "example": {
            "$ref": "#/components/schemas/triggers.TriggerExtField.example"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/triggers.TriggerExtField"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the field as it should be passed back to the API through conditions or data mapping.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/fielddata.FieldSource"
          },
          "type": {
            "description": "Underlying type for the field, can be a primitive json schema type or signal field type.",
            "type": "string"
          }
        },
        "required": ["display", "name"]
      },
      "triggers.TriggerExtField.example": {},
      "v2.Model": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "loops": {
            "type": "object"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "output_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent": {
            "$ref": "#/components/schemas/v2.Model"
          },
          "summary": {
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          },
          "uniqNodeSeen": {
            "type": "object"
          }
        },
        "required": ["nodeRegistry", "parent", "trigger", "uniqNodeSeen"]
      },
      "v2.Trigger": {
        "properties": {
          "event": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameters": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "schedule": {
            "$ref": "#/components/schemas/graph.TimerEventDefinition"
          }
        },
        "required": ["next"]
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "clientCredentials": {
            "scopes": {
              "malquery:read": "Grants read access on malquery resources",
              "ioc:read": "Grants read access on ioc resources",
              "iocs:read": "Grants read access on iocs resources"
            },
            "tokenUrl": "/oauth2/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "javier.carrasco@crowdstrike.com"
    },
    "description": "Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2  and interact with detections and network containment. For detailed usage guides and examples,  see our [documentation inside the Falcon console] (https://falcon.crowdstrike.com/support/documentation).\n\n\n  To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.\n\n  Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.",
    "title": "Crowdstrike Intelligence",
    "version": ""
  },
  "openapi": "3.0.3",
  "paths": {
    "/iocs/combined/indicator/v1": {
      "get": {
        "operationId": "ioccombinedindicator",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "This generated schema may need tweaking. In particular format fields are attempts at matching workflow field types but may not be correct.",
                  "properties": {
                    "errors": {},
                    "meta": {
                      "properties": {
                        "pagination": {
                          "properties": {
                            "after": {
                              "type": "string"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "powered_by": {
                          "type": "string"
                        },
                        "query_time": {
                          "type": "number"
                        },
                        "trace_id": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "resources": {
                      "items": {
                        "properties": {
                          "action": {
                            "type": "string"
                          },
                          "applied_globally": {
                            "type": "boolean"
                          },
                          "created_by": {
                            "format": "email",
                            "type": "string"
                          },
                          "created_on": {
                            "type": "string"
                          },
                          "deleted": {
                            "type": "boolean"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expired": {
                            "type": "boolean"
                          },
                          "from_parent": {
                            "type": "boolean"
                          },
                          "id": {
                            "format": "sha256",
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object"
                          },
                          "mobile_action": {
                            "type": "string"
                          },
                          "modified_by": {
                            "format": "email",
                            "type": "string"
                          },
                          "modified_on": {
                            "type": "string"
                          },
                          "platforms": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "severity": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK fgfdgdf"
          }
        }
      }
    },
    "/malquery/entities/metadata/v1": {
      "get": {
        "operationId": "GetMalQueryMetadataV1",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "This generated schema may need tweaking. In particular format fields are attempts at matching workflow field types but may not be correct.",
                  "properties": {
                    "errors": {
                      "items": {
                        "properties": {
                          "code": {
                            "type": "integer"
                          },
                          "id": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "pagination": {
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "powered_by": {
                          "type": "string"
                        },
                        "query_time": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string"
                        },
                        "trace_id": {
                          "type": "string"
                        },
                        "writes": {
                          "properties": {
                            "resources_affected": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "resources": {
                      "items": {
                        "properties": {
                          "family": {
                            "type": "string"
                          },
                          "filesize": {
                            "type": "integer"
                          },
                          "filetype": {
                            "type": "string"
                          },
                          "first_seen": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "md5": {
                            "type": "string"
                          },
                          "sha1": {
                            "type": "string"
                          },
                          "sha256": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/malquery.SampleMetadataResponse"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ErrorsOnly"
                }
              }
            },
            "description": "Unauthorized",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ErrorsOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/malquery.SampleMetadataResponse"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "servers": [
    {
      "url": "{baseURL}",
      "variables": {
        "baseURL": {
          "description": "API baseUrl ({env}.{version}.crowdstrike.com)"
        }
      }
    }
  ],
  "x-cs-multi-instance": true
}
