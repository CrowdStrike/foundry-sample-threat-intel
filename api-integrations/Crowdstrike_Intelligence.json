{
  "components": {
    "schemas": {
      ".activity": {
        "properties": {
          "accessType": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          },
          "accessTypeCustom": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          }
        }
      },
      ".costs": {
        "properties": {
          "liveCost": {
            "description": "The cost of execution of a live query",
            "format": "int64",
            "type": "integer"
          },
          "liveCostRate": {
            "description": "The rate of the live cost query",
            "format": "int64",
            "type": "integer"
          },
          "staticCost": {
            "description": "The cost for executing as a static query",
            "format": "int64",
            "type": "integer"
          },
          "staticCostRate": {
            "description": "The rate for executing static queries",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "liveCost",
          "liveCostRate",
          "staticCost",
          "staticCostRate"
        ]
      },
      ".day": {
        "properties": {
          "liveCost": {
            "description": "Live cost of executing the query",
            "format": "int64",
            "type": "integer"
          },
          "queryCount": {
            "description": "Number of executions of the query",
            "format": "int64",
            "type": "integer"
          },
          "staticCost": {
            "description": "Static cost of executing the query",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "liveCost",
          "queryCount",
          "staticCost"
        ]
      },
      ".destination": {
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          },
          "groupMembership": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          }
        }
      },
      ".digestFlow": {
        "properties": {
          "ingestTimeKnownGood": {
            "description": "Latest known ingest time for digested data",
            "format": "int64",
            "type": "integer"
          },
          "maxIngestLatency": {
            "description": "Maximum ingest latency for the returned data",
            "format": "int64",
            "type": "integer"
          },
          "minIngestTimeIncluded": {
            "description": "Miniming ingest time for data included in the results",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ingestTimeKnownGood",
          "maxIngestLatency",
          "minIngestTimeIncluded"
        ]
      },
      ".flows": {
        "properties": {
          "default": {
            "description": "Reference to the ID of the sequence flow node which acts as the default path.",
            "type": "string"
          },
          "incoming": {
            "description": "References to the IDs of the sequence flow nodes inbound to the gateway.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "outgoing": {
            "description": "References to the IDs of the sequence flow nodes outbound from the gateway.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "incoming",
          "outgoing"
        ]
      },
      ".help": {
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      ".hour": {
        "properties": {
          "liveCost": {
            "description": "Live cost of executing the query",
            "format": "int64",
            "type": "integer"
          },
          "queryCount": {
            "description": "Number of executions of the query",
            "format": "int64",
            "type": "integer"
          },
          "staticCost": {
            "description": "Static cost of executing the query",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "liveCost",
          "queryCount",
          "staticCost"
        ]
      },
      ".oneMinute": {
        "properties": {
          "liveCost": {
            "description": "Live cost of executing the query",
            "format": "int64",
            "type": "integer"
          },
          "queryCount": {
            "description": "Number of executions of the query",
            "format": "int64",
            "type": "integer"
          },
          "staticCost": {
            "description": "Static cost of executing the query",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "liveCost",
          "queryCount",
          "staticCost"
        ]
      },
      ".querySpent": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/.day"
          },
          "hour": {
            "$ref": "#/components/schemas/.hour"
          },
          "oneMinute": {
            "$ref": "#/components/schemas/.oneMinute"
          },
          "tenMinutes": {
            "$ref": "#/components/schemas/.tenMinutes"
          }
        },
        "required": [
          "day",
          "hour",
          "oneMinute",
          "tenMinutes"
        ]
      },
      ".quotaTotalSpent": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/.day"
          },
          "hour": {
            "$ref": "#/components/schemas/.hour"
          },
          "oneMinute": {
            "$ref": "#/components/schemas/.oneMinute"
          },
          "tenMinutes": {
            "$ref": "#/components/schemas/.tenMinutes"
          }
        },
        "required": [
          "day",
          "hour",
          "oneMinute",
          "tenMinutes"
        ]
      },
      ".resource": {
        "properties": {
          "id": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uuid": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      ".resources": {
        "properties": {
          "default_subscription_id": {
            "type": "string"
          },
          "subscription_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "default_subscription_id",
          "subscription_ids",
          "tenant_id"
        ]
      },
      ".sourceEndpoint": {
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          },
          "groupMembership": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          }
        }
      },
      ".sourceUser": {
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          },
          "groupMembership": {
            "$ref": "#/components/schemas/types.policyRulesCondition"
          }
        }
      },
      ".tenMinutes": {
        "properties": {
          "liveCost": {
            "description": "Live cost of executing the query",
            "format": "int64",
            "type": "integer"
          },
          "queryCount": {
            "description": "Number of executions of the query",
            "format": "int64",
            "type": "integer"
          },
          "staticCost": {
            "description": "Static cost of executing the query",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "liveCost",
          "queryCount",
          "staticCost"
        ]
      },
      "CustomType_1255839303": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "CustomType_3191042536": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.ObjectMetadata"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "CustomType_3352885422": {},
      "actions.Action": {
        "properties": {
          "expected_change_count": {
            "format": "integer",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "operation_type": {
            "description": "Possible values: SUPPRESS, PURGE, UNSUPPRESS.",
            "type": "string"
          },
          "previous_change_count": {
            "format": "integer",
            "type": "integer"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "description": "Possible values: RUNNING, DONE, FAILED",
            "type": "string"
          },
          "total_change_count": {
            "format": "integer",
            "type": "integer"
          },
          "updated_by": {
            "type": "string"
          },
          "updated_date": {
            "type": "string"
          }
        },
        "required": [
          "expected_change_count",
          "id",
          "operation_type",
          "previous_change_count",
          "status",
          "total_change_count",
          "updated_by",
          "updated_date"
        ]
      },
      "actions.ActionResponse": {
        "properties": {
          "action_id": {
            "type": "string"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "action_id"
        ]
      },
      "actions.CreateActionRequest": {
        "properties": {
          "change_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          }
        },
        "required": [
          "change_ids",
          "operation"
        ]
      },
      "actions.GetActionResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/actions.Action"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "activities.Activity": {
        "properties": {
          "api_scope": {
            "description": "Required api scope to use this activity.",
            "type": "string"
          },
          "app_id": {
            "description": "Optional ID if the activity is exposed through an app from Store",
            "type": "string"
          },
          "cid": {
            "description": "The CID that owns this activity, if this is empty it is a global activity",
            "type": "string"
          },
          "class": {
            "description": "Activity class to identify how it should be orchestrated. E.g. External, Break, CreateVariable and UpdateVariable",
            "type": "string"
          },
          "dependencies": {
            "description": "List of dependencies (store apps or foundry app templates) of the activity",
            "items": {
              "$ref": "#/components/schemas/activities.Dependency"
            },
            "type": "array"
          },
          "description": {
            "description": "A detailed description of what this action does",
            "type": "string"
          },
          "disruptive": {
            "description": "A flag indicating whether the activity is potentially disruptive/destructive",
            "type": "boolean"
          },
          "has_permission": {
            "description": "Indicates whether an activity is available for the caller",
            "type": "boolean"
          },
          "id": {
            "description": "Unique ID of the activity, auto-generated by the API service",
            "type": "string"
          },
          "input_fields": {
            "description": "Input fields required for configuring activity",
            "items": {
              "$ref": "#/components/schemas/activities.ActivityExtField"
            },
            "type": "array"
          },
          "input_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "mock_output": {
            "$ref": "#/components/schemas/activities.Activity.mock_output"
          },
          "name": {
            "description": "UI name for displaying the activity to a user",
            "type": "string"
          },
          "namespace": {
            "description": "Unique namespace for the activity.",
            "type": "string"
          },
          "output_fields": {
            "description": "Output fields of the activity once executed",
            "items": {
              "$ref": "#/components/schemas/activities.ActivityExtField"
            },
            "type": "array"
          },
          "output_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "tag_ids": {
            "description": "Tag IDs assigned to this activity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated": {
            "description": "Timestamp of when the activity was last updated",
            "format": "date-time",
            "type": "string"
          },
          "use_cases": {
            "description": "UseCases used by this activity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vendor": {
            "description": "Vendors used by this activity",
            "type": "string"
          },
          "version": {
            "description": "An incrementing version number",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cid",
          "description",
          "disruptive",
          "has_permission",
          "id",
          "name"
        ]
      },
      "activities.Activity.mock_output": {},
      "activities.ActivityExtField": {
        "properties": {
          "description": {
            "description": "Description for the field.",
            "type": "string"
          },
          "display": {
            "description": "User friendly display name for the field",
            "type": "string"
          },
          "example": {
            "$ref": "#/components/schemas/activities.ActivityExtField.example"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/activities.ActivityExtField"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the field as it should be passed back to the API through conditions or data mapping.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/fielddata.FieldSource"
          },
          "type": {
            "description": "Underlying type for the field, can be a primitive json schema type or signal field type.",
            "type": "string"
          },
          "x-cs-not-parameterizable": {
            "description": "This property is set if the notPramaterizable is set to true.",
            "type": "boolean"
          }
        },
        "required": [
          "display",
          "name"
        ]
      },
      "activities.ActivityExtField.example": {},
      "activities.ActivityExternalResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/activities.Activity"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "activities.Dependency": {
        "properties": {
          "app_id": {
            "description": "Id of the store app or foundry app template to which the dependencies appear on",
            "type": "string"
          },
          "app_name": {
            "description": "name of the store app or foundry app template to which the dependencies appear on",
            "type": "string"
          },
          "app_type": {
            "description": "Type of the app whether its store or foundry.",
            "type": "string"
          },
          "logo_url": {
            "description": "Url of the logo for the app or app template linked to this activity.",
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "app_name",
          "app_type",
          "logo_url"
        ]
      },
      "alerts.ContainerAlertsEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIContainerAlert"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "alerts.containerAlertsCountValue": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/common.CountAsResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.ActionRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.IndicatorsQueryMeta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.ActionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.ActionV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "platforms_by_type": {
            "type": "object"
          },
          "severities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "platforms_by_type",
          "severities"
        ]
      },
      "api.BulkUpdateReqV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "applied_globally": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from_parent": {
            "type": "boolean"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/api.MetadataReqV1"
          },
          "mobile_action": {
            "type": "string"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "api.CertBasedExclusionCreateReqV1": {
        "properties": {
          "applied_globally": {
            "type": "boolean"
          },
          "certificate": {
            "$ref": "#/components/schemas/api.CertificateReqV1"
          },
          "children_cids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "api.CertBasedExclusionRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.CertBasedExclusionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta"
        ]
      },
      "api.CertBasedExclusionUpdateReqV1": {
        "properties": {
          "applied_globally": {
            "type": "boolean"
          },
          "certificate": {
            "$ref": "#/components/schemas/api.CertificateReqV1"
          },
          "children_cids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "api.CertBasedExclusionV1": {
        "properties": {
          "applied_globally": {
            "type": "boolean"
          },
          "certificate": {
            "$ref": "#/components/schemas/api.CertificateV1"
          },
          "children_cids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "api.CertBasedExclusionsCreateReqV1": {
        "properties": {
          "exclusions": {
            "items": {
              "$ref": "#/components/schemas/api.CertBasedExclusionCreateReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "exclusions"
        ]
      },
      "api.CertBasedExclusionsUpdateReqV1": {
        "properties": {
          "exclusions": {
            "items": {
              "$ref": "#/components/schemas/api.CertBasedExclusionUpdateReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "exclusions"
        ]
      },
      "api.CertificateReqV1": {
        "properties": {
          "issuer": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "thumbprint": {
            "type": "string"
          },
          "valid_from": {
            "format": "date-time",
            "type": "string"
          },
          "valid_to": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "issuer",
          "serial",
          "subject",
          "thumbprint",
          "valid_from",
          "valid_to"
        ]
      },
      "api.CertificateV1": {
        "properties": {
          "issuer": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "thumbprint": {
            "type": "string"
          },
          "valid_from": {
            "format": "date-time",
            "type": "string"
          },
          "valid_to": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "issuer",
          "serial",
          "subject",
          "thumbprint",
          "valid_from",
          "valid_to"
        ]
      },
      "api.CertificatesResponseV1": {
        "properties": {
          "certificates": {
            "items": {
              "$ref": "#/components/schemas/api.CertificateV1"
            },
            "type": "array"
          }
        },
        "required": [
          "certificates"
        ]
      },
      "api.CreateMigrationRequestV1": {
        "properties": {
          "device_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filter": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "target_cid": {
            "type": "string"
          }
        },
        "required": [
          "device_ids",
          "filter",
          "name",
          "target_cid"
        ]
      },
      "api.CreateMigrationResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.MigrateHostsInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.CreateRuleNotificationConfig": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "config_id": {
            "type": "string"
          },
          "plugin_id": {
            "type": "string"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "config_id",
          "plugin_id",
          "recipients",
          "severity"
        ]
      },
      "api.CreateRuleNotifications": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/api.CreateRuleNotificationConfig"
          },
          "options": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "config",
          "type"
        ]
      },
      "api.CreateRuleOperationV1": {
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/api.RuleScheduleV1"
          },
          "start_on": {
            "format": "date-time",
            "type": "string"
          },
          "stop_on": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "schedule"
        ]
      },
      "api.CredPayload": {
        "properties": {
          "details": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "details",
          "type"
        ]
      },
      "api.DetectsQueryMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/api.DetectsQueryPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "api.DetectsQueryPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "type": "string"
          }
        },
        "required": [
          "limit"
        ]
      },
      "api.DeviceCountRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.DeviceCountV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "resources"
        ]
      },
      "api.DeviceCountV1": {
        "properties": {
          "device_count": {
            "format": "int32",
            "type": "integer"
          },
          "limit_exceeded": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "api.DevicesRanOnRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.DetectsQueryMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "resources"
        ]
      },
      "api.EntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/api.EntitiesResponse.resources"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.EntitiesResponse.resources": {},
      "api.Event": {
        "properties": {
          "action": {
            "type": "string"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reason": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "required": [
          "time"
        ]
      },
      "api.ExecutionResultsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/executions.ExecutionResult"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.ExposedDataFileDetailsV1": {
        "properties": {
          "complete_data_set": {
            "description": "(Boolean) If it's a complete dataset or not.",
            "type": "boolean"
          },
          "download_urls": {
            "description": "A list of download urls for this file.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the file containing the exposed record(s).",
            "type": "string"
          },
          "size": {
            "description": "The size of the file.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "download_urls",
          "name",
          "size"
        ]
      },
      "api.ExposedDataRecordBotLocationV1": {
        "properties": {
          "country": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          }
        }
      },
      "api.ExposedDataRecordBotOperatingSystemV1": {
        "properties": {
          "antivirus": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "computer_name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "hardware_id": {
            "type": "string"
          },
          "installed_software": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "language": {
            "type": "string"
          },
          "layouts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "os_architecture": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "uac": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "api.ExposedDataRecordBotV1": {
        "properties": {
          "bot_id": {
            "type": "string"
          },
          "domain_detects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "infection_build_id": {
            "type": "string"
          },
          "infection_date": {
            "format": "date-time",
            "type": "string"
          },
          "infection_path": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/api.ExposedDataRecordBotLocationV1"
          },
          "operating_system": {
            "$ref": "#/components/schemas/api.ExposedDataRecordBotOperatingSystemV1"
          }
        }
      },
      "api.ExposedDataRecordFinancialV1": {
        "properties": {
          "bank_account": {
            "description": "Bank Account information",
            "type": "string"
          },
          "credit_card": {
            "description": "Credit Card information",
            "type": "string"
          },
          "crypto_currency_addresses": {
            "description": "A list of Crypto Currency addresses",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "api.ExposedDataRecordLocationV1": {
        "properties": {
          "city": {
            "description": "City name",
            "type": "string"
          },
          "country_code": {
            "description": "The country code",
            "type": "string"
          },
          "federal_admin_region": {
            "description": "Federal Administrative Region",
            "type": "string"
          },
          "federal_district": {
            "description": "Federal District",
            "type": "string"
          },
          "postal_code": {
            "description": "The postal code",
            "type": "string"
          },
          "state": {
            "description": "State name",
            "type": "string"
          }
        }
      },
      "api.ExposedDataRecordSocialV1": {
        "properties": {
          "aim_id": {
            "description": "AIM ID of the affected user",
            "type": "string"
          },
          "facebook_id": {
            "description": "Facebook ID of the affected user",
            "type": "string"
          },
          "icq_id": {
            "description": "ICQ ID of the affected user",
            "type": "string"
          },
          "instagram_id": {
            "description": "Instagram ID of the affected user",
            "type": "string"
          },
          "msn_id": {
            "description": "MSN ID of the affected user",
            "type": "string"
          },
          "skype_id": {
            "description": "Skype ID of the affected user",
            "type": "string"
          },
          "twitter_id": {
            "description": "Twitter ID of the affected user",
            "type": "string"
          },
          "vk_id": {
            "description": "VK ID of the affected user",
            "type": "string"
          },
          "vk_token": {
            "description": "VK Access Token of the affected user",
            "type": "string"
          }
        }
      },
      "api.GetEntitiesRulesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.RuleV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.GetHostMigrationResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.HostMigration"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.GetMigrationDestinationsRequestBodyV1": {
        "properties": {
          "device_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filter": {
            "type": "string"
          }
        },
        "required": [
          "device_ids",
          "filter"
        ]
      },
      "api.GetMigrationDestinationsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/destinations.MigrationDestination"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.GetMigrationsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.Migration"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.HostMigration": {
        "properties": {
          "created_time": {
            "format": "date-time",
            "type": "string"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/api.Event"
            },
            "type": "array"
          },
          "host_migration_id": {
            "type": "string"
          },
          "hostgroups": {
            "description": "assigned static hostgroups, may need more details here",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hostname": {
            "description": "hostname at the time of migration",
            "type": "string"
          },
          "migration_id": {
            "type": "string"
          },
          "platform": {
            "description": "platform at the time of migration",
            "type": "string"
          },
          "source_cid": {
            "type": "string"
          },
          "source_device_id": {
            "description": "device_id in the source cid",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_details": {
            "type": "string"
          },
          "target_cid": {
            "description": "not sure if this is necessary since it's common",
            "type": "string"
          },
          "target_device_id": {
            "description": "device_id in the target cid. This may change while the migration is incomplete.",
            "type": "string"
          },
          "updated_time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "created_time",
          "host_migration_id",
          "hostgroups",
          "hostname",
          "migration_id",
          "platform",
          "source_cid",
          "source_device_id",
          "status",
          "status_details",
          "target_cid",
          "target_device_id",
          "updated_time"
        ]
      },
      "api.HourlyAverageResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/entities.RollingAverage"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.ImageLookupRequest": {
        "properties": {
          "applicationPackages": {
            "items": {
              "$ref": "#/components/schemas/models.ApplicationPackageInfoType"
            },
            "type": "array"
          },
          "osversion": {
            "type": "string"
          },
          "packages": {
            "items": {
              "$ref": "#/components/schemas/models.PackageInfoType"
            },
            "type": "array"
          }
        },
        "required": [
          "osversion",
          "packages"
        ]
      },
      "api.IndicatorCreateReqV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "applied_globally": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/api.MetadataReqV1"
          },
          "mobile_action": {
            "type": "string"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "applied_globally"
        ]
      },
      "api.IndicatorCreateReqsV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "indicators": {
            "items": {
              "$ref": "#/components/schemas/api.IndicatorCreateReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "indicators"
        ]
      },
      "api.IndicatorQueryRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.IndicatorsQueryMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.IndicatorRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.IndicatorsQueryMeta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.IndicatorV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.IndicatorUpdateReqV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "applied_globally": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/api.MetadataReqV1"
          },
          "mobile_action": {
            "type": "string"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "api.IndicatorUpdateReqsV1": {
        "properties": {
          "bulk_update": {
            "$ref": "#/components/schemas/api.BulkUpdateReqV1"
          },
          "comment": {
            "type": "string"
          },
          "indicators": {
            "items": {
              "$ref": "#/components/schemas/api.IndicatorUpdateReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "bulk_update",
          "indicators"
        ]
      },
      "api.IndicatorV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "applied_globally": {
            "type": "boolean"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "expired": {
            "type": "boolean"
          },
          "from_parent": {
            "type": "boolean"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/api.MetadataV1"
          },
          "mobile_action": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "format": "date-time",
            "type": "string"
          },
          "parent_cid_name": {
            "type": "string"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "api.IndicatorsQueryMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/api.IndicatorsQueryPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "api.IndicatorsQueryPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "total"
        ]
      },
      "api.IndicatorsReportRequest": {
        "properties": {
          "from_parent": {
            "type": "boolean"
          },
          "report_format": {
            "type": "string"
          },
          "search": {
            "$ref": "#/components/schemas/api.IndicatorsSortedSearch"
          }
        },
        "required": [
          "report_format",
          "search"
        ]
      },
      "api.IndicatorsSortedSearch": {
        "properties": {
          "filter": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          }
        },
        "required": [
          "filter",
          "query",
          "sort"
        ]
      },
      "api.MFAResourceIDsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "next": {
            "$ref": "#/components/schemas/api.MFAResourceIDsResponse.next"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.MFAResourceIDsResponse.next": {},
      "api.MessageCenterActivityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/messages.Activity"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.MessageCenterAttachmentUploadResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/messages.Attachment"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.MessageCenterCasesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/messages.Case"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/api.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "api.MetadataReqV1": {
        "properties": {
          "filename": {
            "type": "string"
          }
        }
      },
      "api.MetadataV1": {
        "properties": {
          "av_hits": {
            "format": "int64",
            "type": "integer"
          },
          "company_name": {
            "type": "string"
          },
          "file_description": {
            "type": "string"
          },
          "file_version": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "original_filename": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "product_version": {
            "type": "string"
          },
          "signed": {
            "type": "boolean"
          }
        }
      },
      "api.MigrateHostsInfo": {
        "properties": {
          "hosts_errored": {
            "format": "int32",
            "type": "integer"
          },
          "hosts_queued": {
            "format": "int32",
            "type": "integer"
          },
          "migration_id": {
            "type": "string"
          }
        },
        "required": [
          "hosts_errored",
          "hosts_queued",
          "migration_id"
        ]
      },
      "api.Migration": {
        "properties": {
          "canceled_by": {
            "type": "string"
          },
          "completed_time": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_time": {
            "format": "date-time",
            "type": "string"
          },
          "migration_id": {
            "type": "string"
          },
          "migration_status": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "started_time": {
            "format": "date-time",
            "type": "string"
          },
          "target_cid": {
            "type": "string"
          },
          "total_hosts": {
            "format": "int32",
            "type": "integer"
          },
          "updated_by": {
            "type": "string"
          },
          "updated_time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "created_by",
          "created_time",
          "migration_id",
          "migration_status",
          "name",
          "target_cid",
          "total_hosts",
          "updated_by",
          "updated_time"
        ]
      },
      "api.NotificationExposedDataRecordEntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.NotificationExposedDataRecordV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.NotificationExposedDataRecordV1": {
        "properties": {
          "author": {
            "description": "The individual or group who exposed the data",
            "type": "string"
          },
          "author_id": {
            "description": "The ID of the author within Recon",
            "type": "string"
          },
          "bot": {
            "$ref": "#/components/schemas/api.ExposedDataRecordBotV1"
          },
          "cid": {
            "description": "The customer ID",
            "type": "string"
          },
          "company": {
            "description": "The company of the user",
            "type": "string"
          },
          "created_date": {
            "description": "The date when this entity was created in Recon",
            "format": "date-time",
            "type": "string"
          },
          "credential_status": {
            "description": "The status set after deduplication. Possible values: 'newly_detected', 'previously_reported', 'other'",
            "type": "string"
          },
          "credentials_domain": {
            "description": "The domain where the credentials are valid",
            "type": "string"
          },
          "credentials_ip": {
            "description": "The IP where the credentials are valid",
            "type": "string"
          },
          "credentials_url": {
            "description": "The URL where the credentials are valid",
            "type": "string"
          },
          "display_name": {
            "description": "The nickname of the user on the impacted site",
            "type": "string"
          },
          "domain": {
            "description": "The domain of the email linked to the impacted site",
            "type": "string"
          },
          "email": {
            "description": "The email linked to the impacted site",
            "type": "string"
          },
          "event_date": {
            "description": "The approximate date when the event occurred",
            "type": "string"
          },
          "exposure_date": {
            "description": "The date when the exposed data was posted online",
            "format": "date-time",
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/api.ExposedDataFileDetailsV1"
          },
          "financial": {
            "$ref": "#/components/schemas/api.ExposedDataRecordFinancialV1"
          },
          "full_name": {
            "description": "The full name of the user on the impacted site",
            "type": "string"
          },
          "hash_type": {
            "description": "The algorithm used to hash the password",
            "type": "string"
          },
          "id": {
            "description": "The ID of this entity",
            "type": "string"
          },
          "job_position": {
            "description": "The users job at the company",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/api.ExposedDataRecordLocationV1"
          },
          "login_id": {
            "type": "string"
          },
          "malware_family": {
            "description": "Information of the bot malware family",
            "type": "string"
          },
          "notification_id": {
            "description": "The ID of the parent notification associated with this entity",
            "type": "string"
          },
          "password": {
            "description": "The password used for login",
            "type": "string"
          },
          "password_hash": {
            "description": "The password hash",
            "type": "string"
          },
          "password_salt": {
            "description": "The password salt",
            "type": "string"
          },
          "phone_number": {
            "description": "The phone number of the user on the impacted site",
            "type": "string"
          },
          "raw_intel_id": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/api.RuleDetailsV1"
          },
          "site": {
            "description": "The source where this entity was found",
            "type": "string"
          },
          "site_id": {
            "description": "The ID of the site within Recon",
            "type": "string"
          },
          "social": {
            "$ref": "#/components/schemas/api.ExposedDataRecordSocialV1"
          },
          "source_category": {
            "description": "The category of the source where this entity was found",
            "type": "string"
          },
          "user_id": {
            "description": "The ID of the user on the impacted site",
            "type": "string"
          },
          "user_ip": {
            "description": "The IP of the user on the impacted site",
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "author",
          "cid",
          "created_date",
          "event_date",
          "exposure_date",
          "id",
          "notification_id",
          "raw_intel_id",
          "rule",
          "site",
          "source_category",
          "user_uuid"
        ]
      },
      "api.ObjectMetadata": {
        "properties": {
          "collection_name": {
            "type": "string"
          },
          "collection_version": {
            "type": "string"
          },
          "last_modified_time": {
            "format": "date-time",
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "object_key": {
            "type": "string"
          },
          "schema_version": {
            "type": "string"
          }
        },
        "required": [
          "collection_name",
          "namespace",
          "object_key",
          "schema_version"
        ]
      },
      "api.Paging": {
        "properties": {
          "count": {
            "description": "number of records returned",
            "format": "int32",
            "type": "integer"
          },
          "limit": {
            "description": "maximum number of records to return in a page",
            "format": "int32",
            "type": "integer"
          },
          "next": {
            "description": "start key to list results of next page, used in list APIs",
            "type": "string"
          },
          "offset": {
            "description": "index of the first record of the next page in search results",
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "description": "total number of records matching the filter criteria",
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "api.PatchRuleNotificationConfigV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "config_id": {
            "type": "string"
          },
          "plugin_id": {
            "type": "string"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          }
        }
      },
      "api.PatchRuleNotificationsV1": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/api.PatchRuleNotificationConfigV1"
          },
          "options": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "api.PatchRuleOperationV1": {
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/api.RuleScheduleV1Patch"
          },
          "start_on": {
            "format": "date-time",
            "type": "string"
          },
          "stop_on": {
            "type": "string"
          }
        },
        "required": [
          "stop_on"
        ]
      },
      "api.PatchRuleSearchV1": {
        "properties": {
          "filter": {
            "type": "string"
          },
          "lookback": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "trigger_mode": {
            "type": "string"
          }
        }
      },
      "api.PatternV1": {
        "properties": {
          "name": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "severity"
        ]
      },
      "api.PatternsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.PatternV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.PlatformsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Platform"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.ProcessesRanOnRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/api.DetectsQueryMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "resources"
        ]
      },
      "api.QueryEventDistribution": {
        "properties": {
          "bucket_first_bucket": {
            "description": "Timestamp of the first bucket in the returned events",
            "type": "string"
          },
          "bucket_last_bucket": {
            "description": "Timestamp of the last bucket in the returned events",
            "type": "string"
          },
          "bucket_span_humanized": {
            "description": "Human-readable description of the bucket span",
            "type": "string"
          },
          "bucket_span_millis": {
            "description": "Span of the returned buckets in milliseconds",
            "type": "string"
          }
        },
        "required": [
          "bucket_first_bucket",
          "bucket_last_bucket",
          "bucket_span_humanized",
          "bucket_span_millis"
        ]
      },
      "api.QueryJobAroundInput": {
        "properties": {
          "eventId": {
            "type": "string"
          },
          "numberOfEventsAfter": {
            "format": "int64",
            "type": "integer"
          },
          "numberOfEventsBefore": {
            "format": "int64",
            "type": "integer"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "eventId",
          "numberOfEventsAfter",
          "numberOfEventsBefore",
          "timestamp"
        ]
      },
      "api.QueryJobInput": {
        "properties": {
          "allowEventSkipping": {
            "description": "Enables some LogScale functions, such as head() and tail(), to stop processing all data in the selected timeframe and exit the query early",
            "type": "boolean"
          },
          "arguments": {
            "description": "JSON blob with parameters defined in query",
            "type": "object"
          },
          "around": {
            "$ref": "#/components/schemas/api.QueryJobAroundInput"
          },
          "autobucketCount": {
            "description": "The number of buckets the system should create during live query searches, when no other explicit bucketing aggregate is specified",
            "format": "int64",
            "type": "integer"
          },
          "end": {
            "description": "The date and time to use as the ending point of the search results",
            "type": "string"
          },
          "ingestEnd": {
            "description": "The end date and time applied for @ingesttimestamp",
            "type": "string"
          },
          "ingestStart": {
            "description": "The end date and time applied for @ingesttimestamp",
            "type": "string"
          },
          "isLive": {
            "description": "Sets whether this query is live. Defaults to false . Live queries are continuously updated.",
            "type": "boolean"
          },
          "queryString": {
            "description": "The CQL query to use for the search",
            "type": "string"
          },
          "start": {
            "description": "The date and time to use as the starting point of the search results",
            "type": "string"
          },
          "timeZone": {
            "description": "The time zone to use if start and end times are not specified in milliseconds. Eg: UTC",
            "type": "string"
          },
          "timeZoneOffsetMinutes": {
            "description": "A positive or negative number representing how many minutes a given time zone is ahead or behind Coordinated Universal Time (UTC)",
            "format": "int64",
            "type": "integer"
          },
          "useIngestTime": {
            "description": "When set to true, the event’s ingestStart and ingestEnd times are used as the basis for the query timespan rather than the start and end timestamps",
            "type": "boolean"
          }
        },
        "required": [
          "queryString"
        ]
      },
      "api.QueryJobResponse": {
        "properties": {
          "hashedQueryOnView": {
            "description": "A string hash of the optimized query (the \"query plan\"). For advanced users.",
            "type": "string"
          },
          "id": {
            "description": "The id of the started queryjob. This can be used to poll results.",
            "type": "string"
          }
        },
        "required": [
          "hashedQueryOnView",
          "id"
        ]
      },
      "api.QueryJobsResults": {
        "properties": {
          "cancelled": {
            "description": "Indicates whether the query has been cancelled",
            "type": "boolean"
          },
          "done": {
            "description": "True if the query has run to completion",
            "type": "boolean"
          },
          "events": {
            "description": "JSON of the events as an array",
            "items": {
              "$ref": "#/components/schemas/api.QueryJobsResults.events"
            },
            "type": "array"
          },
          "filesUsed": {
            "description": "List of the files used to fulfill the query",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filterMatches": {
            "description": "Entries that match the supplied filter",
            "items": {
              "$ref": "#/components/schemas/api.QueryJobsResults.filterMatches"
            },
            "type": "array"
          },
          "metaData": {
            "$ref": "#/components/schemas/api.QueryMetadataJSON"
          },
          "queryEventDistribution": {
            "$ref": "#/components/schemas/api.QueryEventDistribution"
          },
          "warnings": {
            "description": "List of warnings returned using the WarningJson",
            "items": {
              "$ref": "#/components/schemas/api.WarningJSON"
            },
            "type": "array"
          }
        },
        "required": [
          "cancelled",
          "done",
          "events",
          "filesUsed",
          "filterMatches",
          "metaData",
          "queryEventDistribution",
          "warnings"
        ]
      },
      "api.QueryJobsResults.events": {},
      "api.QueryJobsResults.filterMatches": {},
      "api.QueryMetadataJSON": {
        "properties": {
          "costs": {
            "$ref": "#/components/schemas/.costs"
          },
          "digestFlow": {
            "$ref": "#/components/schemas/.digestFlow"
          },
          "eventCount": {
            "description": "Number of events in the result set",
            "format": "int64",
            "type": "integer"
          },
          "extraData": {
            "$ref": "#/components/schemas/api.QueryMetadataJSON.extraData"
          },
          "fieldOrder": {
            "description": "Order of the returned fields",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filterQuery": {
            "$ref": "#/components/schemas/api.QueryMetadataJSON.filterQuery"
          },
          "isAggregate": {
            "description": "True if this is an aggregate query",
            "type": "boolean"
          },
          "pollAfter": {
            "description": "How soon to poll the query after it has been submitted to expected results",
            "format": "int64",
            "type": "integer"
          },
          "processedBytes": {
            "description": "Number of bytes processed to return results",
            "format": "int64",
            "type": "integer"
          },
          "processedEvents": {
            "description": "Number of events processed in result set",
            "format": "int64",
            "type": "integer"
          },
          "queryEnd": {
            "description": "Timestamp of the end of the query",
            "format": "int64",
            "type": "integer"
          },
          "querySpent": {
            "$ref": "#/components/schemas/.querySpent"
          },
          "queryStart": {
            "description": "Timestampt of when the query started",
            "format": "int64",
            "type": "integer"
          },
          "queuedMillis": {
            "description": "Number of milliseconds the query was queued before execution",
            "format": "int64",
            "type": "integer"
          },
          "quotaTotalSpent": {
            "$ref": "#/components/schemas/.quotaTotalSpent"
          },
          "responderVHost": {
            "description": "Number of the host returning the response",
            "format": "int64",
            "type": "integer"
          },
          "resultBufferSize": {
            "description": "Size of the buffer used to store the result",
            "format": "int64",
            "type": "integer"
          },
          "timeMillis": {
            "description": "Time spent executing the query in milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "totalWork": {
            "description": "Total amount of work to execute the query",
            "format": "int64",
            "type": "integer"
          },
          "warning": {
            "description": "Deprecated: Use warnings in the message root instead",
            "type": "string"
          },
          "warnings": {
            "description": "Use 'warnings' in the message root instead",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "workDone": {
            "description": "Estimate of the work done to complete the query",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "costs",
          "digestFlow",
          "eventCount",
          "extraData",
          "fieldOrder",
          "filterQuery",
          "isAggregate",
          "pollAfter",
          "processedBytes",
          "processedEvents",
          "queryEnd",
          "querySpent",
          "queryStart",
          "queuedMillis",
          "quotaTotalSpent",
          "responderVHost",
          "resultBufferSize",
          "timeMillis",
          "totalWork",
          "warning",
          "warnings",
          "workDone"
        ]
      },
      "api.QueryMetadataJSON.extraData": {},
      "api.QueryMetadataJSON.filterQuery": {},
      "api.ResourceIDsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.RespCertificatesV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.CertificatesResponseV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta"
        ]
      },
      "api.RuleCreateRequestV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notifications": {
            "items": {
              "$ref": "#/components/schemas/api.CreateRuleNotifications"
            },
            "type": "array"
          },
          "operation": {
            "$ref": "#/components/schemas/api.CreateRuleOperationV1"
          },
          "search": {
            "$ref": "#/components/schemas/api.RuleSearchV1"
          },
          "severity": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "tactic": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          },
          "trigger_on_create": {
            "type": "boolean"
          }
        },
        "required": [
          "customer_id",
          "name",
          "operation",
          "search",
          "severity",
          "status"
        ]
      },
      "api.RuleCreateV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "disposition_id": {
            "format": "int32",
            "type": "integer"
          },
          "field_values": {
            "items": {
              "$ref": "#/components/schemas/domain.FieldValue"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "pattern_severity": {
            "type": "string"
          },
          "rulegroup_id": {
            "type": "string"
          },
          "ruletype_id": {
            "type": "string"
          }
        },
        "required": [
          "comment",
          "description",
          "disposition_id",
          "field_values",
          "name",
          "pattern_severity",
          "rulegroup_id",
          "ruletype_id"
        ]
      },
      "api.RuleDetailsV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "priority",
          "topic"
        ]
      },
      "api.RuleGroupCreateRequestV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        },
        "required": [
          "comment",
          "description",
          "name",
          "platform"
        ]
      },
      "api.RuleGroupModifyRequestV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rulegroup_version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "description",
          "enabled",
          "id",
          "name",
          "rulegroup_version"
        ]
      },
      "api.RuleGroupV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "committed_on": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "rule_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/api.RuleV1"
            },
            "type": "array"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "committed_on",
          "created_by",
          "created_on",
          "customer_id",
          "deleted",
          "description",
          "enabled",
          "id",
          "modified_by",
          "modified_on",
          "name",
          "platform",
          "rule_ids",
          "rules",
          "version"
        ]
      },
      "api.RuleGroupsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.RuleGroupV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.RulePatchRequestV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notifications": {
            "items": {
              "$ref": "#/components/schemas/api.PatchRuleNotificationsV1"
            },
            "type": "array"
          },
          "operation": {
            "$ref": "#/components/schemas/api.PatchRuleOperationV1"
          },
          "search": {
            "$ref": "#/components/schemas/api.PatchRuleSearchV1"
          },
          "severity": {
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tactic": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "api.RuleScheduleV1": {
        "properties": {
          "definition": {
            "type": "string"
          }
        },
        "required": [
          "definition"
        ]
      },
      "api.RuleScheduleV1Patch": {
        "properties": {
          "definition": {
            "type": "string"
          }
        },
        "required": [
          "definition"
        ]
      },
      "api.RuleSearchV1": {
        "properties": {
          "filter": {
            "type": "string"
          },
          "lookback": {
            "type": "string"
          },
          "outcome": {
            "type": "string"
          },
          "trigger_mode": {
            "type": "string"
          }
        },
        "required": [
          "filter",
          "lookback",
          "outcome"
        ]
      },
      "api.RuleTypeV1": {
        "properties": {
          "channel": {
            "format": "integer",
            "type": "integer"
          },
          "disposition_map": {
            "items": {
              "$ref": "#/components/schemas/domain.Disposition"
            },
            "type": "array"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/domain.Field"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "long_desc": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "released": {
            "type": "boolean"
          }
        },
        "required": [
          "channel",
          "disposition_map",
          "fields",
          "id",
          "long_desc",
          "name",
          "platform",
          "released"
        ]
      },
      "api.RuleTypesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.RuleTypeV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.RuleUpdateV1": {
        "properties": {
          "description": {
            "type": "string"
          },
          "disposition_id": {
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "field_values": {
            "items": {
              "$ref": "#/components/schemas/domain.FieldValue"
            },
            "type": "array"
          },
          "instance_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pattern_severity": {
            "type": "string"
          },
          "rulegroup_version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "description",
          "disposition_id",
          "enabled",
          "field_values",
          "instance_id",
          "name",
          "pattern_severity",
          "rulegroup_version"
        ]
      },
      "api.RuleUpdateV2": {
        "properties": {
          "description": {
            "type": "string"
          },
          "disposition_id": {
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "field_values": {
            "items": {
              "$ref": "#/components/schemas/domain.FieldValue"
            },
            "type": "array"
          },
          "instance_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pattern_severity": {
            "type": "string"
          },
          "rulegroup_version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "description",
          "disposition_id",
          "enabled",
          "field_values",
          "instance_id",
          "name",
          "pattern_severity",
          "rulegroup_version"
        ]
      },
      "api.RuleUpdatesRequestV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "rule_updates": {
            "items": {
              "$ref": "#/components/schemas/api.RuleUpdateV1"
            },
            "type": "array"
          },
          "rulegroup_id": {
            "type": "string"
          },
          "rulegroup_version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "rule_updates",
          "rulegroup_id",
          "rulegroup_version"
        ]
      },
      "api.RuleUpdatesRequestV2": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "rule_updates": {
            "items": {
              "$ref": "#/components/schemas/api.RuleUpdateV2"
            },
            "type": "array"
          },
          "rulegroup_id": {
            "type": "string"
          },
          "rulegroup_version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "rule_updates",
          "rulegroup_id",
          "rulegroup_version"
        ]
      },
      "api.RuleV1": {
        "properties": {
          "action_label": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "committed_on": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "disposition_id": {
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "field_values": {
            "items": {
              "$ref": "#/components/schemas/domain.FieldValue"
            },
            "type": "array"
          },
          "instance_id": {
            "type": "string"
          },
          "instance_version": {
            "format": "integer",
            "type": "integer"
          },
          "magic_cookie": {
            "format": "int64",
            "type": "integer"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pattern_id": {
            "type": "string"
          },
          "pattern_severity": {
            "type": "string"
          },
          "rulegroup_id": {
            "type": "string"
          },
          "ruletype_id": {
            "type": "string"
          },
          "ruletype_name": {
            "type": "string"
          },
          "version_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "action_label",
          "comment",
          "committed_on",
          "created_by",
          "created_on",
          "customer_id",
          "deleted",
          "description",
          "disposition_id",
          "enabled",
          "field_values",
          "instance_id",
          "instance_version",
          "magic_cookie",
          "modified_by",
          "modified_on",
          "name",
          "pattern_id",
          "pattern_severity",
          "rulegroup_id",
          "ruletype_id",
          "ruletype_name",
          "version_ids"
        ]
      },
      "api.RulesGetRequestV1": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "api.RulesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.RuleV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.SensorDetailsResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/internal.SensorStatus"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.TokenCreateRequestV1": {
        "properties": {
          "expires_timestamp": {
            "description": "The token's expiration time (RFC-3339). Null, if the token never expires.",
            "format": "date-time",
            "type": "string"
          },
          "label": {
            "description": "The token label.",
            "type": "string"
          },
          "type": {
            "description": "The token type.",
            "type": "string"
          }
        }
      },
      "api.TokenDetailsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.tokenDetailsResourceV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.ValidationRequestFieldV1": {
        "properties": {
          "name": {
            "type": "string"
          },
          "test_data": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/domain.ValueItem"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "test_data",
          "type",
          "values"
        ]
      },
      "api.ValidationRequestV1": {
        "properties": {
          "fields": {
            "items": {
              "$ref": "#/components/schemas/api.ValidationRequestFieldV1"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ]
      },
      "api.ValidationResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.FieldValidation"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.WarningJSON": {
        "properties": {
          "category": {
            "description": "Warnings are categorised to allow you to deal with a whole set of warnings the same way. Other values may be returned if cluster nodes are out of sync, using a newer or older version of LogScale.",
            "type": "string"
          },
          "classification": {
            "type": "string"
          },
          "code": {
            "description": "A stable message code that can be used to compare error types or look up error descriptions.",
            "type": "string"
          },
          "message": {
            "description": "A Human readable text describing the warning.",
            "type": "string"
          }
        },
        "required": [
          "category",
          "classification",
          "code",
          "message"
        ]
      },
      "api.WeeklyAverageResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/entities.RollingAverage"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.auditEventDetailsResourceV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "actor",
          "description",
          "id",
          "timestamp",
          "token_id"
        ]
      },
      "api.auditEventDetailsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.auditEventDetailsResourceV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.customerSettingsPatchRequestV1": {
        "description": "To require tokens for all installations in your CID, set `tokens_required` to `true`. To disable token requirement, set `tokens_required` to `false`To modify the maximum number of active tokens a customer may have, provide a positive interger value on `max_active_tokens` field",
        "properties": {
          "max_active_tokens": {
            "description": "Set to a positive interger value to set limit of active tokens a customer may have at a time.",
            "format": "integer",
            "type": "integer"
          },
          "tokens_required": {
            "description": "Set to true to enable installation tokens for the customer.",
            "type": "boolean"
          }
        }
      },
      "api.customerSettingsResourceV1": {
        "properties": {
          "max_active_tokens": {
            "format": "integer",
            "type": "integer"
          },
          "tokens_required": {
            "type": "boolean"
          }
        },
        "required": [
          "tokens_required"
        ]
      },
      "api.customerSettingsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/api.customerSettingsResourceV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.postEnrollmentDetails": {
        "properties": {
          "email_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expires_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "email_addresses",
          "expires_at"
        ]
      },
      "api.postEnrollmentDetailsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "api.postEnrollmentDetailsV4": {
        "properties": {
          "email_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enrollment_type": {
            "type": "string"
          },
          "expires_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "email_addresses",
          "enrollment_type",
          "expires_at"
        ]
      },
      "api.tokenDetailsResourceV1": {
        "properties": {
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "expires_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "last_used_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "revoked_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "created_timestamp",
          "expires_timestamp",
          "id",
          "label",
          "last_used_timestamp",
          "revoked_timestamp",
          "status",
          "type",
          "value"
        ]
      },
      "api.tokenPatchRequestV1": {
        "properties": {
          "expires_timestamp": {
            "description": "The token's expiration time (RFC-3339). Null, if the token never expires.",
            "format": "date-time",
            "type": "string"
          },
          "label": {
            "description": "The token label.",
            "type": "string"
          },
          "revoked": {
            "description": "Set to true to revoke the token, false to un-revoked it.",
            "type": "boolean"
          }
        }
      },
      "api.userMetadataResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserMetadata"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.userRoleIDsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.userRoleResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserRole"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "apidomain.DynamicExecuteSearchRequestV1": {
        "properties": {
          "end": {
            "type": "string"
          },
          "repo_or_view": {
            "type": "string"
          },
          "search_query": {
            "type": "string"
          },
          "search_query_args": {
            "type": "object"
          },
          "start": {
            "type": "string"
          }
        },
        "required": [
          "repo_or_view",
          "search_query",
          "search_query_args"
        ]
      },
      "apidomain.QueryResponseV1": {
        "properties": {
          "event_count": {
            "format": "int32",
            "type": "integer"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/apidomain.QueryResponseV1.events"
            },
            "type": "array"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/client.Field"
            },
            "type": "array"
          },
          "filtered_event_count": {
            "format": "int32",
            "type": "integer"
          },
          "job_status": {
            "$ref": "#/components/schemas/client.JobStatus"
          },
          "meta_data": {
            "$ref": "#/components/schemas/client.QueryResultMetadata"
          },
          "schemas": {
            "$ref": "#/components/schemas/client.QueryResponseSchemasV1"
          }
        },
        "required": [
          "event_count",
          "events",
          "filtered_event_count"
        ]
      },
      "apidomain.QueryResponseV1.events": {
        "type": "object"
      },
      "apidomain.QueryResponseWrapperV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/apidomain.QueryResponseV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "apidomain.RepoViewListItemV1": {
        "properties": {
          "connections": {
            "items": {
              "$ref": "#/components/schemas/apidomain.ViewConnectionV1"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "has_test_data": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_contracted": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "type_name": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "display_name",
          "has_test_data",
          "id",
          "name",
          "name_contracted",
          "type_name"
        ]
      },
      "apidomain.RepoViewListItemWrapperV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/apidomain.RepoViewListItemV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "apidomain.RepositoryV1": {
        "properties": {
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "description",
          "display_name",
          "id",
          "name",
          "size"
        ]
      },
      "apidomain.SavedSearchExecuteRequestV1": {
        "properties": {
          "end": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "type": "object"
          },
          "start": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "with_in": {
            "$ref": "#/components/schemas/client.ExtraIn"
          },
          "with_limit": {
            "$ref": "#/components/schemas/client.ExtraLimit"
          },
          "with_renames": {
            "items": {
              "$ref": "#/components/schemas/client.ExtraRename"
            },
            "type": "array"
          },
          "with_sort": {
            "$ref": "#/components/schemas/client.ExtraSort"
          }
        }
      },
      "apidomain.ViewConnectionV1": {
        "properties": {
          "filter": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/apidomain.RepositoryV1"
          }
        },
        "required": [
          "filter",
          "repository"
        ]
      },
      "assets.GetResourceArtifactsResponse": {
        "properties": {
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/resources.ResourceArtifact"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "artifacts",
          "meta"
        ]
      },
      "assets.GetResourceIDsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/rest.CursorAndLimitMetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "assets.GetResourcesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/rest.CursorMetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/resources.CloudResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "base.PolicyMembersRespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "A collection of device details",
            "items": {
              "$ref": "#/components/schemas/device.Device"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "base.SetContentUpdatePolicyPrecedenceReqV1": {
        "properties": {
          "ids": {
            "description": "The ids of all current content-update policies for the platform specified. The precedence will be set in the order the ids are specified",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "base.SetPolicyPrecedenceReqV1": {
        "description": "Sets the precedence order for policies of a given platform",
        "properties": {
          "ids": {
            "description": "The ids of all current prevention policies for the platform specified. The precedence will be set in the order the ids are specified",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_name": {
            "description": "The name of the platform for which to set precedence",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          }
        },
        "required": [
          "ids",
          "platform_name"
        ]
      },
      "binservapi.MsaPutFileResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "changes.ACL": {
        "properties": {
          "acl_permission_change": {
            "items": {
              "$ref": "#/components/schemas/changes.ACLChange"
            },
            "type": "array"
          },
          "entity": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "entity_name": {
            "type": "string"
          }
        }
      },
      "changes.ACLChange": {
        "properties": {
          "operation": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          }
        }
      },
      "changes.After": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "changes.Attribute": {
        "properties": {
          "attribute": {
            "type": "string"
          },
          "change": {
            "type": "string"
          }
        },
        "required": [
          "attribute",
          "change"
        ]
      },
      "changes.Basic": {
        "properties": {
          "entity": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          }
        }
      },
      "changes.Before": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "changes.Change": {
        "properties": {
          "action_timestamp": {
            "type": "string"
          },
          "action_type": {
            "description": "Possible values: UNKNOWN, CREATE, WRITE, DELETE, SET, RENAME.",
            "type": "string"
          },
          "aid": {
            "type": "string"
          },
          "attributes": {
            "items": {
              "$ref": "#/components/schemas/changes.Attribute"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "command_line": {
            "type": "string"
          },
          "diff": {
            "$ref": "#/components/schemas/changes.Diff"
          },
          "entity_path": {
            "type": "string"
          },
          "entity_path_new": {
            "type": "string"
          },
          "entity_type": {
            "description": "Possible values: UNKNOWN, FILE, DIR, REGKEY,  REGVAL.",
            "type": "string"
          },
          "file_size": {
            "format": "integer",
            "type": "integer"
          },
          "grandparent_process_image_file_name": {
            "type": "string"
          },
          "host": {
            "$ref": "#/components/schemas/changes.Host"
          },
          "id": {
            "type": "string"
          },
          "ingestion_timestamp": {
            "type": "string"
          },
          "is_from_different_mount_namespace": {
            "type": "boolean"
          },
          "is_suppressed": {
            "type": "boolean"
          },
          "oci_container_id": {
            "type": "string"
          },
          "parent_process_image_file_name": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/changes.Permissions"
          },
          "permissions_lin": {
            "$ref": "#/components/schemas/changes.PermissionsLin"
          },
          "permissions_mac": {
            "$ref": "#/components/schemas/changes.PermissionsMac"
          },
          "platform_name": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/changes.Policy"
          },
          "prevalence": {
            "$ref": "#/components/schemas/changes.Prevalence"
          },
          "process_id": {
            "type": "string"
          },
          "process_image_file_name": {
            "type": "string"
          },
          "real_user_id": {
            "type": "string"
          },
          "severity": {
            "description": "Possible values: UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL",
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/changes.Tag"
            },
            "type": "array"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        },
        "required": [
          "action_timestamp",
          "action_type",
          "aid",
          "cid",
          "command_line",
          "entity_path",
          "entity_type",
          "file_size",
          "id",
          "ingestion_timestamp",
          "is_from_different_mount_namespace",
          "is_suppressed",
          "platform_name",
          "process_id",
          "process_image_file_name",
          "severity",
          "user_id",
          "user_name"
        ]
      },
      "changes.DACL": {
        "properties": {
          "changes_type": {
            "description": "Possible values: 0 - MODIFIED, 1 - NULL, 2 - EMPTY, 3 - SAME",
            "format": "int32",
            "type": "integer"
          },
          "entity_list": {
            "items": {
              "$ref": "#/components/schemas/changes.DACLEntity"
            },
            "type": "array"
          }
        }
      },
      "changes.DACLEntity": {
        "properties": {
          "acl_change_type": {
            "format": "int32",
            "type": "integer"
          },
          "acl_permission_change": {
            "items": {
              "$ref": "#/components/schemas/changes.Attribute"
            },
            "type": "array"
          },
          "acl_principal": {
            "type": "string"
          },
          "acl_principal_id": {
            "type": "string"
          },
          "acl_type": {
            "description": "Possible values: 0 - ALLOW, 1 - DENY",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "acl_permission_change",
          "acl_principal",
          "acl_principal_id",
          "acl_type"
        ]
      },
      "changes.Diff": {
        "properties": {
          "after": {
            "$ref": "#/components/schemas/changes.DiffType"
          }
        }
      },
      "changes.DiffHash": {
        "properties": {
          "sha256": {
            "type": "string"
          }
        }
      },
      "changes.DiffType": {
        "properties": {
          "hash": {
            "$ref": "#/components/schemas/changes.DiffHash"
          }
        }
      },
      "changes.GetChangesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/changes.Change"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "changes.Group": {
        "properties": {
          "after": {
            "$ref": "#/components/schemas/changes.After"
          },
          "before": {
            "$ref": "#/components/schemas/changes.Before"
          }
        }
      },
      "changes.HighVolumeQueryMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/changes.HighVolumeQueryPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "changes.HighVolumeQueryPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "after",
          "limit",
          "total"
        ]
      },
      "changes.HighVolumeQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/changes.HighVolumeQueryMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "changes.Host": {
        "properties": {
          "agent_version": {
            "type": "string"
          },
          "containment_status": {
            "type": "string"
          },
          "external_ip": {
            "type": "string"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/changes.HostGroup"
            },
            "type": "array"
          },
          "local_ip": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "changes.HostGroup": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "changes.Owner": {
        "properties": {
          "after": {
            "$ref": "#/components/schemas/changes.After"
          },
          "before": {
            "$ref": "#/components/schemas/changes.Before"
          }
        }
      },
      "changes.Permissions": {
        "properties": {
          "dacl": {
            "$ref": "#/components/schemas/changes.DACL"
          },
          "group": {
            "$ref": "#/components/schemas/changes.Group"
          },
          "owner": {
            "$ref": "#/components/schemas/changes.Owner"
          },
          "security_info": {
            "description": "Possible values: 0 - OWNER, 1 - GROUP, 2 - DACL, 3 - SACL",
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "changes.PermissionsLin": {
        "properties": {
          "acl": {
            "items": {
              "$ref": "#/components/schemas/changes.ACL"
            },
            "type": "array"
          },
          "basic": {
            "items": {
              "$ref": "#/components/schemas/changes.Basic"
            },
            "type": "array"
          },
          "default_acl": {
            "items": {
              "$ref": "#/components/schemas/changes.ACL"
            },
            "type": "array"
          },
          "group": {
            "$ref": "#/components/schemas/changes.Group"
          },
          "owner": {
            "$ref": "#/components/schemas/changes.Owner"
          },
          "security_info": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "changes.PermissionsMac": {
        "properties": {
          "acl": {
            "type": "boolean"
          },
          "basic": {
            "items": {
              "$ref": "#/components/schemas/changes.Basic"
            },
            "type": "array"
          },
          "common_attributes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group": {
            "$ref": "#/components/schemas/changes.Group"
          },
          "owner": {
            "$ref": "#/components/schemas/changes.Owner"
          },
          "security_info": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "changes.Policy": {
        "properties": {
          "name": {
            "type": "string"
          },
          "rule_group": {
            "$ref": "#/components/schemas/changes.PolicyRuleGroup"
          }
        }
      },
      "changes.PolicyRule": {
        "properties": {
          "base_path": {
            "type": "string"
          }
        }
      },
      "changes.PolicyRuleGroup": {
        "properties": {
          "name": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/changes.PolicyRule"
          }
        }
      },
      "changes.Prevalence": {
        "properties": {
          "computed_timestamp": {
            "type": "string"
          },
          "current": {
            "description": "Possible values: PENDING, UNIQUE, LOW, COMMON.",
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "reported": {
            "description": "Possible values: PENDING, UNIQUE, LOW, COMMON.",
            "type": "string"
          }
        },
        "required": [
          "computed_timestamp",
          "current",
          "key",
          "reported"
        ]
      },
      "changes.Tag": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "classification.Criteria": {
        "properties": {
          "accounts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "classification.Label": {
        "properties": {
          "criteria": {
            "items": {
              "$ref": "#/components/schemas/classification.Criteria"
            },
            "type": "array"
          },
          "dynamic": {
            "type": "boolean"
          },
          "global": {
            "type": "boolean"
          },
          "group": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "client.ActionRequest": {
        "properties": {
          "ids": {
            "description": "Execution IDs to perform an action",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "client.ArchiveCreateResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/client.ArchiveWithFilesV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.ArchiveListFilesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.ArchiveWithFilesV1": {
        "properties": {
          "error": {
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mime_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "upload_timestamp": {
            "type": "string"
          }
        },
        "required": [
          "mime_type",
          "name",
          "size",
          "status",
          "upload_timestamp"
        ]
      },
      "client.Cost": {
        "properties": {
          "liveCost": {
            "format": "int32",
            "type": "integer"
          },
          "queryCount": {
            "format": "int32",
            "type": "integer"
          },
          "staticCost": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "liveCost",
          "queryCount",
          "staticCost"
        ]
      },
      "client.Costs": {
        "properties": {
          "liveCost": {
            "format": "double",
            "type": "number"
          },
          "liveCostRate": {
            "format": "double",
            "type": "number"
          },
          "staticCost": {
            "format": "double",
            "type": "number"
          },
          "staticCostRate": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "liveCost",
          "liveCostRate",
          "staticCost",
          "staticCostRate"
        ]
      },
      "client.DataIngestResponseV1": {
        "properties": {
          "repo": {
            "$ref": "#/components/schemas/client.Repository"
          },
          "rows_written": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "repo",
          "rows_written"
        ]
      },
      "client.DataIngestResponseWrapperV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/client.DataIngestResponseV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.DigestFlow": {
        "properties": {
          "ingestTimeKnownGood": {
            "format": "int64",
            "type": "integer"
          },
          "maxIngestLatency": {
            "format": "int32",
            "type": "integer"
          },
          "minIngestTimeIncluded": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "ingestTimeKnownGood",
          "maxIngestLatency",
          "minIngestTimeIncluded"
        ]
      },
      "client.ExtraIn": {
        "properties": {
          "field": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "field",
          "values"
        ]
      },
      "client.ExtraLimit": {
        "properties": {
          "from": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "from",
          "limit"
        ]
      },
      "client.ExtraRename": {
        "properties": {
          "as": {
            "type": "string"
          },
          "field": {
            "type": "string"
          }
        },
        "required": [
          "as",
          "field"
        ]
      },
      "client.ExtraSort": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "order": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reverse": {
            "type": "boolean"
          },
          "type": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "client.ExtractionCreateRequestV1": {
        "properties": {
          "extract_all": {
            "type": "boolean"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/client.ExtractionFileParametersV1"
            },
            "type": "array"
          },
          "sha256": {
            "type": "string"
          }
        }
      },
      "client.ExtractionCreateResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/client.ExtractionWithFilesV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.ExtractionFileParametersV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "is_confidential": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "client.ExtractionFileResultV1": {
        "properties": {
          "error": {
            "type": "string"
          },
          "extract_timestamp": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "extract_timestamp",
          "name",
          "status"
        ]
      },
      "client.ExtractionListFilesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/client.ExtractionFileResultV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.ExtractionWithFilesV1": {
        "properties": {
          "error": {
            "type": "string"
          },
          "extract_timestamp": {
            "type": "string"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/client.ExtractionFileResultV1"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "extract_timestamp",
          "status"
        ]
      },
      "client.Field": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "topValues": {
            "items": {
              "$ref": "#/components/schemas/client.TopValue"
            },
            "type": "array"
          }
        },
        "required": [
          "count",
          "name",
          "topValues"
        ]
      },
      "client.JobStatus": {
        "properties": {
          "content_length": {
            "format": "int32",
            "type": "integer"
          },
          "digest_algo": {
            "type": "string"
          },
          "digest_hex": {
            "type": "string"
          },
          "event_count": {
            "format": "integer",
            "type": "integer"
          },
          "file_link": {
            "type": "string"
          },
          "filtered_event_count": {
            "format": "integer",
            "type": "integer"
          },
          "job_id": {
            "type": "string"
          },
          "job_url": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "percent_complete": {
            "format": "int32",
            "type": "integer"
          },
          "result_count": {
            "format": "int32",
            "type": "integer"
          },
          "run_duration": {
            "format": "double",
            "type": "number"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "job_id"
        ]
      },
      "client.QueryResponseSchemasV1": {
        "properties": {
          "request_schema": {
            "type": "string"
          },
          "response_schema": {
            "type": "string"
          }
        }
      },
      "client.QueryResultMetadata": {
        "properties": {
          "costs": {
            "$ref": "#/components/schemas/client.Costs"
          },
          "digestFlow": {
            "$ref": "#/components/schemas/client.DigestFlow"
          },
          "eventCount": {
            "format": "int32",
            "type": "integer"
          },
          "extraData": {
            "type": "object"
          },
          "fieldOrder": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isAggregate": {
            "type": "boolean"
          },
          "pollAfter": {
            "format": "int32",
            "type": "integer"
          },
          "processedBytes": {
            "format": "int32",
            "type": "integer"
          },
          "processedEvents": {
            "format": "int32",
            "type": "integer"
          },
          "queryEnd": {
            "format": "int64",
            "type": "integer"
          },
          "querySpent": {
            "$ref": "#/components/schemas/client.Spent"
          },
          "queryStart": {
            "format": "int64",
            "type": "integer"
          },
          "quotaTotalSpent": {
            "$ref": "#/components/schemas/client.Spent"
          },
          "responderVHost": {
            "format": "int32",
            "type": "integer"
          },
          "resultBufferSize": {
            "format": "integer",
            "type": "integer"
          },
          "timeMillis": {
            "format": "int32",
            "type": "integer"
          },
          "totalWork": {
            "format": "int32",
            "type": "integer"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/client.QueryResultMetadata.warnings"
            },
            "type": "array"
          },
          "workDone": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "costs",
          "digestFlow",
          "eventCount",
          "extraData",
          "fieldOrder",
          "isAggregate",
          "pollAfter",
          "processedBytes",
          "processedEvents",
          "queryEnd",
          "querySpent",
          "queryStart",
          "quotaTotalSpent",
          "responderVHost",
          "resultBufferSize",
          "timeMillis",
          "totalWork",
          "warnings",
          "workDone"
        ]
      },
      "client.QueryResultMetadata.warnings": {},
      "client.QuerySamplesRequest": {
        "properties": {
          "sha256s": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "client.Repository": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "space_used": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "space_used"
        ]
      },
      "client.SampleMetadataResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/client.SampleMetadataV2"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.SampleMetadataV2": {
        "properties": {
          "file_name": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          }
        },
        "required": [
          "sha256"
        ]
      },
      "client.Spent": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/client.Cost"
          },
          "hour": {
            "$ref": "#/components/schemas/client.Cost"
          },
          "oneMinute": {
            "$ref": "#/components/schemas/client.Cost"
          },
          "tenMinutes": {
            "$ref": "#/components/schemas/client.Cost"
          }
        },
        "required": [
          "day",
          "hour",
          "oneMinute",
          "tenMinutes"
        ]
      },
      "client.SystemDefinitionCreateResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "client.SystemDefinitionDeProvisionRequest": {
        "properties": {
          "definition_id": {
            "description": "Customer scoped definition ID that is being deprovisioned. This is required when the template is defined as multi-instance",
            "type": "string"
          },
          "deprovision_all": {
            "description": "When enabled, the CustomerDefinitionID property is ignored and all template workflows are deprovisioned",
            "type": "boolean"
          },
          "template_id": {
            "description": "ID of the system definition template that is to be deprovisioned",
            "type": "string"
          },
          "template_name": {
            "description": "Name of the system definition template to deprovision",
            "type": "string"
          }
        },
        "required": [
          "definition_id",
          "deprovision_all",
          "template_id",
          "template_name"
        ]
      },
      "client.SystemDefinitionPromoteRequest": {
        "properties": {
          "customer_definition_id": {
            "description": "Customer scoped definition ID that is being promoted. This is required when the template is defined as multi-instance",
            "type": "string"
          },
          "name": {
            "description": "Optional name to be set on the customer scope definition. Must be unique within a given CID.",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/parameter.TemplateProvisionParameters"
          },
          "template_id": {
            "description": "ID of the system definition template that was previously created",
            "type": "string"
          },
          "template_name": {
            "description": "Name of the system definition template to provision",
            "type": "string"
          },
          "template_version": {
            "description": "Version of system definition template that was previously created, if omitted the latest version will be used.",
            "type": "string"
          }
        },
        "required": [
          "customer_definition_id",
          "name",
          "parameters",
          "template_id",
          "template_name",
          "template_version"
        ]
      },
      "client.SystemDefinitionProvisionRequest": {
        "properties": {
          "name": {
            "description": "Optional name to be set on the customer scope definition. Must be unique within a given CID.",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/parameter.TemplateProvisionParameters"
          },
          "template_id": {
            "description": "ID of the system definition template that was previously created",
            "type": "string"
          },
          "template_name": {
            "description": "Name of the system definition template to provision",
            "type": "string"
          },
          "template_version": {
            "description": "Version of system definition template that was previously created, if omitted the latest version will be used.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parameters",
          "template_id",
          "template_name",
          "template_version"
        ]
      },
      "client.TopValue": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "$ref": "#/components/schemas/client.TopValue.value"
          }
        },
        "required": [
          "count",
          "value"
        ]
      },
      "client.TopValue.value": {},
      "common.CIDAuditResult": {
        "properties": {
          "average_overall_score": {
            "format": "double",
            "type": "number"
          },
          "cid": {
            "type": "string"
          },
          "num_aids": {
            "format": "integer",
            "type": "integer"
          },
          "platforms": {
            "items": {
              "$ref": "#/components/schemas/common.OSAudit"
            },
            "type": "array"
          }
        },
        "required": [
          "average_overall_score",
          "cid",
          "num_aids",
          "platforms"
        ]
      },
      "common.CountAsResource": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "label"
        ]
      },
      "common.CountResponse": {
        "properties": {
          "Resources": {
            "items": {
              "$ref": "#/components/schemas/common.CountAsResource"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "Resources",
          "meta"
        ]
      },
      "common.Credentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "common.EntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/common.EntitiesResponse.resources"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "common.EntitiesResponse.resources": {},
      "common.GenericEntityResponse[string]": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "common.OSAudit": {
        "properties": {
          "audit": {
            "type": "object"
          },
          "average_overall_score": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "num_aids": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "audit",
          "average_overall_score",
          "name",
          "num_aids"
        ]
      },
      "common.RegistryCredentialsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/common.Credentials"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "content_update.ContentUpdateSettingsReqV1": {
        "properties": {
          "ring_assignment_settings": {
            "items": {
              "$ref": "#/components/schemas/content_update.RingAssignmentSettingsReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "ring_assignment_settings"
        ]
      },
      "content_update.CreatePoliciesReqV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/content_update.CreatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "content_update.CreatePolicyReqV1": {
        "properties": {
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/content_update.ContentUpdateSettingsReqV1"
          }
        },
        "required": [
          "name"
        ]
      },
      "content_update.PolicyV1": {
        "properties": {
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/content_update.SettingsV1"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "settings"
        ]
      },
      "content_update.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/content_update.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "content_update.RingAssignmentOverrideSettingV1": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "content_update.RingAssignmentSettingsReqV1": {
        "properties": {
          "delay_hours": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "ring_assignment": {
            "type": "string"
          }
        },
        "required": [
          "delay_hours",
          "id",
          "ring_assignment"
        ]
      },
      "content_update.RingAssignmentSettingsV1": {
        "properties": {
          "delay_hours": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "override": {
            "$ref": "#/components/schemas/content_update.RingAssignmentOverrideSettingV1"
          },
          "ring_assignment": {
            "type": "string"
          }
        },
        "required": [
          "delay_hours",
          "id",
          "override",
          "ring_assignment"
        ]
      },
      "content_update.SettingsV1": {
        "properties": {
          "ring_assignment_settings": {
            "items": {
              "$ref": "#/components/schemas/content_update.RingAssignmentSettingsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "ring_assignment_settings"
        ]
      },
      "content_update.UpdatePoliciesReqV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/content_update.UpdatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "content_update.UpdatePolicyReqV1": {
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/content_update.ContentUpdateSettingsReqV1"
          }
        },
        "required": [
          "id"
        ]
      },
      "contentchanges.ChangeContentsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/contentchanges.ContentDiff"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "contentchanges.Content": {
        "properties": {
          "data": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "data",
          "path"
        ]
      },
      "contentchanges.ContentDiff": {
        "properties": {
          "after": {
            "$ref": "#/components/schemas/contentchanges.Content"
          },
          "before": {
            "$ref": "#/components/schemas/contentchanges.Content"
          },
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "core.EntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/core.EntitiesResponse.resources"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "core.EntitiesResponse.resources": {},
      "dataclassifications.DataClassificationFinding": {
        "properties": {
          "labelId": {
            "type": "string"
          },
          "tagId": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "labelId",
          "tagId",
          "timestamp"
        ]
      },
      "dataclassifications.Label": {
        "properties": {
          "label_id": {
            "type": "string"
          },
          "label_name": {
            "type": "string"
          },
          "last_seen": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "label_id",
          "label_name",
          "last_seen"
        ]
      },
      "dataclassifications.Response": {
        "properties": {
          "findings": {
            "items": {
              "$ref": "#/components/schemas/dataclassifications.DataClassificationFinding"
            },
            "type": "array"
          },
          "found": {
            "type": "boolean"
          },
          "labels": {
            "type": "object"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "scanned": {
            "type": "boolean"
          },
          "tags": {
            "type": "object"
          }
        },
        "required": [
          "found",
          "scanned"
        ]
      },
      "dataclassifications.Tag": {
        "properties": {
          "labels": {
            "type": "object"
          },
          "last_seen": {
            "format": "date-time",
            "type": "string"
          },
          "tag_id": {
            "type": "string"
          },
          "tag_name": {
            "type": "string"
          }
        },
        "required": [
          "labels",
          "last_seen",
          "tag_id",
          "tag_name"
        ]
      },
      "definitions.DefinitionEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "definitions.DefinitionExt": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "description": "Indicates whether the workflow is enabled and active or not.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the trigger.",
            "type": "string"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_modified_timestamp": {
            "description": "Timestamp of when this version of the workflow was created.",
            "format": "date-time",
            "type": "string"
          },
          "loops": {
            "type": "object"
          },
          "multi_instance": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "output_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameters": {
            "$ref": "#/components/schemas/v2.Parameters"
          },
          "parent": {
            "$ref": "#/components/schemas/v2.Model"
          },
          "provision_on_install": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          },
          "type": {
            "type": "string"
          },
          "uniqNodeSeen": {
            "type": "object"
          },
          "use_cases": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vendors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "description": "Version of the workflow. A given definition ID can have many versions. Each time an update is applied a new version is generated.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "enabled",
          "id",
          "last_modified_timestamp",
          "name",
          "nodeRegistry",
          "parent",
          "trigger",
          "uniqNodeSeen",
          "version"
        ]
      },
      "definitions.DefinitionExternalResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/definitions.DefinitionExt"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "definitions.DefinitionImportResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/definitions.DefinitionImportResponseEntity"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "definitions.DefinitionImportResponseEntity": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/graph.DefinitionModel"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/definitions.PlaybookParameter"
            },
            "type": "array"
          },
          "validation_errors": {
            "items": {
              "$ref": "#/components/schemas/graph.ValidationError"
            },
            "type": "array"
          }
        },
        "required": [
          "parameters"
        ]
      },
      "definitions.FlightControlRequest": {
        "properties": {
          "all_cids": {
            "description": "Flag to specify the workflow should apply to all child CIDs",
            "type": "boolean"
          },
          "excluded_cids": {
            "description": "Child CIDs that are excluded from workflow propagation used in conjunction with the all_cids flag",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include_parent_cid": {
            "description": "Flag to specify whether the workflow should apply to the current (parent) CID, in addition to specified child CIDs",
            "type": "boolean"
          },
          "selected_cids": {
            "description": "List of child CIDs that the workflow should apply to if not propagating to all CIDs",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "all_cids",
          "include_parent_cid"
        ]
      },
      "definitions.ParameterProperty": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "definitions.PlaybookParameter": {
        "properties": {
          "node_id": {
            "description": "id of the node in the model where the parameter needs to be applied",
            "type": "string"
          },
          "properties": {
            "description": "list of properties that need to be parameterized",
            "items": {
              "$ref": "#/components/schemas/definitions.ParameterProperty"
            },
            "type": "array"
          }
        },
        "required": [
          "node_id",
          "properties"
        ]
      },
      "deployments.APIDeploymentRingView": {
        "properties": {
          "complete_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "gates": {
            "items": {
              "$ref": "#/components/schemas/deployments.Gate"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ramping_schedule": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "start_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "threshold": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "deployments.APIDeploymentView": {
        "properties": {
          "complete_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "rings": {
            "items": {
              "$ref": "#/components/schemas/deployments.APIDeploymentRingView"
            },
            "type": "array"
          },
          "start_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "deployments.APIDeploymentViewWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deployments.APIDeploymentView"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deployments.EntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Deployment"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "deployments.Gate": {},
      "destinations.MigrationDestination": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "name"
        ]
      },
      "detection.AggregateIndicator": {
        "properties": {
          "actors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "first_seen": {
            "format": "date-time",
            "type": "string"
          },
          "malicious_ip": {
            "type": "boolean"
          },
          "malware_families": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "modified_at": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "detection.AggregateThreatIntel": {
        "properties": {
          "indicator": {
            "$ref": "#/components/schemas/detection.AggregateIndicator"
          }
        }
      },
      "detection.Enrichment": {
        "properties": {
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enrichment_type": {
            "type": "string"
          }
        }
      },
      "detection.EnrichmentHost": {
        "properties": {
          "id": {
            "type": "string"
          },
          "launch_time": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/detection.HostNetwork"
          },
          "platform": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "detection.HostNetwork": {
        "properties": {
          "network_id": {
            "type": "string"
          },
          "network_interface_ids": {
            "type": "string"
          },
          "subnet_id": {
            "type": "string"
          }
        }
      },
      "detection.InventoryEnrichment": {
        "properties": {
          "document_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enrichment_type": {
            "type": "string"
          },
          "host": {
            "items": {
              "$ref": "#/components/schemas/detection.EnrichmentHost"
            },
            "type": "array"
          }
        }
      },
      "detections.apiAssessmentDetections": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIAssessmentDetections"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detections.apiCombinedDetections": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APICombinedDetections"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detections.apiDetectionsBySeverity": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detections.apiDetectionsByType": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detections.apiDetectionsCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIDetectionCount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detects.Behavior": {
        "properties": {
          "alleged_filetype": {
            "type": "string"
          },
          "behavior_id": {
            "type": "string"
          },
          "cmdline": {
            "type": "string"
          },
          "confidence": {
            "format": "int32",
            "type": "integer"
          },
          "container_id": {
            "type": "string"
          },
          "control_graph_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "filepath": {
            "type": "string"
          },
          "ioc_description": {
            "type": "string"
          },
          "ioc_source": {
            "type": "string"
          },
          "ioc_type": {
            "type": "string"
          },
          "ioc_value": {
            "type": "string"
          },
          "md5": {
            "type": "string"
          },
          "objective": {
            "type": "string"
          },
          "parent_details": {
            "$ref": "#/components/schemas/detects.ParentDetails"
          },
          "pattern_disposition": {
            "format": "int32",
            "type": "integer"
          },
          "pattern_disposition_details": {
            "$ref": "#/components/schemas/patterndisposition.PatternDisposition"
          },
          "rule_instance_id": {
            "type": "string"
          },
          "rule_instance_version": {
            "format": "int32",
            "type": "integer"
          },
          "scenario": {
            "type": "string"
          },
          "severity": {
            "format": "int32",
            "type": "integer"
          },
          "sha256": {
            "type": "string"
          },
          "tactic": {
            "type": "string"
          },
          "tactic_id": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          },
          "technique_id": {
            "type": "string"
          },
          "template_instance_id": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "triggering_process_graph_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        },
        "required": [
          "alleged_filetype",
          "behavior_id",
          "cmdline",
          "confidence",
          "control_graph_id",
          "description",
          "device_id",
          "display_name",
          "filename",
          "filepath",
          "ioc_description",
          "ioc_source",
          "ioc_type",
          "ioc_value",
          "md5",
          "objective",
          "parent_details",
          "pattern_disposition",
          "pattern_disposition_details",
          "scenario",
          "severity",
          "sha256",
          "tactic",
          "tactic_id",
          "technique",
          "technique_id",
          "timestamp",
          "triggering_process_graph_id",
          "user_id",
          "user_name"
        ]
      },
      "detects.DeviceDetailIndexed": {
        "properties": {
          "agent_load_flags": {
            "type": "string"
          },
          "agent_local_time": {
            "type": "string"
          },
          "agent_version": {
            "type": "string"
          },
          "bios_manufacturer": {
            "type": "string"
          },
          "bios_version": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "config_id_base": {
            "type": "string"
          },
          "config_id_build": {
            "type": "string"
          },
          "config_id_platform": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "external_ip": {
            "type": "string"
          },
          "first_login_timestamp": {
            "type": "string"
          },
          "first_login_user": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hostname": {
            "type": "string"
          },
          "instance_id": {
            "type": "string"
          },
          "last_login_timestamp": {
            "type": "string"
          },
          "last_login_user": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "local_ip": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "machine_domain": {
            "type": "string"
          },
          "major_version": {
            "type": "string"
          },
          "minor_version": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "notes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "os_version": {
            "type": "string"
          },
          "ou": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_id": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pod_name": {
            "type": "string"
          },
          "pod_namespace": {
            "type": "string"
          },
          "pod_service_account_name": {
            "type": "string"
          },
          "product_type": {
            "type": "string"
          },
          "product_type_desc": {
            "type": "string"
          },
          "release_group": {
            "type": "string"
          },
          "service_provider": {
            "type": "string"
          },
          "service_provider_account_id": {
            "type": "string"
          },
          "site_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "system_manufacturer": {
            "type": "string"
          },
          "system_product_name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "device_id"
        ]
      },
      "detects.ExternalAlert": {
        "properties": {
          "agent_id": {
            "description": "Device or sensor ID for which the Alert was generated",
            "type": "string"
          },
          "aggregate_id": {
            "description": "Common linkage between multiple Alerts that belong to the same detection bouquet",
            "type": "string"
          },
          "assigned_to_name": {
            "description": "Name of the person this Alert is assigned to",
            "type": "string"
          },
          "assigned_to_uid": {
            "description": "UserID to which this Alert is assigned to",
            "type": "string"
          },
          "assigned_to_uuid": {
            "description": "UUID to which this Alert is assigned to",
            "type": "string"
          },
          "cid": {
            "description": "Unique ID of CrowdStrike customers",
            "type": "string"
          },
          "composite_id": {
            "description": "An opaque internal identifier that can uniquely identify an Alert",
            "type": "string"
          },
          "confidence": {
            "description": "Confidence is a 1-100 integer value denoting the confidence that, when this Alert fires, it is indicative of malicious activity",
            "format": "integer",
            "type": "integer"
          },
          "crawled_timestamp": {
            "description": "indicates when ThreatGraph was crawled to gather info for this alert creation/update",
            "format": "date-time",
            "type": "string"
          },
          "created_timestamp": {
            "description": "indicates when the Alert was first written to backend store",
            "format": "date-time",
            "type": "string"
          },
          "data_domains": {
            "description": "Data Domains represents domains to which this alert belongs to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "Short, customer-visible summary of the detected activity",
            "type": "string"
          },
          "display_name": {
            "description": "Customer visible name for the Alert's pattern",
            "type": "string"
          },
          "email_sent": {
            "description": "Boolean to know if we sent email regarding this Alert",
            "type": "boolean"
          },
          "external": {
            "description": "Boolean indicating if this Alert is internal or external",
            "type": "boolean"
          },
          "id": {
            "description": "Vertex key which triggers the formation of the Alert",
            "type": "string"
          },
          "name": {
            "description": "Pattern Name coming either from Taxonomy or directly from the ingested Alert",
            "type": "string"
          },
          "objective": {
            "description": "End goal that an attack adversary intends to achieve according to MITRE",
            "type": "string"
          },
          "pattern_id": {
            "description": "Taxonomy patternID for this Alert",
            "format": "integer",
            "type": "integer"
          },
          "platform": {
            "description": "Platform that this Alert was triggered on e.g. Android, Windows, etc..",
            "type": "string"
          },
          "product": {
            "description": "Product specifies the SKU that this Alert belongs to e.g. mobile, idp, epp",
            "type": "string"
          },
          "scenario": {
            "description": "Scenario was used pre-Handrails to display additional killchain context for UI alerts. With handrails, this field is mostly  obsolete in favor of tactic/technique. Still, it can be useful for determining specific pattern types that are not straightforward to distinguish from other fields alone",
            "type": "string"
          },
          "seconds_to_resolved": {
            "description": "Seconds To Resolved represents the seconds elapsed since this alert has been resolved",
            "format": "int64",
            "type": "integer"
          },
          "seconds_to_triaged": {
            "description": "Seconds To Triage represents the seconds elapsed since this alert has been triaged",
            "format": "int64",
            "type": "integer"
          },
          "severity": {
            "description": "Severity is also a 1-100 integer value, but unlike confidence severity impacts how a Alert is displayed in the UI",
            "format": "integer",
            "type": "integer"
          },
          "severity_name": {
            "description": "Severity name is a UI friendly bucketing of the severity integer",
            "type": "string"
          },
          "show_in_ui": {
            "description": "Boolean indicating if this Alert will be shown in the UI or if it's hidden'",
            "type": "boolean"
          },
          "source_products": {
            "description": "Source Products are products that produced events which contributed to this alert",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source_vendors": {
            "description": "Source Vendors are vendors that produced events which contributed to this alert",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "Could be one of the following - New, closed, in_progress, reopened",
            "type": "string"
          },
          "tactic": {
            "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "type": "string"
          },
          "tactic_id": {
            "description": "Unique ID for the tactic seen in the Alert",
            "type": "string"
          },
          "tags": {
            "description": "Tags are string values associated with the alert that can be added or removed through the API",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "technique": {
            "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "type": "string"
          },
          "technique_id": {
            "description": "Unique ID for the technique seen in the Alert",
            "type": "string"
          },
          "timestamp": {
            "description": "stored value coming in directly from the ingested event or set by cloud in the absence of it",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Type of definition Detections Extensibility use. Keyed-off of Pattern of the incoming events/Alerts",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "indicates when the Alert was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "aggregate_id",
          "assigned_to_name",
          "assigned_to_uid",
          "assigned_to_uuid",
          "cid",
          "composite_id",
          "confidence",
          "crawled_timestamp",
          "created_timestamp",
          "data_domains",
          "description",
          "display_name",
          "email_sent",
          "external",
          "id",
          "name",
          "objective",
          "pattern_id",
          "platform",
          "product",
          "scenario",
          "seconds_to_resolved",
          "seconds_to_triaged",
          "severity",
          "severity_name",
          "show_in_ui",
          "source_products",
          "source_vendors",
          "status",
          "tactic",
          "tactic_id",
          "tags",
          "technique",
          "technique_id",
          "timestamp",
          "type",
          "updated_timestamp"
        ]
      },
      "detects.HostInfo": {
        "properties": {
          "active_directory_dn_display": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "domain": {
            "type": "string"
          }
        },
        "required": [
          "domain"
        ]
      },
      "detects.ParentDetails": {
        "properties": {
          "parent_cmdline": {
            "type": "string"
          },
          "parent_md5": {
            "type": "string"
          },
          "parent_process_graph_id": {
            "type": "string"
          },
          "parent_sha256": {
            "type": "string"
          }
        },
        "required": [
          "parent_cmdline",
          "parent_md5",
          "parent_process_graph_id",
          "parent_sha256"
        ]
      },
      "detects.QuarantinedFile": {
        "properties": {
          "id": {
            "type": "string"
          },
          "paths": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "detectsapi.AggregateAlertQueryRequest": {
        "properties": {
          "date_ranges": {
            "description": "DateRanges applies to date_range aggregations.",
            "items": {
              "$ref": "#/components/schemas/msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "description": "Exclude Post-filtering on queried fields",
            "type": "string"
          },
          "field": {
            "description": "Field applies for example to date_histogram and range aggregations.",
            "type": "string"
          },
          "filter": {
            "description": "FQL query specifying the filter parameters.",
            "type": "string"
          },
          "from": {
            "description": "used in bucket sort aggregations as an offset",
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "description": "Include Post-filtering on queried fields",
            "type": "string"
          },
          "interval": {
            "description": "Interval applies for example to date_histogram aggregations (uses calendar_interval). Possible values: year, month, week, day, hour, minute.",
            "type": "string"
          },
          "max_doc_count": {
            "description": "only return terms that match less than a configured number of hits.",
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "description": "only return terms that match more than a configured number of hits.",
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "description": "Missing is a value for missing term field. The behavior that query should return if the document does not have the field in the query",
            "type": "string"
          },
          "name": {
            "description": "Name of the aggregate query",
            "type": "string"
          },
          "q": {
            "description": "represents full text query",
            "type": "string"
          },
          "ranges": {
            "description": "Ranges applies to range aggregations.",
            "items": {
              "$ref": "#/components/schemas/msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "description": "how many term buckets should be returned.",
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "description": "Sort spec, ex: 'pattern_id|desc'.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "sub aggregate alert query.",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregateAlertQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "description": "TimeZone timezone to specify when bucketing results.",
            "type": "string"
          },
          "type": {
            "description": "Datastore supported value types: term, terms, date_histogram, facet, range, cardinality. Exact allowed values specific to endpoint.",
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "detectsapi.AggregatesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "collection of aggregate query results",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResult"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.AggregationResult": {
        "properties": {
          "buckets": {
            "description": "collection of aggregate results matching the criteria",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResultItem"
            },
            "type": "array"
          },
          "name": {
            "description": "aggregate query name as provided in the request",
            "type": "string"
          },
          "sum_other_doc_count": {
            "description": "sum of the document counts for all buckets that are not part of the response",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "detectsapi.AggregationResultItem": {
        "properties": {
          "count": {
            "description": "total count of items falling in this bucket",
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "description": "used to determine the start of the range in aggregations",
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "description": "the formatted string version using the format parameter specification",
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/detectsapi.AggregationResultItem.label"
          },
          "string_from": {
            "description": "string representation of 'From' date",
            "type": "string"
          },
          "string_to": {
            "description": "string representation of 'To' date",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "nested aggregation result",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "description": "used to determine end of the range in aggregations",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "numeric aggregations (Min, Max, Avg, Percentile...)",
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "description": "string representation of Value",
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "detectsapi.AggregationResultItem.label": {},
      "detectsapi.AlertQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Array of the Alerts requested",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.PatchEntitiesAlertsV2Request": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "detectsapi.PatchEntitiesAlertsV3Request": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          },
          "composite_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "composite_ids"
        ]
      },
      "detectsapi.PostCombinedAlertsV1Meta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "detectsapi.PostCombinedAlertsV1Paging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "total"
        ]
      },
      "detectsapi.PostCombinedAlertsV1RequestSwagger": {
        "properties": {
          "after": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          }
        }
      },
      "detectsapi.PostCombinedAlertsV1ResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1Meta"
          },
          "resources": {
            "description": "Resources represent the slice of Alerts that were retrieved",
            "items": {
              "$ref": "#/components/schemas/detects.ExternalAlert"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "detectsapi.PostEntitiesAlertsV1Request": {
        "properties": {
          "ids": {
            "description": "IDs represent the slice of Alert IDs that would be looked up",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "detectsapi.PostEntitiesAlertsV1ResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Resources represent the slice of Alerts that were retrieved for the given Alert IDs",
            "items": {
              "$ref": "#/components/schemas/detects.ExternalAlert"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.PostEntitiesAlertsV2Request": {
        "properties": {
          "composite_ids": {
            "description": "CompositeIDs represent the slice of Alert CompositeIDs that would be looked up",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "composite_ids"
        ]
      },
      "detectsapi.PostEntitiesAlertsV2ResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Resources represent the slice of Alerts that were retrieved for the given Alert IDs",
            "items": {
              "$ref": "#/components/schemas/detects.ExternalAlert"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.ResponseFields": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "device.Device": {
        "properties": {
          "agent_load_flags": {
            "type": "string"
          },
          "agent_local_time": {
            "type": "string"
          },
          "agent_version": {
            "type": "string"
          },
          "base_image_version": {
            "type": "string"
          },
          "bios_manufacturer": {
            "type": "string"
          },
          "bios_version": {
            "type": "string"
          },
          "build_number": {
            "type": "string"
          },
          "chassis_type": {
            "type": "string"
          },
          "chassis_type_desc": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "config_id_base": {
            "type": "string"
          },
          "config_id_build": {
            "type": "string"
          },
          "config_id_platform": {
            "type": "string"
          },
          "connection_ip": {
            "type": "string"
          },
          "connection_mac_address": {
            "type": "string"
          },
          "cpu_signature": {
            "type": "string"
          },
          "cpu_vendor": {
            "type": "string"
          },
          "default_gateway_ip": {
            "type": "string"
          },
          "deployment_type": {
            "type": "string"
          },
          "detection_suppression_status": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "device_policies": {
            "$ref": "#/components/schemas/device.MappedDevicePolicies"
          },
          "email": {
            "type": "string"
          },
          "external_ip": {
            "type": "string"
          },
          "filesystem_containment_status": {
            "type": "string"
          },
          "first_login_timestamp": {
            "type": "string"
          },
          "first_login_user": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "group_hash": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_deleted_status": {
            "type": "string"
          },
          "host_hidden_status": {
            "type": "string"
          },
          "host_utc_offset": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "instance_id": {
            "type": "string"
          },
          "internet_exposure": {
            "type": "string"
          },
          "k8s_cluster_git_version": {
            "type": "string"
          },
          "k8s_cluster_id": {
            "type": "string"
          },
          "k8s_cluster_version": {
            "type": "string"
          },
          "kernel_version": {
            "type": "string"
          },
          "last_login_timestamp": {
            "type": "string"
          },
          "last_login_uid": {
            "type": "string"
          },
          "last_login_user": {
            "type": "string"
          },
          "last_login_user_sid": {
            "type": "string"
          },
          "last_reboot": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "license_activation_state": {
            "type": "string"
          },
          "linux_sensor_mode": {
            "type": "string"
          },
          "local_ip": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "machine_domain": {
            "type": "string"
          },
          "major_version": {
            "type": "string"
          },
          "managed_apps": {
            "$ref": "#/components/schemas/device.ManagedApps"
          },
          "meta": {
            "$ref": "#/components/schemas/device.DeviceMeta"
          },
          "migration_completed_time": {
            "type": "string"
          },
          "minor_version": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "notes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "os_build": {
            "type": "string"
          },
          "os_product_name": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "ou": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_id": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "pod_annotations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pod_host_ip4": {
            "type": "string"
          },
          "pod_host_ip6": {
            "type": "string"
          },
          "pod_hostname": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_ip4": {
            "type": "string"
          },
          "pod_ip6": {
            "type": "string"
          },
          "pod_labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pod_name": {
            "type": "string"
          },
          "pod_namespace": {
            "type": "string"
          },
          "pod_service_account_name": {
            "type": "string"
          },
          "pointer_size": {
            "type": "string"
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/device.DevicePolicy"
            },
            "type": "array"
          },
          "product_type": {
            "type": "string"
          },
          "product_type_desc": {
            "type": "string"
          },
          "provision_status": {
            "type": "string"
          },
          "reduced_functionality_mode": {
            "type": "string"
          },
          "release_group": {
            "type": "string"
          },
          "rtr_state": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "service_pack_major": {
            "type": "string"
          },
          "service_pack_minor": {
            "type": "string"
          },
          "service_provider": {
            "type": "string"
          },
          "service_provider_account_id": {
            "type": "string"
          },
          "site_name": {
            "type": "string"
          },
          "slow_changing_modified_timestamp": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "system_manufacturer": {
            "type": "string"
          },
          "system_product_name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "zone_group": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "device_id"
        ]
      },
      "device.DeviceMeta": {
        "properties": {
          "version": {
            "type": "string"
          },
          "version_string": {
            "type": "string"
          }
        }
      },
      "device.DevicePolicy": {
        "properties": {
          "applied": {
            "type": "boolean"
          },
          "applied_date": {
            "format": "date-time",
            "type": "string"
          },
          "assigned_date": {
            "format": "date-time",
            "type": "string"
          },
          "exempt": {
            "type": "boolean"
          },
          "last_evaluation_date": {
            "format": "date-time",
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "policy_type": {
            "type": "string"
          },
          "rule_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rule_set_id": {
            "type": "string"
          },
          "settings_hash": {
            "type": "string"
          },
          "uninstall_protection": {
            "type": "string"
          }
        },
        "required": [
          "policy_id",
          "policy_type"
        ]
      },
      "device.ManagedApp": {
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "required": [
          "version"
        ]
      },
      "device.ManagedApps": {
        "properties": {
          "airlock": {
            "$ref": "#/components/schemas/device.ManagedApp"
          },
          "automox": {
            "$ref": "#/components/schemas/device.ManagedApp"
          },
          "aws-verified-access": {
            "$ref": "#/components/schemas/device.ManagedApp"
          },
          "identity-protection": {
            "$ref": "#/components/schemas/device.ManagedApp"
          },
          "jumpcloud": {
            "$ref": "#/components/schemas/device.ManagedApp"
          },
          "netskope": {
            "$ref": "#/components/schemas/device.ManagedApp"
          }
        }
      },
      "device.MappedDevicePolicies": {
        "properties": {
          "airlock": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "automox": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "aws-verified-access": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "browser-extension": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "consumer-subscription": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "content-update": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "customer-entitlements": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "data-protection": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "device_control": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "fim": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "firewall": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "global_config": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "host-retention": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "identity-protection": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "it-automation": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "jumpcloud": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "kubernetes-admission-control": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "mobile": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "netskope": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "network-scan-content": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "prevention": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "remote_response": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "sca": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "sensor_update": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "system-tray": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "vulnerability-management": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "ztl": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          }
        }
      },
      "device_control.CreatePoliciesV1": {
        "description": "A req to create DeviceControl policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to create",
            "items": {
              "$ref": "#/components/schemas/device_control.CreatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "device_control.CreatePolicyReqV1": {
        "properties": {
          "clone_id": {
            "description": "If specified the settings of the DeviceControl policy identified by the id will be used",
            "type": "string"
          },
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/device_control.SettingsReqV1"
          }
        },
        "required": [
          "name",
          "platform_name"
        ]
      },
      "device_control.DefaultUSBException": {
        "properties": {
          "action": {
            "description": "Action to be taken when the exception is matched. Currently only WHITELIST is supported.",
            "enum": [
              "WHITELIST"
            ],
            "type": "string"
          },
          "class": {
            "description": "USB Device class",
            "enum": [
              "ANY",
              "AUDIO_VIDEO",
              "IMAGING",
              "MASS_STORAGE",
              "MOBILE",
              "PRINTER",
              "WIRELESS"
            ],
            "type": "string"
          },
          "combined_id": {
            "description": "Composite ID of the vendor ID, product ID, and serial number. Format: \u003cvendor ID\u003e_\u003cproduct ID\u003e_\u003cserial number\u003e",
            "type": "string"
          },
          "description": {
            "description": "Description for the exception",
            "type": "string"
          },
          "id": {
            "description": "ID of the exception. Leave empty to create a new exception",
            "type": "string"
          },
          "product_id": {
            "description": "Decimal value of the product ID. Required if a serial number is provided",
            "type": "string"
          },
          "product_name": {
            "description": "Device product name",
            "type": "string"
          },
          "serial_number": {
            "description": "Device serial number",
            "type": "string"
          },
          "vendor_id": {
            "description": "Decimal value of the vendor ID",
            "type": "string"
          },
          "vendor_name": {
            "description": "Device vendor name",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "device_control.ExceptionReqV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "combined_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration_time": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for an exception",
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "product_id_decimal": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "use_wildcard": {
            "description": "true indicates using blob syntax USB serial numbers",
            "type": "boolean"
          },
          "vendor_id": {
            "description": "Hexadecimal VendorID used to apply the exception",
            "type": "string"
          },
          "vendor_id_decimal": {
            "description": "Hexadecimal VendorID used to apply the exception",
            "type": "string"
          },
          "vendor_name": {
            "description": "Vendor Name, optional",
            "type": "string"
          }
        }
      },
      "device_control.ExceptionRespV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "class": {
            "description": "USB Class ID to apply the exception. If empty it applies to all classes",
            "type": "string"
          },
          "combined_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration_time": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for an exception",
            "type": "string"
          },
          "match_method": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "product_id_decimal": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "vendor_id": {
            "description": "Hexadecimal VendorID used to apply the exception",
            "type": "string"
          },
          "vendor_id_decimal": {
            "description": "Hexadecimal VendorID used to apply the exception",
            "type": "string"
          },
          "vendor_name": {
            "description": "Vendor Name",
            "type": "string"
          }
        },
        "required": [
          "class",
          "id"
        ]
      },
      "device_control.PolicyV1": {
        "properties": {
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/device_control.SettingsRespV1"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "settings"
        ]
      },
      "device_control.ReqUpdateDefaultDCPolicyV1": {
        "properties": {
          "custom_notifications": {
            "$ref": "#/components/schemas/device_control.USBCustomNotifications"
          }
        }
      },
      "device_control.ReqUpdateDefaultSettingsV1": {
        "properties": {
          "bluetooth_custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.BluetoothCustomNotifications"
          },
          "usb_custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotifications"
          },
          "usb_exceptions": {
            "description": "Default USB exceptions with precedence over policy settings.",
            "items": {
              "$ref": "#/components/schemas/device_control.ReqUpdateDefaultUSBExceptions"
            },
            "type": "array"
          }
        }
      },
      "device_control.ReqUpdateDefaultUSBExceptions": {
        "properties": {
          "delete_exceptions": {
            "description": "A collection of exception IDs to delete",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_name": {
            "description": "Name of the platform.",
            "enum": [
              "Windows,Mac"
            ],
            "type": "string"
          },
          "upsert_exceptions": {
            "description": "A collection of exceptions to add or update. Empty ID indicates a new exception",
            "items": {
              "$ref": "#/components/schemas/device_control.DefaultUSBException"
            },
            "type": "array"
          }
        },
        "required": [
          "delete_exceptions",
          "platform_name",
          "upsert_exceptions"
        ]
      },
      "device_control.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/device_control.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "device_control.RespV2": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/device_control.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "device_control.SettingsReqV1": {
        "properties": {
          "classes": {
            "description": "Settings that apply to a USB Class",
            "items": {
              "$ref": "#/components/schemas/device_control.USBClassExceptionsReqV1"
            },
            "type": "array"
          },
          "custom_notifications": {
            "$ref": "#/components/schemas/device_control.USBCustomNotifications"
          },
          "delete_exceptions": {
            "description": "An array of exception IDs to delete from the policy",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "end_user_notification": {
            "description": "Does the end user receives a notification when the policy is violated",
            "enum": [
              "SILENT",
              "NOTIFY_USER"
            ],
            "type": "string"
          },
          "enforcement_mode": {
            "description": "How is this policy enforced",
            "enum": [
              "MONITOR_ONLY",
              "MONITOR_ENFORCE"
            ],
            "type": "string"
          },
          "enhanced_file_metadata": {
            "description": "A bool value that enables file metadata functionality on the sensor or not",
            "type": "boolean"
          }
        },
        "required": [
          "classes",
          "delete_exceptions",
          "end_user_notification",
          "enforcement_mode"
        ]
      },
      "device_control.SettingsRespV1": {
        "properties": {
          "classes": {
            "description": "List of class_settings this policy applies to",
            "items": {
              "$ref": "#/components/schemas/device_control.USBClassExceptionsResponse"
            },
            "type": "array"
          },
          "custom_notifications": {
            "$ref": "#/components/schemas/device_control.USBCustomNotifications"
          },
          "end_user_notification": {
            "description": "Does the end user receives a notification when the policy is violated",
            "enum": [
              "SILENT",
              "NOTIFY_USER"
            ],
            "type": "string"
          },
          "enforcement_mode": {
            "description": "[How] is this policy enforced",
            "enum": [
              "MONITOR_ONLY",
              "MONITOR_ENFORCE",
              "OFF"
            ],
            "type": "string"
          },
          "enhanced_file_metadata": {
            "description": "Is file metadata processor enabled or not? true|false",
            "type": "boolean"
          }
        },
        "required": [
          "classes",
          "end_user_notification",
          "enforcement_mode",
          "enhanced_file_metadata"
        ]
      },
      "device_control.USBClassExceptionsReqV1": {
        "properties": {
          "action": {
            "description": "Policy action. Note: BLOCK_EXECUTE is only valid for MASS_STORAGE devices.",
            "enum": [
              "FULL_ACCESS",
              "FULL_BLOCK",
              "BLOCK_EXECUTE",
              "READ_ONLY"
            ],
            "type": "string"
          },
          "exceptions": {
            "description": "Exceptions to the rules of this policy setting",
            "items": {
              "$ref": "#/components/schemas/device_control.ExceptionReqV1"
            },
            "type": "array"
          },
          "id": {
            "description": "USB Class id",
            "type": "string"
          }
        },
        "required": [
          "action",
          "exceptions",
          "id"
        ]
      },
      "device_control.USBClassExceptionsResponse": {
        "properties": {
          "action": {
            "description": "Policy action. Note: BLOCK_EXECUTE is only valid for MASS_STORAGE devices.",
            "enum": [
              "FULL_ACCESS",
              "FULL_BLOCK",
              "BLOCK_EXECUTE",
              "READ_ONLY"
            ],
            "type": "string"
          },
          "exceptions": {
            "description": "Exceptions to the rules of this policy setting",
            "items": {
              "$ref": "#/components/schemas/device_control.ExceptionRespV1"
            },
            "type": "array"
          },
          "id": {
            "description": "USB Class id",
            "type": "string"
          }
        },
        "required": [
          "action",
          "exceptions",
          "id"
        ]
      },
      "device_control.USBCustomNotification": {
        "properties": {
          "custom_message": {
            "description": "The notification to be displayed to the end-user",
            "type": "string"
          },
          "use_custom": {
            "description": "If the custom notification or the default notification is in-use",
            "type": "boolean"
          }
        },
        "required": [
          "custom_message",
          "use_custom"
        ]
      },
      "device_control.USBCustomNotifications": {
        "properties": {
          "blocked_notification": {
            "$ref": "#/components/schemas/device_control.USBCustomNotification"
          },
          "restricted_notification": {
            "$ref": "#/components/schemas/device_control.USBCustomNotification"
          }
        }
      },
      "device_control.UpdatePoliciesReqV1": {
        "description": "A req to update DeviceControl policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to update",
            "items": {
              "$ref": "#/components/schemas/device_control.UpdatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "device_control.UpdatePolicyReqV1": {
        "description": "An update for a specific policy",
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/device_control.SettingsReqV1"
          }
        },
        "required": [
          "id",
          "settings"
        ]
      },
      "deviceapi.DeviceCombinedResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/deviceapi.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.DeviceSwagger"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deviceapi.DeviceDetailsResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.DeviceSwagger"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deviceapi.DevicePaging": {
        "properties": {
          "expires_at": {
            "format": "int64",
            "type": "integer"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "type": "string"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "total"
        ]
      },
      "deviceapi.DevicePagingV2": {
        "properties": {
          "expires_at": {
            "format": "int64",
            "type": "integer"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "next": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "total"
        ]
      },
      "deviceapi.DeviceResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/deviceapi.RequestMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deviceapi.DeviceSwagger": {
        "properties": {
          "agent_load_flags": {
            "type": "string"
          },
          "agent_local_time": {
            "type": "string"
          },
          "agent_version": {
            "type": "string"
          },
          "base_image_version": {
            "type": "string"
          },
          "bios_manufacturer": {
            "type": "string"
          },
          "bios_version": {
            "type": "string"
          },
          "build_number": {
            "type": "string"
          },
          "chassis_type": {
            "type": "string"
          },
          "chassis_type_desc": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "config_id_base": {
            "type": "string"
          },
          "config_id_build": {
            "type": "string"
          },
          "config_id_platform": {
            "type": "string"
          },
          "connection_ip": {
            "type": "string"
          },
          "connection_mac_address": {
            "type": "string"
          },
          "cpu_signature": {
            "type": "string"
          },
          "cpu_vendor": {
            "type": "string"
          },
          "default_gateway_ip": {
            "type": "string"
          },
          "deployment_type": {
            "type": "string"
          },
          "detection_suppression_status": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "device_policies": {
            "$ref": "#/components/schemas/deviceapi.MappedDevicePoliciesSwagger"
          },
          "email": {
            "type": "string"
          },
          "external_ip": {
            "type": "string"
          },
          "filesystem_containment_status": {
            "type": "string"
          },
          "first_login_timestamp": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "group_hash": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_hidden_status": {
            "type": "string"
          },
          "host_utc_offset": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "instance_id": {
            "type": "string"
          },
          "internet_exposure": {
            "type": "string"
          },
          "k8s_cluster_git_version": {
            "type": "string"
          },
          "k8s_cluster_id": {
            "type": "string"
          },
          "k8s_cluster_version": {
            "type": "string"
          },
          "kernel_version": {
            "type": "string"
          },
          "last_login_timestamp": {
            "type": "string"
          },
          "last_login_uid": {
            "type": "string"
          },
          "last_login_user": {
            "type": "string"
          },
          "last_login_user_sid": {
            "type": "string"
          },
          "last_reboot": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "linux_sensor_mode": {
            "type": "string"
          },
          "local_ip": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "machine_domain": {
            "type": "string"
          },
          "major_version": {
            "type": "string"
          },
          "managed_apps": {
            "$ref": "#/components/schemas/device.ManagedApps"
          },
          "meta": {
            "$ref": "#/components/schemas/device.DeviceMeta"
          },
          "migration_completed_time": {
            "type": "string"
          },
          "minor_version": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "notes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "os_build": {
            "type": "string"
          },
          "os_product_name": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "ou": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_id": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "pod_annotations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pod_host_ip4": {
            "type": "string"
          },
          "pod_host_ip6": {
            "type": "string"
          },
          "pod_hostname": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_ip4": {
            "type": "string"
          },
          "pod_ip6": {
            "type": "string"
          },
          "pod_labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pod_name": {
            "type": "string"
          },
          "pod_namespace": {
            "type": "string"
          },
          "pod_service_account_name": {
            "type": "string"
          },
          "pointer_size": {
            "type": "string"
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/device.DevicePolicy"
            },
            "type": "array"
          },
          "product_type": {
            "type": "string"
          },
          "product_type_desc": {
            "type": "string"
          },
          "provision_status": {
            "type": "string"
          },
          "reduced_functionality_mode": {
            "type": "string"
          },
          "release_group": {
            "type": "string"
          },
          "rtr_state": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "service_pack_major": {
            "type": "string"
          },
          "service_pack_minor": {
            "type": "string"
          },
          "service_provider": {
            "type": "string"
          },
          "service_provider_account_id": {
            "type": "string"
          },
          "site_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "system_manufacturer": {
            "type": "string"
          },
          "system_product_name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "zone_group": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "device_id"
        ]
      },
      "deviceapi.GroupMeta": {
        "properties": {
          "version": {
            "format": "int64",
            "type": "integer"
          },
          "version_string": {
            "type": "string"
          }
        }
      },
      "deviceapi.GroupResponseV1": {
        "properties": {
          "assignment_rule": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "group_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/deviceapi.GroupMeta"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "group_type",
          "id",
          "modified_by",
          "modified_timestamp",
          "name"
        ]
      },
      "deviceapi.GroupsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.GroupResponseV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deviceapi.LoginDetailV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "recent_logins": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.LoginInfoV1"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "device_id",
          "recent_logins"
        ]
      },
      "deviceapi.LoginHistoryResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.LoginDetailV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deviceapi.LoginInfoV1": {
        "properties": {
          "login_time": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        }
      },
      "deviceapi.MappedDevicePoliciesSwagger": {
        "properties": {
          "airlock": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "automox": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "aws-verified-access": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "browser-extension": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "content-update": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "customer-entitlements": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "data-protection": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "device_control": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "fim": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "firewall": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "global_config": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "host-retention": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "identity-protection": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "it-automation": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "jumpcloud": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "kubernetes-admission-control": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "mobile": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "netskope": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "network-scan-content": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "prevention": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "remote_response": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "sca": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "sensor_update": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "system-tray": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "vulnerability-management": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          },
          "ztl": {
            "$ref": "#/components/schemas/device.DevicePolicy"
          }
        }
      },
      "deviceapi.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/deviceapi.DevicePagingV2"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "deviceapi.NetworkAddressHistoryResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.NetworkAddressHistoryV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "deviceapi.NetworkAddressHistoryV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "history": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.NetworkAddressV1"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "device_id",
          "history"
        ]
      },
      "deviceapi.NetworkAddressV1": {
        "properties": {
          "ip_address": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "deviceapi.RequestMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/deviceapi.DevicePaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "deviceapi.UpdateDeviceDetailsResponseV1": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "device_id": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "updated": {
            "type": "boolean"
          }
        },
        "required": [
          "device_id",
          "updated"
        ]
      },
      "deviceapi.UpdateDeviceTagsRequestV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "device_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "action",
          "device_ids",
          "tags"
        ]
      },
      "deviceapi.UpdateDeviceTagsSwaggerV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/deviceapi.UpdateDeviceDetailsResponseV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "devicecontent.ContentCategory": {
        "properties": {
          "last_update": {
            "type": "string"
          },
          "override": {
            "type": "string"
          },
          "policy_setting": {
            "type": "string"
          }
        }
      },
      "devicecontent.State": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "content_update_policy_applied_date": {
            "type": "string"
          },
          "content_update_policy_id": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hidden_status": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "rapid_response_content": {
            "$ref": "#/components/schemas/devicecontent.ContentCategory"
          },
          "reduced_functionality_mode": {
            "type": "string"
          },
          "sensor_operations": {
            "$ref": "#/components/schemas/devicecontent.ContentCategory"
          },
          "system_critical": {
            "$ref": "#/components/schemas/devicecontent.ContentCategory"
          },
          "vulnerability_management": {
            "$ref": "#/components/schemas/devicecontent.ContentCategory"
          }
        },
        "required": [
          "cid",
          "device_id"
        ]
      },
      "devicecontentapi.EntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/devicecontent.State"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "devicecontentapi.QueryResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "devicecontrolapi.BluetoothClass": {
        "properties": {
          "action": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "exceptions": {
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.BluetoothException"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "minor_classes": {
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.BluetoothMinorClass"
            },
            "type": "array"
          }
        }
      },
      "devicecontrolapi.BluetoothCustomNotifications": {
        "properties": {
          "blocked_notification": {
            "$ref": "#/components/schemas/devicecontrolapi.CustomNotification"
          }
        }
      },
      "devicecontrolapi.BluetoothException": {
        "properties": {
          "action": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "combined_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration_time": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "match_method": {
            "type": "string"
          },
          "minor_classes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "product_id": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "trigger_id": {
            "type": "string"
          },
          "vendor_id": {
            "type": "string"
          },
          "vendor_id_source": {
            "type": "string"
          },
          "vendor_name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "devicecontrolapi.BluetoothExceptionBase": {
        "properties": {
          "action": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration_time": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "minor_classes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "product_id": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "vendor_id": {
            "type": "string"
          },
          "vendor_id_source": {
            "type": "string"
          },
          "vendor_name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "devicecontrolapi.BluetoothMinorClass": {
        "properties": {
          "action": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "minor_class": {
            "type": "string"
          }
        }
      },
      "devicecontrolapi.BluetoothSettings": {
        "properties": {
          "classes": {
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.BluetoothClass"
            },
            "type": "array"
          },
          "custom_end_user_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.BluetoothCustomNotifications"
          },
          "end_user_notification": {
            "type": "string"
          },
          "enforcement_mode": {
            "type": "string"
          }
        }
      },
      "devicecontrolapi.CustomNotification": {
        "properties": {
          "custom_message": {
            "description": "The message that will be shown to end users",
            "type": "string"
          },
          "use_custom": {
            "description": "Determines to use the custom or default end user notification",
            "type": "boolean"
          }
        },
        "required": [
          "custom_message",
          "use_custom"
        ]
      },
      "devicecontrolapi.ReqCreatePoliciesV1": {
        "properties": {
          "policies": {
            "description": "Array of policies",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.ReqCreatePolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "policies"
        ]
      },
      "devicecontrolapi.ReqCreatePolicyV1": {
        "properties": {
          "bluetooth_settings": {
            "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateBluetoothBaseV1"
          },
          "clone_id": {
            "description": "ID of an existing policy to clone",
            "type": "string"
          },
          "description": {
            "description": "A description of the policy",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "Name of the platform. *Required if clone_id is empty",
            "enum": [
              "Windows,Mac"
            ],
            "type": "string"
          },
          "usb_settings": {
            "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateUSBBaseV1"
          }
        }
      },
      "devicecontrolapi.ReqUpdateBaseV1External": {
        "properties": {
          "bluetooth_settings": {
            "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateBluetoothBaseV1"
          },
          "description": {
            "description": "Description of the policy (omit to keep current)",
            "type": "string"
          },
          "id": {
            "description": "ID of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy (omit to keep current)",
            "type": "string"
          },
          "usb_settings": {
            "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateUSBBaseV1External"
          }
        },
        "required": [
          "id"
        ]
      },
      "devicecontrolapi.ReqUpdateBasesV1External": {
        "properties": {
          "policies": {
            "description": "Array of policies",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateBaseV1External"
            },
            "type": "array"
          }
        },
        "required": [
          "policies"
        ]
      },
      "devicecontrolapi.ReqUpdateBluetoothBaseV1": {
        "properties": {
          "custom_end_user_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.BluetoothCustomNotifications"
          },
          "end_user_notification": {
            "description": "Determines if a notification will be shown to the end user (omit to keep current)",
            "enum": [
              "NOTIFY_USER,SILENT"
            ],
            "type": "string"
          },
          "enforcement_mode": {
            "description": "Enforcement for the Bluetooth policy (omit to keep current)",
            "enum": [
              "MONITOR_ONLY,MONITOR_ENFORCE,OFF"
            ],
            "type": "string"
          }
        },
        "required": [
          "custom_end_user_notifications",
          "end_user_notification",
          "enforcement_mode"
        ]
      },
      "devicecontrolapi.ReqUpdateBluetoothClassV1": {
        "properties": {
          "action": {
            "description": "Action to be taken for devices in this class",
            "enum": [
              "BLOCK_ALL,FULL_ACCESS"
            ],
            "type": "string"
          },
          "class": {
            "description": "The Bluetooth Major Device class name",
            "type": "string"
          },
          "minor_classes": {
            "description": "Array of Bluetooth Minor Device Classes in the Major Class",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateBluetoothMinorClassV1"
            },
            "type": "array"
          }
        },
        "required": [
          "action",
          "class",
          "minor_classes"
        ]
      },
      "devicecontrolapi.ReqUpdateBluetoothClassesV1": {
        "properties": {
          "classes": {
            "description": "Array of Bluetooth classes",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateBluetoothClassV1"
            },
            "type": "array"
          },
          "delete_exceptions": {
            "description": "IDs of exceptions to be deleted",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "upsert_exceptions": {
            "description": "Array of exceptions to add or update",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.BluetoothExceptionBase"
            },
            "type": "array"
          }
        },
        "required": [
          "classes",
          "delete_exceptions",
          "upsert_exceptions"
        ]
      },
      "devicecontrolapi.ReqUpdateBluetoothMinorClassV1": {
        "properties": {
          "action": {
            "description": "Action to be taken for devices in this class",
            "enum": [
              "FULL_ACCESS,BLOCK_ALL"
            ],
            "type": "string"
          },
          "minor_class": {
            "description": "Bluetooth Minor Device class name",
            "type": "string"
          }
        },
        "required": [
          "action",
          "minor_class"
        ]
      },
      "devicecontrolapi.ReqUpdatePoliciesClassesV1": {
        "properties": {
          "policies": {
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.ReqUpdatePolicyClassesV1"
            },
            "type": "array"
          }
        },
        "required": [
          "policies"
        ]
      },
      "devicecontrolapi.ReqUpdatePolicyClassesV1": {
        "properties": {
          "bluetooth_classes": {
            "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateBluetoothClassesV1"
          },
          "id": {
            "type": "string"
          },
          "usb_classes": {
            "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateUSBClassesV1"
          }
        },
        "required": [
          "id"
        ]
      },
      "devicecontrolapi.ReqUpdateUSBBaseV1": {
        "properties": {
          "custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotifications"
          },
          "end_user_notification": {
            "description": "Determines if a notification will be shown to the end user (omit to keep current)",
            "enum": [
              "NOTIFY_USER,SILENT"
            ],
            "type": "string"
          },
          "enforcement_mode": {
            "description": "Enforcement for the USB policy (omit to keep current)",
            "enum": [
              "MONITOR_ONLY,MONITOR_ENFORCE,OFF"
            ],
            "type": "string"
          },
          "enhanced_file_metadata": {
            "type": "boolean"
          },
          "whitelist_mode": {
            "description": "Determines if the policy will include whitelist exceptions",
            "enum": [
              "ENABLE_ALWAYS,DISABLE_VIRTUAL"
            ],
            "type": "string"
          }
        }
      },
      "devicecontrolapi.ReqUpdateUSBBaseV1External": {
        "properties": {
          "custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotifications"
          },
          "end_user_notification": {
            "description": "Determines if a notification will be shown to the end user (omit to keep current)",
            "enum": [
              "NOTIFY_USER,SILENT"
            ],
            "type": "string"
          },
          "enforcement_mode": {
            "description": "Enforcement for the USB policy (omit to keep current)",
            "enum": [
              "MONITOR_ONLY,MONITOR_ENFORCE,OFF"
            ],
            "type": "string"
          },
          "enhanced_file_metadata": {
            "type": "boolean"
          }
        }
      },
      "devicecontrolapi.ReqUpdateUSBClassV1": {
        "properties": {
          "action": {
            "description": "Action to be taken for devices in this class",
            "enum": [
              "FULL_ACCESS",
              "BLOCK_EXECUTE",
              "BLOCK_WRITE_EXECUTE",
              "BLOCK_ALL",
              "WHITELIST"
            ],
            "type": "string"
          },
          "class": {
            "description": "USB Device class",
            "enum": [
              "ANY",
              "AUDIO_VIDEO",
              "IMAGING",
              "MASS_STORAGE",
              "MOBILE",
              "PRINTER",
              "WIRELESS"
            ],
            "type": "string"
          }
        },
        "required": [
          "action",
          "class"
        ]
      },
      "devicecontrolapi.ReqUpdateUSBClassesV1": {
        "properties": {
          "classes": {
            "description": "A collection of classes to update actions",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.ReqUpdateUSBClassV1"
            },
            "type": "array"
          },
          "delete_exceptions": {
            "description": "A collection of exception IDs to delete",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "upsert_exceptions": {
            "description": "A collection of exceptions to add or update. Empty ID indicates a new exception",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.USBExceptionBase"
            },
            "type": "array"
          }
        },
        "required": [
          "classes",
          "delete_exceptions",
          "upsert_exceptions"
        ]
      },
      "devicecontrolapi.RespDefaultSettingV1": {
        "properties": {
          "errors": {
            "description": "Array of errors",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespMSAErrorV1"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/devicecontrolapi.RespMSAMetaV1"
          },
          "resources": {
            "description": "Array of default settings",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespUpdateDefaultSettingsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "resources"
        ]
      },
      "devicecontrolapi.RespDefaultUSBExceptions": {
        "properties": {
          "exceptions": {
            "description": "Array of default USB exceptions",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespUSBExceptionV2"
            },
            "type": "array"
          },
          "platform_id": {
            "description": "The platform numeric value. Windows:0, MacOS:1",
            "type": "string"
          },
          "platform_name": {
            "description": "Policy platform name (Windows or Mac)",
            "type": "string"
          }
        },
        "required": [
          "exceptions",
          "platform_id",
          "platform_name"
        ]
      },
      "devicecontrolapi.RespMSAErrorV1": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "devicecontrolapi.RespMSAMetaV1": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/devicecontrolapi.RespPagingDetailsV1"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "powered_by",
          "query_time",
          "trace_id"
        ]
      },
      "devicecontrolapi.RespPagingDetailsV1": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "devicecontrolapi.RespPoliciesV2": {
        "properties": {
          "errors": {
            "description": "Array of errors",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespMSAErrorV1"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/devicecontrolapi.RespMSAMetaV1"
          },
          "resources": {
            "description": "Array of policies",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespPolicyV2"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "resources"
        ]
      },
      "devicecontrolapi.RespPolicyV2": {
        "properties": {
          "assignment_type": {
            "description": "Default or Automatic",
            "type": "string"
          },
          "bluetooth_channel_version": {
            "description": "Bluetooth channel file version number",
            "format": "int64",
            "type": "integer"
          },
          "bluetooth_settings": {
            "$ref": "#/components/schemas/devicecontrolapi.BluetoothSettings"
          },
          "cid": {
            "description": "Customer ID of the policy",
            "type": "string"
          },
          "created_by": {
            "description": "CS username who created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "UTC time policy created",
            "type": "string"
          },
          "description": {
            "description": "Description of the policy",
            "type": "string"
          },
          "enabled": {
            "description": "Policy level enablement of the policy",
            "type": "boolean"
          },
          "groups": {
            "description": "Host group IDs assigned to this policy",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "ID of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "Last CS username who modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "UTC time policy modified",
            "type": "string"
          },
          "name": {
            "description": "Name of the policy",
            "type": "string"
          },
          "platform_id": {
            "description": "The platform numeric value. Windows:0, MacOS:1",
            "type": "string"
          },
          "platform_name": {
            "description": "Policy platform name (Windows or Mac)",
            "type": "string"
          },
          "precedence": {
            "description": "Order in which a policy is applied (lower values is higher precedence)",
            "format": "int64",
            "type": "integer"
          },
          "settings_hash": {
            "description": "The hash of hostgroups assigned to the policy",
            "type": "string"
          },
          "usb_channel_version": {
            "description": "USB channel file version number",
            "format": "int64",
            "type": "integer"
          },
          "usb_settings": {
            "$ref": "#/components/schemas/devicecontrolapi.RespUSBSettingsV2"
          }
        },
        "required": [
          "assignment_type",
          "cid",
          "created_by",
          "created_timestamp",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_id",
          "platform_name",
          "precedence",
          "usb_channel_version",
          "usb_settings"
        ]
      },
      "devicecontrolapi.RespUSBClassSettingsV2": {
        "properties": {
          "action": {
            "description": "Class level action (FULL_ACCESS,BLOCK_ALL,WHITELIST); MASS_STORAGE class only (BLOCK_EXECUTE,BLOCK_WRITE_EXECUTE)",
            "type": "string"
          },
          "class": {
            "description": "Name of the USB class",
            "type": "string"
          },
          "exceptions": {
            "description": "Array of USB exceptions",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespUSBExceptionV2"
            },
            "type": "array"
          },
          "id": {
            "description": "ID of the USB class",
            "type": "string"
          }
        },
        "required": [
          "action",
          "class",
          "exceptions",
          "id"
        ]
      },
      "devicecontrolapi.RespUSBExceptionV2": {
        "properties": {
          "action": {
            "type": "string"
          },
          "class": {
            "description": "USB Device Class",
            "type": "string"
          },
          "combined_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration_time": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the exception",
            "type": "string"
          },
          "match_method": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "product_name": {
            "description": "Product name",
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "trigger_id": {
            "type": "string"
          },
          "use_wildcard": {
            "type": "boolean"
          },
          "vendor_id": {
            "description": "Decimal value of the vendor ID",
            "type": "string"
          },
          "vendor_name": {
            "description": "Name of the vendor",
            "type": "string"
          }
        },
        "required": [
          "action",
          "class",
          "id",
          "match_method",
          "vendor_id",
          "vendor_name"
        ]
      },
      "devicecontrolapi.RespUSBSettingsV2": {
        "properties": {
          "classes": {
            "description": "Array of USB classes",
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespUSBClassSettingsV2"
            },
            "type": "array"
          },
          "custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotifications"
          },
          "end_user_notification": {
            "description": "Indicates whether the end-user notification will appear (SILENT or NOTIFY_USER)",
            "type": "string"
          },
          "enforcement_mode": {
            "description": "Enforcement mode for the USB policy",
            "type": "string"
          },
          "enhanced_file_metadata": {
            "description": "Boolean value to enable file metadata",
            "type": "boolean"
          },
          "whitelist_mode": {
            "description": "Indicates whether the policy will include whitelist exceptions (ENABLE_ALWAYS, DISABLE_VIRTUAL)",
            "type": "string"
          }
        },
        "required": [
          "classes",
          "end_user_notification",
          "enforcement_mode",
          "enhanced_file_metadata"
        ]
      },
      "devicecontrolapi.RespUpdateDefaultSettingsV1": {
        "properties": {
          "bluetooth_custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.BluetoothCustomNotifications"
          },
          "cid": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "usb_custom_notifications": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotifications"
          },
          "usb_exceptions": {
            "items": {
              "$ref": "#/components/schemas/devicecontrolapi.RespDefaultUSBExceptions"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ]
      },
      "devicecontrolapi.USBCustomNotification": {
        "properties": {
          "custom_message": {
            "type": "string"
          },
          "use_custom": {
            "type": "boolean"
          }
        },
        "required": [
          "custom_message",
          "use_custom"
        ]
      },
      "devicecontrolapi.USBCustomNotifications": {
        "properties": {
          "blocked_notification": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotification"
          },
          "restricted_notification": {
            "$ref": "#/components/schemas/devicecontrolapi.USBCustomNotification"
          }
        }
      },
      "devicecontrolapi.USBExceptionBase": {
        "properties": {
          "action": {
            "description": "Action to be taken when the exception is matched",
            "enum": [
              "FULL_ACCESS",
              "BLOCK_EXECUTE",
              "BLOCK_WRITE_EXECUTE",
              "BLOCK_ALL",
              "WHITELIST"
            ],
            "type": "string"
          },
          "class": {
            "description": "USB Device class",
            "enum": [
              "ANY",
              "AUDIO_VIDEO",
              "IMAGING",
              "MASS_STORAGE",
              "MOBILE",
              "PRINTER",
              "WIRELESS"
            ],
            "type": "string"
          },
          "combined_id": {
            "description": "Composite ID of the vendor ID, product ID, and serial number. Format: \u003cvendor ID\u003e_\u003cproduct ID\u003e_\u003cserial number\u003e",
            "type": "string"
          },
          "description": {
            "description": "Description for the exception",
            "type": "string"
          },
          "expiration_time": {
            "description": "yyyy-mm-ddThh:mm:ssZ (UTC) format of the time to remove the exception if temporary. Only provide this value for temporary exceptions",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the exception. Leave empty to create a new exception",
            "type": "string"
          },
          "product_id": {
            "description": "Decimal value of the product ID. Required if a serial number is provided",
            "type": "string"
          },
          "product_name": {
            "description": "Device product name",
            "type": "string"
          },
          "serial_number": {
            "description": "Device serial number",
            "type": "string"
          },
          "use_wildcard": {
            "description": "Boolean value to indicate if wildcard matching should be used on the serial number",
            "type": "boolean"
          },
          "vendor_id": {
            "description": "Decimal value of the vendor ID",
            "type": "string"
          },
          "vendor_name": {
            "description": "Device vendor name",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.APICombinedFindingsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.APIQueryMetaV1"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIFindingFacetV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.APIComplianceControlV1": {
        "properties": {
          "control": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "control",
          "id"
        ]
      },
      "domain.APIComplianceMappingV1": {
        "properties": {
          "controls": {
            "items": {
              "$ref": "#/components/schemas/domain.APIComplianceControlV1"
            },
            "type": "array"
          },
          "framework": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "framework",
          "version"
        ]
      },
      "domain.APIDetectionDocument": {
        "properties": {
          "adversary_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "assigned_to_name": {
            "type": "string"
          },
          "assigned_to_uid": {
            "type": "string"
          },
          "behaviors": {
            "items": {
              "$ref": "#/components/schemas/detects.Behavior"
            },
            "type": "array"
          },
          "behaviors_processed": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "date_updated": {
            "type": "string"
          },
          "detection_id": {
            "type": "string"
          },
          "device": {
            "$ref": "#/components/schemas/detects.DeviceDetailIndexed"
          },
          "email_sent": {
            "type": "boolean"
          },
          "first_behavior": {
            "format": "date-time",
            "type": "string"
          },
          "hostinfo": {
            "$ref": "#/components/schemas/detects.HostInfo"
          },
          "last_behavior": {
            "format": "date-time",
            "type": "string"
          },
          "max_confidence": {
            "format": "int32",
            "type": "integer"
          },
          "max_severity": {
            "format": "int32",
            "type": "integer"
          },
          "max_severity_displayname": {
            "type": "string"
          },
          "overwatch_notes": {
            "type": "string"
          },
          "quarantined_files": {
            "items": {
              "$ref": "#/components/schemas/detects.QuarantinedFile"
            },
            "type": "array"
          },
          "seconds_to_resolved": {
            "format": "int64",
            "type": "integer"
          },
          "seconds_to_triaged": {
            "format": "int64",
            "type": "integer"
          },
          "show_in_ui": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "behaviors_processed",
          "cid",
          "created_timestamp",
          "detection_id",
          "device",
          "email_sent",
          "first_behavior",
          "hostinfo",
          "last_behavior",
          "max_confidence",
          "max_severity",
          "max_severity_displayname",
          "seconds_to_resolved",
          "seconds_to_triaged",
          "show_in_ui",
          "status"
        ]
      },
      "domain.APIEntityMatchedV1": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "data_provider": {
            "type": "string"
          },
          "provider_asset_id": {
            "type": "string"
          }
        }
      },
      "domain.APIError": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/domain.APIError.resources"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "domain.APIError.resources": {},
      "domain.APIEvaluationLogicComparisonsV1": {
        "properties": {
          "state_comparisons": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicStateComparisonV1"
            },
            "type": "array"
          },
          "state_operator": {
            "type": "string"
          }
        },
        "required": [
          "state_comparisons",
          "state_operator"
        ]
      },
      "domain.APIEvaluationLogicEntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.APIEvaluationLogicEntityComparisonV1": {
        "properties": {
          "actual_value_field": {
            "type": "string"
          },
          "expected_value": {
            "$ref": "#/components/schemas/domain.APIEvaluationLogicEntityComparisonV1.expected_value"
          },
          "operation": {
            "type": "string"
          },
          "value_datatype": {
            "type": "string"
          }
        },
        "required": [
          "actual_value_field",
          "expected_value",
          "operation",
          "value_datatype"
        ]
      },
      "domain.APIEvaluationLogicEntityComparisonV1.expected_value": {},
      "domain.APIEvaluationLogicHostInfoV1": {
        "properties": {
          "entities_matched": {
            "description": "Refers to all the entities that were matched together during entity resolution process",
            "items": {
              "$ref": "#/components/schemas/domain.APIEntityMatchedV1"
            },
            "type": "array"
          }
        },
        "required": [
          "entities_matched"
        ]
      },
      "domain.APIEvaluationLogicItemV1": {
        "properties": {
          "comparison_check": {
            "type": "string"
          },
          "comparisons": {
            "$ref": "#/components/schemas/domain.APIEvaluationLogicComparisonsV1"
          },
          "description": {
            "type": "string"
          },
          "determined_by_comparison": {
            "type": "boolean"
          },
          "existence_check": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicSystemCharacteristicV1"
            },
            "type": "array"
          },
          "negate": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "type"
        ]
      },
      "domain.APIEvaluationLogicStateComparisonV1": {
        "properties": {
          "entity_comparisons": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicEntityComparisonV1"
            },
            "type": "array"
          },
          "entity_operator": {
            "type": "string"
          }
        },
        "required": [
          "entity_comparisons",
          "entity_operator"
        ]
      },
      "domain.APIEvaluationLogicSystemCharacteristicV1": {
        "type": "object"
      },
      "domain.APIEvaluationLogicV1": {
        "properties": {
          "aid": {
            "description": "Refers to an asset identifier",
            "type": "string"
          },
          "cid": {
            "description": "Refers to a customer identifier",
            "type": "string"
          },
          "created_timestamp": {
            "description": "Refers to a point in time when evaluation logic data was created in the system",
            "type": "string"
          },
          "data_provider": {
            "description": "Refers to a label given to the entity that provided this data",
            "type": "string"
          },
          "host_info": {
            "$ref": "#/components/schemas/domain.APIEvaluationLogicHostInfoV1"
          },
          "id": {
            "description": "Contains a unique identifier for the evaluation logic",
            "type": "string"
          },
          "logic": {
            "description": "Refers to the actual evaluation logic data",
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicItemV1"
            },
            "type": "array"
          },
          "scanner_id": {
            "description": "Refers to the identifier of the scanner that generated the evaluation logic",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "Refers to a point in time when evaluation logic data was updated in the system",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.APIFindingFacetV1": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "finding": {
            "$ref": "#/components/schemas/domain.APIFindingWithRuleV1"
          },
          "host": {
            "$ref": "#/components/schemas/domain.APIHostInfoFacetV1"
          },
          "id": {
            "type": "string"
          },
          "logic": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicItemV1"
            },
            "type": "array"
          },
          "updated_timestamp": {
            "type": "string"
          }
        },
        "required": [
          "aid",
          "cid",
          "created_timestamp",
          "finding",
          "id",
          "updated_timestamp"
        ]
      },
      "domain.APIFindingRuleV1": {
        "properties": {
          "authority": {
            "type": "string"
          },
          "benchmark_type": {
            "type": "string"
          },
          "cce": {
            "type": "string"
          },
          "compliance_mappings": {
            "items": {
              "$ref": "#/components/schemas/domain.APIComplianceMappingV1"
            },
            "type": "array"
          },
          "edited": {
            "type": "boolean"
          },
          "group_id": {
            "type": "string"
          },
          "group_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_edited_timestamp": {
            "type": "string"
          },
          "mitre_attack_tactics": {
            "items": {
              "$ref": "#/components/schemas/domain.APIMitreAttackTacticV1"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "policy_name": {
            "type": "string"
          },
          "recommendation_id": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "edited",
          "id"
        ]
      },
      "domain.APIFindingWithRuleV1": {
        "properties": {
          "evaluation_logic_type": {
            "description": "Example values: NOT_AVAILABLE, AVAILABLE, DISABLE_RULE, UNSUPPORTED_RULE, OVERRIDE_STATUS",
            "type": "string"
          },
          "evaluation_reason": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "policy_host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rule": {
            "$ref": "#/components/schemas/domain.APIFindingRuleV1"
          },
          "status": {
            "type": "string"
          },
          "status_since_timestamp": {
            "type": "string"
          }
        }
      },
      "domain.APIHostGroup": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "domain.APIHostInfoFacetV1": {
        "properties": {
          "agent_version": {
            "type": "string"
          },
          "asset_criticality": {
            "$ref": "#/components/schemas/domain.AssetCriticalityInfoV1"
          },
          "build_number": {
            "type": "string"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/domain.APIHostGroup"
            },
            "type": "array"
          },
          "host_hidden_status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_seen_timestamp": {
            "type": "string"
          },
          "local_ip": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "machine_domain": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "ou": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "product_type_desc": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "site_name": {
            "type": "string"
          },
          "system_manufacturer": {
            "type": "string"
          },
          "system_product_name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "groups",
          "name"
        ]
      },
      "domain.APIMitreAttackTacticV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "techniques": {
            "items": {
              "$ref": "#/components/schemas/domain.APIMitreTechniqueV1"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.APIMitreMitigationV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.APIMitreTechniqueV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "mitigations": {
            "items": {
              "$ref": "#/components/schemas/domain.APIMitreMitigationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.APIQueryMetaV1": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domain.APIQueryPagingV1"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "domain.APIQueryPagingV1": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "after",
          "limit",
          "total"
        ]
      },
      "domain.APIRemediationIDs": {
        "properties": {
          "ids": {
            "description": "Refers to a remediation unique identifier that points to remediation details addressing this vulnerability",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.APIRemediationInfo": {
        "properties": {
          "minimum_id": {
            "description": "Contains the ID of the minimum remediation",
            "type": "string"
          },
          "patch_publication_date": {
            "description": "Contains the timestamp when earliest remediation was published",
            "type": "string"
          },
          "recommended_id": {
            "description": "Contains the ID of the recommended remediation",
            "type": "string"
          }
        }
      },
      "domain.APIRemediationV2": {
        "properties": {
          "action": {
            "description": "Expanded description of the remediation",
            "type": "string"
          },
          "id": {
            "description": "Refers to an unique identifier for a given remediation",
            "type": "string"
          },
          "link": {
            "description": "Link to the remediation page for the vendor",
            "type": "string"
          },
          "patch_publication_date": {
            "description": "The timestamp that this remediation was published",
            "type": "string"
          },
          "recommendation_type": {
            "description": "The type of recommendation for this remediation, usually either 'recommended' or 'minimum'",
            "type": "string"
          },
          "reference": {
            "description": "Relevant reference for the remediation that can be used to get additional details for the remediation. For example, a KB number that needs to be installed for a KB_SECURITY_UPDATE",
            "type": "string"
          },
          "title": {
            "description": "Short description of the remediation",
            "type": "string"
          },
          "vendor_url": {
            "description": "Link to the vendor advisory - Note: This field is populated if there are extra steps that are required to complete the remediation",
            "type": "string"
          }
        },
        "required": [
          "action",
          "id",
          "link",
          "reference",
          "title",
          "vendor_url"
        ]
      },
      "domain.APIRuleDetailsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIRuleDetailsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.APIRuleDetailsV1": {
        "properties": {
          "additional_information": {
            "type": "string"
          },
          "applicable_profiles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assessment_status": {
            "type": "string"
          },
          "audit_procedure": {
            "type": "string"
          },
          "authority": {
            "type": "string"
          },
          "benchmark_title": {
            "type": "string"
          },
          "compliance_mappings": {
            "items": {
              "$ref": "#/components/schemas/domain.APIComplianceMappingV1"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "impact_statement": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "rationale_statement": {
            "type": "string"
          },
          "recommendation_id": {
            "type": "string"
          },
          "references": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remediation_procedure": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "additional_information",
          "applicable_profiles",
          "assessment_status",
          "audit_procedure",
          "authority",
          "benchmark_title",
          "description",
          "id",
          "impact_statement",
          "platform",
          "rationale_statement",
          "recommendation_id",
          "remediation_procedure",
          "title"
        ]
      },
      "domain.APIVulnerabilityAppV2": {
        "properties": {
          "product_name_normalized": {
            "description": "Refers to the normalized product name of the product for which the vulnerability has been detected",
            "type": "string"
          },
          "product_name_version": {
            "description": "Refers to the un-normalized combination of product name and version of the product for which the vulnerability has been detected",
            "type": "string"
          },
          "vendor_normalized": {
            "description": "Refers to the normalized vendor name of the product for which the vulnerability has been detected",
            "type": "string"
          }
        },
        "required": [
          "product_name_normalized",
          "product_name_version",
          "vendor_normalized"
        ]
      },
      "domain.APIVulnerabilityCVECISAInfo": {
        "properties": {
          "due_date": {
            "description": "Refers to the deadline or target date set by the Cybersecurity and Infrastructure Security Agency (CISA) for addressing or mitigating a Critical Infrastructure Security Advisory Key (CISAK) vulnerability",
            "type": "string"
          },
          "is_cisa_kev": {
            "description": "Refers to the designation of a vulnerability as a Critical Infrastructure Security Advisory Key (CISAK) by the Cybersecurity and Infrastructure Security Agency (CISA), indicating its significance and potential impact on critical infrastructure systems and operations",
            "type": "boolean"
          }
        },
        "required": [
          "is_cisa_kev"
        ]
      },
      "domain.APIVulnerabilityCVEDetailsFacetV2": {
        "properties": {
          "actors": {
            "description": "Contains a list of actors that are known for exploiting this vulnerability ot in the wild",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "base_score": {
            "description": "The base score for a Common Vulnerability Enumeration (CVE) is a numerical value that represents the intrinsic severity and impact of a security vulnerability.",
            "format": "double",
            "type": "number"
          },
          "cisa_info": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityCVECISAInfo"
          },
          "cwes": {
            "description": "The CWE ids corresponding to this vulnerability instance",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "Refers to description of the vulnerability",
            "type": "string"
          },
          "exploit_status": {
            "description": "Exploit status refers to the current state or availability of known exploits for a specific vulnerability, indicating whether there are known techniques or tools to leverage the vulnerability in an attack.",
            "format": "byte",
            "type": "integer"
          },
          "exploitability_score": {
            "description": "Represents a numerical value that indicates the relative ease or difficulty for an attacker to exploit a vulnerability",
            "format": "double",
            "type": "number"
          },
          "exprt_rating": {
            "description": "Expert.AI score on the vulnerability",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "impact_score": {
            "description": "Refers to a numerical value that represents the potential impact or severity of a vulnerability when it is successfully exploited",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "Vulnerability name",
            "type": "string"
          },
          "published_date": {
            "description": "Refers to a point in time when the vulnerability has been disclosed",
            "type": "string"
          },
          "references": {
            "description": "Refers to one or more references with more details about the vulnerability",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remediation_level": {
            "description": "Remediation level indicates the required effort to mitigate a security vulnerability, ranging from official fixes to unavailable remedies",
            "type": "string"
          },
          "severity": {
            "description": "Severity refers to the level of impact or potential harm caused by a security vulnerability. It is often assessed using metrics such as the CVSS base score, which takes into account factors such as exploitability, impact on confidentiality, integrity, and availability, and other relevant parameters to determine the severity level of a vulnerability.",
            "type": "string"
          },
          "spotlight_published_date": {
            "description": "Corresponds to a point in time when Spotlight offered support for detecting a specific vulnerability",
            "type": "string"
          },
          "types": {
            "description": "The types of vulnerability. Can be of: Vulnerability, Misconfiguration, and Unsupported software",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vector": {
            "description": "Refers to the vector of attack or the specific method or path through which an attacker can exploit a vulnerability",
            "type": "string"
          },
          "vendor_advisory": {
            "description": "Refers to one or more URLs that points to vendor advisories",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.APIVulnerabilityDataProviderV1": {
        "properties": {
          "ports": {
            "description": "Ports that the vulnerability affects",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "provider": {
            "description": "Label for the provider",
            "type": "string"
          },
          "rating": {
            "description": "Rating provided by the vulnerability provider",
            "type": "string"
          },
          "scan_id": {
            "description": "Provider Scan ID that identified the detection",
            "type": "string"
          },
          "scan_time": {
            "description": "Time when the detection occurred",
            "type": "string"
          },
          "scanner_id": {
            "description": "Scanner ID of the vulnerability provider",
            "type": "string"
          }
        }
      },
      "domain.APIVulnerabilityExtendedAppV2": {
        "properties": {
          "evaluation_logic": {
            "$ref": "#/components/schemas/domain.APIEvaluationLogicV1"
          },
          "patch_publication_date": {
            "description": "Contains the timestamp when earliest remediation was published",
            "type": "string"
          },
          "product_name_normalized": {
            "description": "Refers to the normalized product name of the product for which the vulnerability has been detected",
            "type": "string"
          },
          "product_name_version": {
            "description": "Refers to the un-normalized combination of product name and version of the product for which the vulnerability has been detected",
            "type": "string"
          },
          "remediation": {
            "$ref": "#/components/schemas/domain.APIRemediationIDs"
          },
          "remediation_info": {
            "$ref": "#/components/schemas/domain.APIRemediationInfo"
          },
          "sub_status": {
            "description": "Contains vulnerability status for a particular product - can differentiate in cases where a vulnerability is detected for multiple products",
            "type": "string"
          },
          "vendor_normalized": {
            "description": "Refers to the normalized vendor name of the product for which the vulnerability has been detected",
            "type": "string"
          }
        },
        "required": [
          "product_name_normalized",
          "product_name_version",
          "vendor_normalized"
        ]
      },
      "domain.APIVulnerabilityHostFacetV2": {
        "properties": {
          "asset_criticality": {
            "description": "Refers to how critical an asset has been evaluated to be",
            "type": "string"
          },
          "asset_roles": {
            "description": "Refers to one or more roles that have been assigned to the assets",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "confidence_label": {
            "description": "Confidence level of the asset association to the CID",
            "type": "string"
          },
          "groups": {
            "description": "Refers to a logic grouping of assets",
            "items": {
              "$ref": "#/components/schemas/domain.APIHostGroup"
            },
            "type": "array"
          },
          "has_run_container": {
            "description": "Indicates whether the asset has run containers",
            "type": "boolean"
          },
          "host_last_seen_timestamp": {
            "description": "A timestamp corresponding to the last day when we detected activity coming from an asset",
            "type": "string"
          },
          "hostname": {
            "description": "Refers to the hostname used by the asset on which the vulnerability was detected",
            "type": "string"
          },
          "instance_id": {
            "description": "Refers to a unique identifier assigned to an asset",
            "type": "string"
          },
          "internet_exposure": {
            "description": "Refers to the level of exposure an asset has to the internet",
            "type": "string"
          },
          "local_ip": {
            "description": "Refers to the local IP used by the asset on which the vulnerability was detected",
            "type": "string"
          },
          "machine_domain": {
            "description": "The machine domain of an asset is the network identity within a network infrastructure",
            "type": "string"
          },
          "managed_by": {
            "description": "Name of the entity that is managing the asset",
            "type": "string"
          },
          "os_build": {
            "description": "Refers to the specific build or version number of an operating system, indicating a particular release or revision of the operating system ",
            "type": "string"
          },
          "os_version": {
            "description": "Refers to the operating system version used by the asset on which the vulnerability was detected",
            "type": "string"
          },
          "ou": {
            "description": "Refers to the specific organizational grouping or container within an Active Directory (AD) or directory service where the host is located or categorized.",
            "type": "string"
          },
          "platform": {
            "description": "Refers to the name or designation of the specific software platform or operating system on which the asset is running",
            "type": "string"
          },
          "product_type_desc": {
            "description": "Refers to the descriptive label or category that identifies the type or edition of the operating system product installed on the asset",
            "type": "string"
          },
          "service_provider": {
            "description": "Refers to a company, organization, or entity that offers or provided this specific asset",
            "type": "string"
          },
          "service_provider_account_id": {
            "description": "Refers to the unique identifier associated with a service provider account, typically used in cloud computing or managed service environments",
            "type": "string"
          },
          "site_name": {
            "description": "Refers to the name or label assigned to the physical or logical location within a network infrastructure where the host is situated",
            "type": "string"
          },
          "subsidiaries": {
            "description": "The list of subsidiaries associated with the asset",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "system_manufacturer": {
            "description": "Refers to the company or organization that designed and produced the hardware system or device",
            "type": "string"
          },
          "tags": {
            "description": "Refers to a logical grouping of assets via tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "third_party_asset_ids": {
            "description": "zero or more unique identifiers assigned by third party entities which provided data for the asset",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "hostname",
          "local_ip",
          "machine_domain",
          "os_version",
          "ou",
          "site_name",
          "system_manufacturer"
        ]
      },
      "domain.APIVulnerabilityNetworkScan": {
        "properties": {
          "scan_id": {
            "description": "Network Vulnerability Scan ID",
            "type": "string"
          },
          "scan_time": {
            "description": "Time when the detection occurred",
            "type": "string"
          }
        }
      },
      "domain.APIVulnerabilityNetworkScanFacetV2": {
        "properties": {
          "network_scan_info": {
            "description": "Contains network scan related information for which the vulnerability has been detected",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityNetworkScan"
            },
            "type": "array"
          }
        }
      },
      "domain.APIVulnerabilityRemediationFacetV2": {
        "properties": {
          "entities": {
            "description": "Contains the actual remediation data",
            "items": {
              "$ref": "#/components/schemas/domain.APIRemediationV2"
            },
            "type": "array"
          },
          "ids": {
            "description": "Refers to a remediation unique identifier that points to remediation details addressing this vulnerability",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.APIVulnerabilityServiceV2": {
        "properties": {
          "port": {
            "description": "Represents the service's exposed port",
            "format": "int32",
            "type": "integer"
          },
          "protocol": {
            "description": "Represents the service's protocol",
            "type": "string"
          },
          "transport": {
            "description": "Represents the service's transport",
            "type": "string"
          }
        }
      },
      "domain.APIVulnerabilitySuppressionInfoV2": {
        "properties": {
          "is_suppressed": {
            "description": "Indicates if a vulnerability has been suppressed or not",
            "type": "boolean"
          },
          "reason": {
            "description": "Indicates what is the rule ID for which a vulnerability has been suppressed",
            "type": "string"
          }
        },
        "required": [
          "is_suppressed"
        ]
      },
      "domain.APIVulnerabilityV2": {
        "properties": {
          "aid": {
            "description": "Asset ID for which the vulnerability has been detected. For managed assets it can correspond to the sensor ID, for unmanaged assets can be a stand alone ID",
            "type": "string"
          },
          "app": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityAppV2"
          },
          "apps": {
            "description": "Provide details related to the products for which a the vulnerability has been detected",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityExtendedAppV2"
            },
            "type": "array"
          },
          "cid": {
            "description": "Contains the customer identifier associated with the asset for which the vulnerability has been detected",
            "type": "string"
          },
          "closed_timestamp": {
            "description": "A timestamp corresponding to the point in time when the vulnerability has no longer been detected (eg: it got fixed)",
            "type": "string"
          },
          "confidence": {
            "description": "Represents the confidence level of a vulnerability",
            "type": "string"
          },
          "created_timestamp": {
            "description": "A timestamp corresponding to the point in time when the vulnerability has been created (detected) in our system",
            "type": "string"
          },
          "cve": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityCVEDetailsFacetV2"
          },
          "data_providers": {
            "description": "Contains information about the vulnerability data providers of this entity",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityDataProviderV1"
            },
            "type": "array"
          },
          "host_info": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityHostFacetV2"
          },
          "id": {
            "description": "Vulnerability unique ID",
            "type": "string"
          },
          "network_scan": {
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityNetworkScanFacetV2"
            },
            "type": "array"
          },
          "remediation": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityRemediationFacetV2"
          },
          "services": {
            "description": "Contains details about the vulnerable services",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityServiceV2"
            },
            "type": "array"
          },
          "status": {
            "description": "Current status of a vulnerability (open, closed, reopen)",
            "type": "string"
          },
          "suppression_info": {
            "$ref": "#/components/schemas/domain.APIVulnerabilitySuppressionInfoV2"
          },
          "updated_timestamp": {
            "description": "A timestamp corresponding to the point in time when a vulnerability's information or status have been updated",
            "type": "string"
          },
          "vulnerability_id": {
            "description": "Dynamic label that contains the CVE ID if applicable, otherwise the vulnerability metadata ID or label from the provider",
            "type": "string"
          }
        },
        "required": [
          "aid",
          "cid",
          "created_timestamp",
          "id",
          "status",
          "updated_timestamp"
        ]
      },
      "domain.AWSAccountInput": {
        "properties": {
          "account_number": {
            "type": "string"
          },
          "batch_regions": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSBatchClusterRegion"
            },
            "type": "array"
          },
          "iam_external_id": {
            "type": "string"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "kms_alias": {
            "type": "string"
          },
          "processing_account": {
            "type": "string"
          }
        },
        "required": [
          "account_number",
          "batch_regions",
          "iam_external_id",
          "iam_role_arn",
          "kms_alias",
          "processing_account"
        ]
      },
      "domain.AWSAccountResourceMetadata": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "aws_cloudtrail_bucket_name": {
            "description": "AWS CloudTrail bucket name to store logs.",
            "type": "string"
          },
          "aws_cloudtrail_region": {
            "description": "AWS CloudTrail region.",
            "type": "string"
          },
          "aws_eventbus_arn": {
            "description": "AWS Eventbus ARN.",
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "eventbus_name": {
            "type": "string"
          },
          "external_id": {
            "description": "ID assigned for use with cross account IAM role access.",
            "type": "string"
          },
          "iam_role_arn": {
            "description": "The full arn of the IAM role created in this account to control access.",
            "type": "string"
          },
          "intermediate_role_arn": {
            "type": "string"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt"
        ]
      },
      "domain.AWSAccountV2": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "account_id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          },
          "account_name": {
            "description": "AWS account name",
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "active_regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aws_cloudtrail_bucket_name": {
            "description": "AWS CloudTrail bucket name to store logs.",
            "type": "string"
          },
          "aws_cloudtrail_region": {
            "description": "AWS CloudTrail region.",
            "type": "string"
          },
          "aws_eventbus_arn": {
            "description": "AWS Eventbus ARN.",
            "type": "string"
          },
          "aws_permissions_status": {
            "description": "Permissions status returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.Permission"
            },
            "type": "array"
          },
          "behavior_assessment_enabled": {
            "type": "boolean"
          },
          "cid": {
            "type": "string"
          },
          "cloud_scopes": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudScope"
            },
            "type": "array"
          },
          "cloudformation_update_url": {
            "type": "string"
          },
          "cloudformation_url": {
            "type": "string"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "cspm_enabled": {
            "type": "boolean"
          },
          "d4c": {
            "$ref": "#/components/schemas/domain.AWSD4CAccountV1"
          },
          "d4c_migrated": {
            "type": "boolean"
          },
          "dspm_enabled": {
            "type": "boolean"
          },
          "dspm_role_arn": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "eventbus_name": {
            "type": "string"
          },
          "external_id": {
            "description": "ID assigned for use with cross account IAM role access.",
            "type": "string"
          },
          "falcon_client_id": {
            "type": "string"
          },
          "iam_role_arn": {
            "description": "The full arn of the IAM role created in this account to control access.",
            "type": "string"
          },
          "intermediate_role_arn": {
            "type": "string"
          },
          "inventory_filter": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSInventoryFilterSetting"
            },
            "type": "array"
          },
          "is_cspm_lite": {
            "description": "Is CSPM Lite enabled.",
            "type": "boolean"
          },
          "is_custom_rolename": {
            "type": "boolean"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "description": "Up to 34 character AWS provided unique identifier for the organization.",
            "type": "string"
          },
          "products": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remediation_cloudformation_url": {
            "type": "string"
          },
          "remediation_region": {
            "type": "string"
          },
          "remediation_tou_accepted": {
            "format": "date-time",
            "type": "string"
          },
          "root_account_id": {
            "description": "12 digit AWS provided unique identifier for the root account (of the organization this account belongs to).",
            "type": "string"
          },
          "root_iam_role": {
            "type": "boolean"
          },
          "s3_url": {
            "type": "string"
          },
          "secondary_role_arn": {
            "type": "string"
          },
          "sensor_management_enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object"
          },
          "status": {
            "description": "Account registration status.",
            "type": "string"
          },
          "target_ous": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "use_existing_cloudtrail": {
            "type": "boolean"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt",
          "aws_permissions_status",
          "inventory_filter",
          "is_custom_rolename",
          "sensor_management_enabled"
        ]
      },
      "domain.AWSBatchClusterRegion": {
        "properties": {
          "job_definition_name": {
            "type": "string"
          },
          "job_queue": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "job_definition_name",
          "job_queue",
          "region"
        ]
      },
      "domain.AWSConfiguration": {
        "properties": {
          "cloudtrail_bucket_owner_id": {
            "description": "The 12 digit AWS account which is hosting the centralized S3 bucket containing cloudtrail logs for all accounts.",
            "type": "string"
          },
          "created_timestamp": {
            "description": "Timestamp of when the settings were first provisioned within CrowdStrike's system.'",
            "type": "string"
          },
          "last_modified_timestamp": {
            "description": "Timestamp of when the settings were last modified.",
            "type": "string"
          },
          "static_external_id": {
            "description": "By setting this value, all subsequent accounts that are provisioned will default to using this value as the external ID.",
            "type": "string"
          }
        }
      },
      "domain.AWSD4CAccountV1": {
        "properties": {
          "account_id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "intermediate_role_arn": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/domain.AWSD4COrganizationAccountV1"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "domain.AWSD4COrganizationAccountV1": {
        "properties": {
          "account_id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "organization_id": {
            "description": "Up to 34 character AWS provided unique identifier for the organization.",
            "type": "string"
          },
          "root_account_id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          }
        }
      },
      "domain.AWSInventoryFilterSetting": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "service": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "regions",
          "service"
        ]
      },
      "domain.AccessTokenResponseV1": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "format": "integer",
            "type": "integer"
          },
          "id_token": {
            "type": "string"
          },
          "issued_token_type": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          }
        }
      },
      "domain.AccountAccessResult": {
        "properties": {
          "id": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "successful": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "successful"
        ]
      },
      "domain.ActionEntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ActionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ActionParameter": {
        "description": "Action to be performed.",
        "properties": {
          "name": {
            "description": "Action name.",
            "enum": [
              "add_tag",
              "delete_tag",
              "update_name",
              "update_description",
              "update_assigned_to",
              "update_assigned_to_name",
              "unassign",
              "update_status",
              "add_comment",
              "close_with_descriptor"
            ],
            "type": "string"
          },
          "value": {
            "description": "Value for action specified.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "domain.ActionUserRolesRequest": {
        "properties": {
          "action": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "role_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "domain.ActionV1": {
        "properties": {
          "cid": {
            "description": "The ID of the customer who created the action",
            "type": "string"
          },
          "content_format": {
            "description": "The level of detail in which the content will be delivered. It can be either 'standard' or 'enhanced'",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The date when the action was created",
            "format": "date-time",
            "type": "string"
          },
          "frequency": {
            "description": "The time interval between the action's triggers. It can be one of the values: 'asap', 'daily' or 'weekly'",
            "type": "string"
          },
          "id": {
            "description": "The ID of the action",
            "type": "string"
          },
          "recipients": {
            "description": "The address list who will be notified by this action.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rule_id": {
            "description": "The ID of the rule on which this action is attached",
            "type": "string"
          },
          "status": {
            "description": "The action status. It can be either 'enabled' or 'muted'.",
            "type": "string"
          },
          "trigger_matchless": {
            "description": "Whether to periodically trigger the action based on the frequency, even when there are no new matches for the associated monitoring rule",
            "type": "boolean"
          },
          "type": {
            "description": "The action type. The only type currently supported is 'email'",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "The date when the action was updated",
            "format": "date-time",
            "type": "string"
          },
          "user_uuid": {
            "description": "The UUID of the user who created the action",
            "type": "string"
          }
        },
        "required": [
          "cid",
          "content_format",
          "created_timestamp",
          "frequency",
          "id",
          "recipients",
          "rule_id",
          "status",
          "trigger_matchless",
          "type",
          "updated_timestamp",
          "user_uuid"
        ]
      },
      "domain.ActivityCreationRequest": {
        "properties": {
          "body": {
            "type": "string"
          },
          "case_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "case_id",
          "type",
          "user_uuid"
        ]
      },
      "domain.ActorDocument": {
        "description": "JSON definition of an Actor, also known as Adversary",
        "properties": {
          "active": {
            "description": "Boolean field marking if actor is active",
            "type": "boolean"
          },
          "actor_type": {
            "description": "Actor type, one of: targeted, ecrime",
            "type": "string"
          },
          "capabilities": {
            "description": "actor's capabilities, some examples: RAT,Ransomware,Spearphishing,Downloader,Backdoor,InformationStealer,exploit,CredentialHarvesting,dropper,DenialOfService,Loader,Phishing",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "capability": {
            "$ref": "#/components/schemas/domain.Entity"
          },
          "created_date": {
            "description": "Actor's document creation date when it was added to the Falcon portal in unix timestamp format",
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "description": "Actor's text description, partially containing structured data from other fields",
            "type": "string"
          },
          "description_length": {
            "format": "int64",
            "type": "integer"
          },
          "develops_threats": {
            "items": {
              "$ref": "#/components/schemas/domain.ThreatEntity"
            },
            "type": "array"
          },
          "develops_threats_count": {
            "format": "int64",
            "type": "integer"
          },
          "ecrime_kill_chain": {
            "$ref": "#/components/schemas/domain.ECrimeKillChain"
          },
          "entitlements": {
            "description": "Field used to filter user's access to actor documents",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "first_activity_date": {
            "description": "Actor's first activity observed date in unix timestamp format",
            "format": "int64",
            "type": "integer"
          },
          "group": {
            "$ref": "#/components/schemas/domain.Entity"
          },
          "has_subgroup": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorEntity"
            },
            "type": "array"
          },
          "has_subgroup_actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "has_successor": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorEntity"
            },
            "type": "array"
          },
          "has_successor_actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Numerical ID for the Actor",
            "format": "int64",
            "type": "integer"
          },
          "image": {
            "$ref": "#/components/schemas/domain.Image"
          },
          "in_reports": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorNewsDocument"
            },
            "type": "array"
          },
          "in_reports_count": {
            "format": "int64",
            "type": "integer"
          },
          "is_subgroup_of": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorEntity"
            },
            "type": "array"
          },
          "is_subgroup_of_actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "is_successor_of": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorEntity"
            },
            "type": "array"
          },
          "is_successor_of_actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "is_supported_by": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorEntity"
            },
            "type": "array"
          },
          "is_supported_by_actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "kill_chain": {
            "$ref": "#/components/schemas/domain.KillChain"
          },
          "known_as": {
            "description": "Alternative names and community identifiers of an actor",
            "type": "string"
          },
          "last_activity_date": {
            "description": "Actor's last (most recent) activity observed date in unix timestamp format",
            "format": "int64",
            "type": "integer"
          },
          "last_modified_date": {
            "description": "Actor's document last modified date in unix timestamp format",
            "format": "int64",
            "type": "integer"
          },
          "motivations": {
            "description": "Actor's activity motivation, one of: State-Sponsored, Criminal, Hacktivism",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "name": {
            "description": "Actor's name, composed of 2 words",
            "type": "string"
          },
          "notify_users": {
            "description": "internal field",
            "type": "boolean"
          },
          "objectives": {
            "description": "Actor's activity objectives, one of: IntelligenceGathering, FinancialGain, IntellectualPropertyTheft, defacement, Destruction, DenialOfService",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "origins": {
            "description": "represents origin of actor's activity and/or members, some examples: China,Russian Federation,Eastern Europe,Iran,East Asia, South Asia",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "recent_alerting": {
            "description": "Recent CrowdStrike's finished intelligence alerting date in unix timestamp format",
            "format": "int64",
            "type": "integer"
          },
          "region": {
            "$ref": "#/components/schemas/domain.Entity"
          },
          "rich_text_description": {
            "description": "Rich text version of the description field",
            "type": "string"
          },
          "sells_threats": {
            "items": {
              "$ref": "#/components/schemas/domain.ThreatEntity"
            },
            "type": "array"
          },
          "sells_threats_count": {
            "format": "int64",
            "type": "integer"
          },
          "short_description": {
            "description": "Short version of the description field",
            "type": "string"
          },
          "slug": {
            "description": "Name in url friendly format, lowercased and spaces replaced with dash",
            "type": "string"
          },
          "status": {
            "description": "Status of an actor, one of: Active, Inactive, Retired",
            "type": "string"
          },
          "supports": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorEntity"
            },
            "type": "array"
          },
          "supports_actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "target_countries": {
            "description": "Target countries of actor's activity and attacks, slug value is a 2 characters code for the country value, some examples: United States,United Kingdom,Germany,India,Japan,France,Australia,Canada,China",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "target_industries": {
            "description": "Target economical industries of actor's activity and attacks. List of available values: Government, Financial Services, Technology, Telecommunications, Healthcare, Energy, Academic, Media, Aerospace, NGO, Manufacturing, Industrials and Engineering, Retail, Hospitality, Consulting and Professional Services, Opportunistic, Aviation, Defense, Transportation, Oil and Gas, Legal, Pharmaceutical, Logistics, Military, Automotive, Food and Beverage, Consumer Goods, Real Estate, Insurance, Agriculture, Chemicals, Utilities, Maritime, Extractive, Travel, Dissident, Cryptocurrency, Entertainment, National Government, Law Enforcement, Think Tanks, Local Government, Sports Organizations, Computer Gaming, Biomedical, Nonprofit, Financial Management \u0026 Hedge Funds, Political Parties, Architectural and Engineering, Emergency Services, Social Media, International Government, Nuclear, Research Entities, Vocational and Higher-Level Education, eCommerce",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "target_regions": {
            "description": "Target geographic regions of actor's activity and attacks. List of available values: North America, Western Europe, Southeast Asia, Middle East, Eastern Europe, South Asia, South America, Oceania, East Asia, Central Africa, Northern Europe, Southern Europe, North Africa, Southern Africa, Central America, Central Asia, East Africa, West Africa, Caribbean",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/domain.Image"
          },
          "url": {
            "description": "URL at which actor profile can be accessed",
            "type": "string"
          },
          "uses_indicators_count": {
            "format": "int64",
            "type": "integer"
          },
          "uses_mitre_attacks_count": {
            "format": "int64",
            "type": "integer"
          },
          "uses_mitre_tactics_count": {
            "format": "int64",
            "type": "integer"
          },
          "uses_mitre_techniques_count": {
            "format": "int64",
            "type": "integer"
          },
          "uses_threats": {
            "items": {
              "$ref": "#/components/schemas/domain.ThreatEntity"
            },
            "type": "array"
          },
          "uses_threats_count": {
            "format": "int64",
            "type": "integer"
          },
          "uses_vulnerabilities": {
            "description": "Comma separated values of vulnerabilities by CVE codes that are exploited by actor",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vulnerabilities_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "active",
          "capabilities",
          "created_date",
          "first_activity_date",
          "id",
          "known_as",
          "last_activity_date",
          "last_modified_date",
          "motivations",
          "notify_users",
          "objectives",
          "origins",
          "short_description",
          "status",
          "target_countries",
          "target_industries",
          "target_regions"
        ]
      },
      "domain.ActorEntity": {
        "properties": {
          "id": {
            "description": "id of the actor",
            "type": "string"
          },
          "name": {
            "description": "name of the actor",
            "type": "string"
          },
          "publish_flags": {
            "description": "set of publish flags",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.ActorNewsDocument": {
        "properties": {
          "created_date": {
            "description": "Date of the news document creation, unix timestamp",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Integer ID of the News document",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "News title",
            "type": "string"
          },
          "slug": {
            "description": "News title in a url friendly way, which is title in lowercase and special characters including space replaced with dash",
            "type": "string"
          }
        },
        "required": [
          "created_date",
          "id",
          "name",
          "slug"
        ]
      },
      "domain.ActorsResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ActorDocument"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.AggregateClusterAssessmentsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ComplianceExportGroupedByClustersReport"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateFailedAssetCountBySeverityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.NonCompliantAssetsBySeverity"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateFailedAssetsByRulesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.RulesWithNonCompliantAssets"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateFailedRulesByClustersResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ClusterWithFailedRules"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateFailedRulesByImagesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ImagesWithRulesFailed"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateFailedRulesCountBySeverityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.RulesFailedBySeverity"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateImageAssessmentsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/domain.ComplianceFindingsGroupedByImagesWithScroll"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateRulesAssessmentsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ComplianceExportGroupedByRulesReport"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregateRulesByStatusResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ComplianceByRules"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.AggregatesResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Array of aggregation results, 1 per AggregateQueryRequest",
            "items": {
              "$ref": "#/components/schemas/domain.AggregationResult"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.AggregationResult": {
        "properties": {
          "buckets": {
            "description": "Aggregation buckets containing aggregated information",
            "items": {
              "$ref": "#/components/schemas/domain.AggregationResultItem"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the aggregation, equal to the name of it from the AggregateQueryRequest name",
            "type": "string"
          },
          "sum_other_doc_count": {
            "description": "sum count of the documents not included in the buckets",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "domain.AggregationResultItem": {
        "properties": {
          "count": {
            "description": "count of the documents in the bucket",
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "description": "numerical value of the date or number start of the range",
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "description": "string value of the key, usually not populated",
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/domain.AggregationResultItem.label"
          },
          "string_from": {
            "description": "string value of the from property, usually representing a date or number",
            "type": "string"
          },
          "string_to": {
            "description": "string value of the to property, usually representing a date or number",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "sub-aggregations of the bucket",
            "items": {
              "$ref": "#/components/schemas/domain.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "description": "numerical value of the date or number end of the range",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "numerical value of the bucket",
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "description": "value as a string, usually not populated",
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "domain.AggregationResultItem.label": {},
      "domain.Assessment": {
        "properties": {
          "os": {
            "format": "int32",
            "type": "integer"
          },
          "overall": {
            "format": "int32",
            "type": "integer"
          },
          "sensor_config": {
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "os",
          "overall",
          "sensor_config",
          "version"
        ]
      },
      "domain.AssessmentItems": {
        "properties": {
          "os_signals": {
            "items": {
              "$ref": "#/components/schemas/domain.SignalProperty"
            },
            "type": "array"
          },
          "sensor_signals": {
            "items": {
              "$ref": "#/components/schemas/domain.SignalProperty"
            },
            "type": "array"
          }
        },
        "required": [
          "os_signals",
          "sensor_signals"
        ]
      },
      "domain.AssessmentsByScoreResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.SearchAfterMeta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ZeroTrustSimpleAssessment"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.AssessmentsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.SignalProperties"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.AssetCriticalityInfoV1": {
        "properties": {
          "criticality": {
            "type": "string"
          },
          "internet_exposure": {
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.Attachment": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "source_url": {
            "type": "string"
          }
        },
        "required": [
          "link",
          "mime_type"
        ]
      },
      "domain.AuditResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/common.CIDAuditResult"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.AzureClientServicePrincipalV1": {
        "properties": {
          "account_type": {
            "type": "string"
          },
          "behavior_assessment_override": {
            "type": "boolean"
          },
          "cid": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "cspm_enabled": {
            "description": "If the account has CSPM enabled.",
            "type": "boolean"
          },
          "default_subscription_id": {
            "type": "string"
          },
          "encrypted_private_key": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "public_certificate": {
            "type": "string"
          },
          "resource_permissions": {
            "items": {
              "$ref": "#/components/schemas/domain.AzureResourcePermission"
            },
            "type": "array"
          },
          "tenant_id": {
            "type": "string"
          },
          "x5t": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "cspm_enabled",
          "tenant_id"
        ]
      },
      "domain.AzureManagementGroupRoleAssignment": {
        "properties": {
          "management_group_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role_definition_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "domain.AzureResourcePermission": {
        "properties": {
          "name": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "role_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "domain.AzureRoleAssignment": {
        "properties": {
          "name": {
            "type": "string"
          },
          "role_definition_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "domain.BaseAPIVulnerabilityV2": {
        "properties": {
          "aid": {
            "description": "Asset ID for which the vulnerability has been detected. For managed assets it can correspond to the sensor ID, for unmanaged assets can be a stand alone ID",
            "type": "string"
          },
          "app": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityAppV2"
          },
          "apps": {
            "description": "Provide details related to the products for which a the vulnerability has been detected",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityExtendedAppV2"
            },
            "type": "array"
          },
          "cid": {
            "description": "Contains the customer identifier associated with the asset for which the vulnerability has been detected",
            "type": "string"
          },
          "closed_timestamp": {
            "description": "A timestamp corresponding to the point in time when the vulnerability has no longer been detected (eg: it got fixed)",
            "type": "string"
          },
          "confidence": {
            "description": "Represents the confidence level of a vulnerability",
            "type": "string"
          },
          "created_timestamp": {
            "description": "A timestamp corresponding to the point in time when the vulnerability has been created (detected) in our system",
            "type": "string"
          },
          "cve": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityCVEDetailsFacetV2"
          },
          "data_providers": {
            "description": "Contains information about the vulnerability data providers of this entity",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityDataProviderV1"
            },
            "type": "array"
          },
          "host_info": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityHostFacetV2"
          },
          "id": {
            "description": "Vulnerability unique ID",
            "type": "string"
          },
          "remediation": {
            "$ref": "#/components/schemas/domain.APIVulnerabilityRemediationFacetV2"
          },
          "services": {
            "description": "Contains details about the vulnerable services",
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityServiceV2"
            },
            "type": "array"
          },
          "status": {
            "description": "Current status of a vulnerability (open, closed, reopen)",
            "type": "string"
          },
          "suppression_info": {
            "$ref": "#/components/schemas/domain.APIVulnerabilitySuppressionInfoV2"
          },
          "updated_timestamp": {
            "description": "A timestamp corresponding to the point in time when a vulnerability's information or status have been updated",
            "type": "string"
          },
          "vulnerability_id": {
            "description": "Dynamic label that contains the CVE ID if applicable, otherwise the vulnerability metadata ID or label from the provider",
            "type": "string"
          }
        },
        "required": [
          "aid",
          "cid",
          "created_timestamp",
          "id",
          "status",
          "updated_timestamp"
        ]
      },
      "domain.BatchExecuteCommandRequest": {
        "properties": {
          "base_command": {
            "type": "string"
          },
          "batch_id": {
            "type": "string"
          },
          "command_string": {
            "type": "string"
          },
          "optional_hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "persist_all": {
            "type": "boolean"
          }
        },
        "required": [
          "base_command",
          "batch_id",
          "command_string",
          "optional_hosts",
          "persist_all"
        ]
      },
      "domain.BatchGetCmdStatusResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "type": "object"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.BatchGetCommandRequest": {
        "properties": {
          "batch_id": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "optional_hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "batch_id",
          "file_path",
          "optional_hosts"
        ]
      },
      "domain.BatchGetCommandResponse": {
        "properties": {
          "batch_get_cmd_req_id": {
            "type": "string"
          },
          "combined": {
            "$ref": "#/components/schemas/domain.MultiCommandExecuteResponse"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "batch_get_cmd_req_id",
          "combined",
          "errors",
          "meta"
        ]
      },
      "domain.BatchInitSessionRequest": {
        "properties": {
          "existing_batch_id": {
            "type": "string"
          },
          "host_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "queue_offline": {
            "type": "boolean"
          }
        },
        "required": [
          "existing_batch_id",
          "host_ids",
          "queue_offline"
        ]
      },
      "domain.BatchInitSessionResponse": {
        "properties": {
          "batch_id": {
            "type": "string"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "type": "object"
          }
        },
        "required": [
          "batch_id",
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.BatchRefreshSessionRequest": {
        "properties": {
          "batch_id": {
            "type": "string"
          },
          "hosts_to_remove": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "batch_id",
          "hosts_to_remove"
        ]
      },
      "domain.BatchRefreshSessionResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "type": "object"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.Behavior": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "alert_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "behavior_id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cmdline": {
            "type": "string"
          },
          "compound_tto": {
            "type": "string"
          },
          "detection_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "display_name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "exclusion_type": {
            "type": "string"
          },
          "filepath": {
            "type": "string"
          },
          "grouping_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "incident_id": {
            "type": "string"
          },
          "incident_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ioc_source": {
            "type": "string"
          },
          "ioc_type": {
            "type": "string"
          },
          "ioc_value": {
            "type": "string"
          },
          "objective": {
            "type": "string"
          },
          "pattern_disposition": {
            "format": "int32",
            "type": "integer"
          },
          "pattern_disposition_details": {
            "$ref": "#/components/schemas/patterndisposition.PatternDisposition"
          },
          "pattern_id": {
            "format": "int32",
            "type": "integer"
          },
          "sha256": {
            "type": "string"
          },
          "tactic": {
            "type": "string"
          },
          "tactic_id": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          },
          "technique_id": {
            "type": "string"
          },
          "template_instance_id": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        },
        "required": [
          "pattern_id",
          "template_instance_id",
          "timestamp"
        ]
      },
      "domain.Benchmark": {
        "properties": {
          "applicable_profiles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "benchmark_short": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "recommendation_number": {
            "type": "string"
          }
        },
        "required": [
          "benchmark_short",
          "id",
          "recommendation_number"
        ]
      },
      "domain.BotnetConfigSource": {
        "properties": {
          "actions": {
            "description": "Populated for action botnets. List of action key value pairs, defined as the action and its type",
            "items": {
              "$ref": "#/components/schemas/domain.KeyValuePair"
            },
            "type": "array"
          },
          "body": {
            "description": "Populated for spam botnets. The body of the spam template. If this contains replaceable variables, keep the variable names in the template as they appear in the raw config",
            "type": "string"
          },
          "botnet": {
            "description": "The botnet's name",
            "type": "string"
          },
          "config_type": {
            "description": "The type of botnet: `action`, `inject`, or `spam`",
            "type": "string"
          },
          "injects": {
            "description": "Populated for inject botnets. List of inject targets and their data",
            "items": {
              "$ref": "#/components/schemas/domain.BotnetInject"
            },
            "type": "array"
          },
          "sub_botnet": {
            "description": "Optional sub-botnet differentiator",
            "type": "string"
          },
          "subject": {
            "description": "Populated for spam botnets. The subject of the spam template. If this contains replaceable variables, keep the variable names in the template as they appear in the raw config",
            "type": "string"
          },
          "variables": {
            "description": "Populated for spam botnets. List of key value pairs for any replaceable variables in the spam template",
            "items": {
              "$ref": "#/components/schemas/domain.KeyValuePair"
            },
            "type": "array"
          }
        },
        "required": [
          "actions",
          "body",
          "botnet",
          "config_type",
          "injects",
          "sub_botnet",
          "subject",
          "variables"
        ]
      },
      "domain.BotnetInject": {
        "properties": {
          "inject": {
            "description": "The injected data. Populated for inject botnets",
            "type": "string"
          },
          "pattern": {
            "description": "The targeted pattern of data. Populated for inject botnets",
            "type": "string"
          }
        },
        "required": [
          "inject",
          "pattern"
        ]
      },
      "domain.BreachDetailsV1": {
        "properties": {
          "items": {
            "description": "The list of breach items",
            "items": {
              "$ref": "#/components/schemas/domain.BreachedItemV1"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ]
      },
      "domain.BreachedItemV1": {
        "properties": {
          "bot": {
            "$ref": "#/components/schemas/domain.ExposedDataRecordBotV1"
          },
          "company": {
            "description": "The company of the user",
            "type": "string"
          },
          "credential_status": {
            "description": "The status set after deduplication. Possible values: 'newly_detected', 'previously_reported', 'other'",
            "type": "string"
          },
          "credentials_domain": {
            "description": "The domain where the credentials are valid",
            "type": "string"
          },
          "credentials_ip": {
            "description": "The IP where the credentials are valid",
            "type": "string"
          },
          "credentials_url": {
            "description": "The URL where the credentials are valid",
            "type": "string"
          },
          "display_name": {
            "description": "The nickname of the user on the impacted site",
            "type": "string"
          },
          "domain": {
            "description": "The domain associated with the breached account.",
            "type": "string"
          },
          "email": {
            "description": "The email of the breached account.",
            "type": "string"
          },
          "financial": {
            "$ref": "#/components/schemas/domain.ExposedDataRecordFinancialV1"
          },
          "hash_type": {
            "description": "The original hashing algorithm applied to the breached password. Possible values: 'plain', 'unknown', 'base64', 'md5', 'sha1', 'bcrypt', etc. The value 'plain' means that the password was originally found as plaintext.",
            "type": "string"
          },
          "job_position": {
            "description": "The user's job at the company",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/domain.ExposedDataRecordLocationV1"
          },
          "login_id": {
            "description": "The username of the breached account.",
            "type": "string"
          },
          "malware_family": {
            "description": "The stealer log bot malware family",
            "type": "string"
          },
          "name": {
            "description": "The name of the person associated with the breached account.",
            "type": "string"
          },
          "password": {
            "description": "The breached password. Passwords are returned as salted hashes, generated using the SHA256 algorithm and the CID as the salt.",
            "type": "string"
          },
          "password_hash": {
            "description": "The password hash",
            "type": "string"
          },
          "password_salt": {
            "description": "The password salt",
            "type": "string"
          },
          "phone": {
            "description": "The phone number of the person associated with the breached account.",
            "type": "string"
          },
          "social": {
            "$ref": "#/components/schemas/domain.ExposedDataRecordSocialV1"
          },
          "user_id": {
            "description": "The ID of the user on the impacted site",
            "type": "string"
          },
          "user_ip": {
            "description": "The IP of the user on the impacted site",
            "type": "string"
          }
        },
        "required": [
          "domain",
          "email",
          "hash_type",
          "login_id",
          "name",
          "password",
          "phone"
        ]
      },
      "domain.CIDGroup": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cid_group_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_default": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "cid_group_id",
          "name"
        ]
      },
      "domain.CIDGroupMembers": {
        "properties": {
          "cid_group_id": {
            "type": "string"
          },
          "cids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cid_group_id",
          "cids"
        ]
      },
      "domain.CIDGroupMembersRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CIDGroupMembers"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.CIDGroupMembersResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CIDGroupMembers"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.CIDGroupsRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CIDGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.CIDGroupsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CIDGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.CIDPolicyAssignments": {
        "properties": {
          "account_scope": {
            "type": "string"
          },
          "attack_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "cis_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "cisa_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "cloud_asset_type": {
            "type": "string"
          },
          "cloud_asset_type_id": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_provider": {
            "type": "string"
          },
          "cloud_service": {
            "type": "string"
          },
          "cloud_service_friendly": {
            "type": "string"
          },
          "cloud_service_subtype": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "default_severity": {
            "type": "string"
          },
          "fql_policy": {
            "type": "string"
          },
          "hipaa_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "hitrust_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "is_remediable": {
            "type": "boolean"
          },
          "iso_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "nist_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "pci_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "policy_id": {
            "format": "int32",
            "type": "integer"
          },
          "policy_settings": {
            "items": {
              "$ref": "#/components/schemas/domain.PolicySettingByAccountAndRegion"
            },
            "type": "array"
          },
          "policy_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "policy_type": {
            "type": "string"
          },
          "remediation_summary": {
            "type": "string"
          },
          "soc2_benchmark": {
            "items": {
              "$ref": "#/components/schemas/domain.Benchmark"
            },
            "type": "array"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "is_remediable"
        ]
      },
      "domain.CISAKnownExploitedVulnerabilitiesInfo": {
        "properties": {
          "due_date": {
            "format": "date-time",
            "type": "string"
          },
          "is_cisa_kev": {
            "type": "boolean"
          }
        },
        "required": [
          "due_date",
          "is_cisa_kev"
        ]
      },
      "domain.CPSRating": {
        "properties": {
          "CurrentRating": {
            "$ref": "#/components/schemas/domain.CPSRatingHistoryEntry"
          },
          "HighestRating": {
            "$ref": "#/components/schemas/domain.CPSRatingHistoryEntry"
          },
          "NegativeIndicators": {
            "items": {
              "$ref": "#/components/schemas/domain.CPSRatingIndicator"
            },
            "type": "array"
          },
          "PositiveIndicators": {
            "items": {
              "$ref": "#/components/schemas/domain.CPSRatingIndicator"
            },
            "type": "array"
          },
          "RatingHistory": {
            "items": {
              "$ref": "#/components/schemas/domain.CPSRatingHistoryEntry"
            },
            "type": "array"
          }
        },
        "required": [
          "CurrentRating",
          "HighestRating",
          "NegativeIndicators",
          "PositiveIndicators",
          "RatingHistory"
        ]
      },
      "domain.CPSRatingHistoryEntry": {
        "properties": {
          "DateRecorded": {
            "format": "date-time",
            "type": "string"
          },
          "Rating": {
            "type": "string"
          }
        },
        "required": [
          "DateRecorded",
          "Rating"
        ]
      },
      "domain.CPSRatingIndicator": {
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "required": [
          "Description",
          "Name",
          "Value"
        ]
      },
      "domain.CSIXLabel": {
        "properties": {
          "created_on": {
            "format": "int64",
            "type": "integer"
          },
          "last_valid_on": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "created_on",
          "last_valid_on",
          "name"
        ]
      },
      "domain.CSIXRelation": {
        "properties": {
          "created_date": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "indicator": {
            "type": "string"
          },
          "last_valid_date": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "created_date",
          "indicator",
          "last_valid_date",
          "type"
        ]
      },
      "domain.CVE": {
        "properties": {
          "actors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "additional_info": {
            "type": "string"
          },
          "base_score": {
            "format": "double",
            "type": "number"
          },
          "cisa_kev_info": {
            "$ref": "#/components/schemas/domain.CISAKnownExploitedVulnerabilitiesInfo"
          },
          "content_packages": {
            "items": {
              "$ref": "#/components/schemas/domain.ContentPackage"
            },
            "type": "array"
          },
          "cps_rating": {
            "$ref": "#/components/schemas/domain.CPSRating"
          },
          "cvss_v2_score": {
            "$ref": "#/components/schemas/domain.CVSSv2"
          },
          "cvss_v3_score": {
            "$ref": "#/components/schemas/domain.CVSSv3"
          },
          "cvss_version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "exploitability_score": {
            "format": "double",
            "type": "number"
          },
          "exploited": {
            "$ref": "#/components/schemas/domain.CVEExploit"
          },
          "id": {
            "type": "string"
          },
          "impact_score": {
            "format": "double",
            "type": "number"
          },
          "is_supported": {
            "type": "boolean"
          },
          "metadata_hash": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "published_date": {
            "format": "date-time",
            "type": "string"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/domain.Reference"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "source_type": {
            "type": "string"
          },
          "spotlight_published_date": {
            "format": "date-time",
            "type": "string"
          },
          "types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vector": {
            "type": "string"
          }
        },
        "required": [
          "actors",
          "base_score",
          "cisa_kev_info",
          "cps_rating",
          "cvss_version",
          "id",
          "is_supported",
          "metadata_hash",
          "name",
          "published_date",
          "references",
          "severity",
          "source",
          "source_type",
          "spotlight_published_date",
          "types",
          "vector"
        ]
      },
      "domain.CVEExploit": {
        "properties": {
          "date_recorded": {
            "format": "date-time",
            "type": "string"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/domain.CVEExploitSource"
            },
            "type": "array"
          },
          "status": {
            "format": "byte",
            "type": "integer"
          },
          "updated_timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "date_recorded",
          "sources",
          "status",
          "updated_timestamp"
        ]
      },
      "domain.CVEExploitReference": {
        "properties": {
          "kind": {
            "format": "int32",
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "kind",
          "label",
          "url"
        ]
      },
      "domain.CVEExploitSource": {
        "properties": {
          "is_flat": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/domain.CVEExploitReference"
            },
            "type": "array"
          },
          "source": {
            "type": "string"
          }
        },
        "required": [
          "is_flat",
          "label",
          "references",
          "source"
        ]
      },
      "domain.CVSSv2": {
        "properties": {
          "base_score": {
            "format": "double",
            "type": "number"
          },
          "exploitability_score": {
            "format": "double",
            "type": "number"
          },
          "impact_score": {
            "format": "double",
            "type": "number"
          },
          "severity": {
            "type": "string"
          },
          "vector": {
            "type": "string"
          }
        },
        "required": [
          "base_score",
          "vector"
        ]
      },
      "domain.CVSSv3": {
        "properties": {
          "attack_complexity": {
            "type": "string"
          },
          "attack_vector": {
            "type": "string"
          },
          "availability_impact": {
            "type": "string"
          },
          "base_score": {
            "format": "double",
            "type": "number"
          },
          "confidentiality_impact": {
            "type": "string"
          },
          "exploitability_score": {
            "format": "double",
            "type": "number"
          },
          "impact_score": {
            "format": "double",
            "type": "number"
          },
          "integrity_impact": {
            "type": "string"
          },
          "privileges_required": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "user_interaction": {
            "type": "string"
          },
          "vector": {
            "type": "string"
          }
        },
        "required": [
          "base_score",
          "vector"
        ]
      },
      "domain.Card": {
        "properties": {
          "bin_code": {
            "type": "string"
          },
          "cardholder_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          },
          "issuing_bank": {
            "type": "string"
          },
          "last_transaction_at": {
            "format": "date-time",
            "type": "string"
          },
          "servicecode": {
            "type": "string"
          }
        }
      },
      "domain.CaseCreationRequest": {
        "properties": {
          "body": {
            "type": "string"
          },
          "detections": {
            "items": {
              "$ref": "#/components/schemas/messages.Detection"
            },
            "type": "array"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/messages.Incident"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "detections",
          "incidents",
          "title",
          "type",
          "user_uuid"
        ]
      },
      "domain.CaseCreationRequestV2": {
        "properties": {
          "body": {
            "type": "string"
          },
          "detections": {
            "items": {
              "$ref": "#/components/schemas/messages.Alert"
            },
            "type": "array"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/messages.Incident"
            },
            "type": "array"
          },
          "malware_submission_id": {
            "type": "string"
          },
          "recon_rule_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "detections",
          "incidents",
          "malware_submission_id",
          "recon_rule_type",
          "title",
          "type"
        ]
      },
      "domain.ChildLink": {
        "properties": {
          "checksum": {
            "type": "string"
          },
          "child_cid": {
            "type": "string"
          },
          "child_gcid": {
            "type": "string"
          },
          "child_of": {
            "type": "string"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "checksum",
          "child_cid",
          "child_of"
        ]
      },
      "domain.ChildrenResponseV1": {
        "properties": {
          "MsaReplyMetaOnly": {
            "$ref": "#/components/schemas/msa.ReplyMetaOnly"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ChildLink"
            },
            "type": "array"
          }
        },
        "required": [
          "MsaReplyMetaOnly",
          "resources"
        ]
      },
      "domain.Cipher": {
        "properties": {
          "bits": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "domain.CloudAWSAccountV1": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "account_id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          },
          "account_name": {
            "description": "AWS account name",
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "active_regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudCondition"
            },
            "type": "array"
          },
          "csp_events": {
            "description": "csp live events are enabled ",
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          },
          "iam_service_permissions_status": {
            "description": "Permissions status for each product returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.ProductPermission"
            },
            "type": "array"
          },
          "inventory_filter": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSInventoryFilterSetting"
            },
            "type": "array"
          },
          "is_custom_rolename": {
            "type": "boolean"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "description": "Up to 34 character AWS provided unique identifier for the organization.",
            "type": "string"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/domain.ProductFeatures"
            },
            "type": "array"
          },
          "resource_metadata": {
            "$ref": "#/components/schemas/domain.AWSAccountResourceMetadata"
          },
          "root_account_id": {
            "description": "12 digit AWS provided unique identifier for the root account (of the organization this account belongs to).",
            "type": "string"
          },
          "root_iam_role": {
            "type": "boolean"
          },
          "status": {
            "description": "Account registration status for each product and feature",
            "items": {
              "$ref": "#/components/schemas/domain.ProductFeaturesStatus"
            },
            "type": "array"
          },
          "target_ous": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "use_existing_cloudtrail": {
            "type": "boolean"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt",
          "iam_service_permissions_status",
          "inventory_filter",
          "is_custom_rolename",
          "products",
          "resource_metadata"
        ]
      },
      "domain.CloudAccounts": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "provider": {
            "format": "int32",
            "type": "string"
          }
        }
      },
      "domain.CloudCondition": {
        "properties": {
          "feature": {
            "type": "string"
          },
          "is_visible": {
            "type": "boolean"
          },
          "last_transition": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "feature",
          "is_visible",
          "last_transition",
          "status",
          "type"
        ]
      },
      "domain.CloudScope": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudAccounts"
            },
            "type": "array"
          },
          "business_impact": {
            "type": "string"
          },
          "business_unit": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "owners": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "total_accounts": {
            "format": "int32",
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "domain.CommandExecuteRequest": {
        "properties": {
          "base_command": {
            "type": "string"
          },
          "command_string": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "persist": {
            "type": "boolean"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "base_command",
          "command_string",
          "device_id",
          "id",
          "persist",
          "session_id"
        ]
      },
      "domain.CommandExecuteResponse": {
        "properties": {
          "cloud_request_id": {
            "type": "string"
          },
          "queued_command_offline": {
            "type": "boolean"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "cloud_request_id",
          "queued_command_offline",
          "session_id"
        ]
      },
      "domain.CommandExecuteResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CommandExecuteResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.Compliance": {
        "properties": {
          "benchmarks": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "frameworks": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requirements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.ComplianceFindingsGroupedByImagesWithScroll": {
        "properties": {
          "after": {
            "$ref": "#/components/schemas/domain.ComplianceFindingsGroupedByImagesWithScroll.after"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/models.ComplianceExportGroupedByImagesReport"
            },
            "type": "array"
          }
        },
        "required": [
          "after",
          "results"
        ]
      },
      "domain.ComplianceFindingsGroupedByImagesWithScroll.after": {},
      "domain.Condition": {
        "properties": {
          "feature": {
            "type": "string"
          },
          "is_visible": {
            "type": "boolean"
          },
          "last_transition": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "feature",
          "is_visible",
          "last_transition",
          "status",
          "type"
        ]
      },
      "domain.ConfigV1": {
        "properties": {
          "app_id": {
            "description": "App ID of the configuration",
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/domain.ConfigV1.config"
          },
          "config_id": {
            "description": "ID of the configuration",
            "type": "string"
          },
          "definition_id": {
            "description": "Definition ID of the configuration",
            "type": "string"
          },
          "state": {
            "description": "The current state of the config",
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "config",
          "config_id",
          "definition_id",
          "state"
        ]
      },
      "domain.ConfigV1.config": {},
      "domain.ConfigsV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ConfigV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ContentPackage": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.Control": {
        "properties": {
          "benchmarks": {
            "items": {
              "$ref": "#/components/schemas/domain.ControlBenchmark"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "framework": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "section": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "domain.ControlBenchmark": {
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "domain.CreateActionRequest": {
        "properties": {
          "content_format": {
            "description": "The level of detail in which the content will be delivered. It can be either 'standard' or 'enhanced'",
            "type": "string"
          },
          "frequency": {
            "description": "The time interval between the action's triggers. It can be one of the values: 'asap', 'daily' or 'weekly'",
            "type": "string"
          },
          "recipients": {
            "description": "The address list who will be notified by this action.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger_matchless": {
            "description": "Whether to periodically trigger the action based on the frequency, even when there are no new matches for the associated monitoring rule",
            "type": "boolean"
          },
          "type": {
            "description": "The action type. The only type currently supported is 'email'",
            "type": "string"
          }
        },
        "required": [
          "content_format",
          "frequency",
          "recipients",
          "trigger_matchless",
          "type"
        ]
      },
      "domain.CreateUserRequest": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "domain.Credentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "domain.DDOSAttackSource": {
        "properties": {
          "attack_type": {
            "description": "The type of attack. One of `Amplification`, `Botnet`, `Other`",
            "type": "string"
          },
          "confidence": {
            "description": "The confidence level. One of `Low`, `Medium`, `High`",
            "type": "string"
          },
          "duration": {
            "description": "The duration of the attack in seconds",
            "format": "int64",
            "type": "integer"
          },
          "key": {
            "description": "The hash over target and date",
            "type": "string"
          },
          "network_protocol": {
            "description": "The network protocol used. One of `TCP`, `UDP`, `ICMP`, `Other`",
            "type": "string"
          },
          "protocols": {
            "description": "The protocols used in the attack",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requests": {
            "description": "The number of requests against the target",
            "format": "int64",
            "type": "integer"
          },
          "start_time": {
            "description": "The ISO-8601 date for the attack start time",
            "type": "string"
          },
          "target": {
            "description": "The target's IPv4/6 address or hostname",
            "type": "string"
          },
          "target_details": {
            "$ref": "#/components/schemas/domain.DDOSTargetDetails"
          },
          "target_domain": {
            "description": "The target's domain",
            "type": "string"
          },
          "target_ip": {
            "description": "The target's IPv4/6 address",
            "type": "string"
          },
          "target_ports": {
            "description": "List of ports where the attack took place",
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "attack_type",
          "confidence",
          "duration",
          "key",
          "network_protocol",
          "protocols",
          "requests",
          "start_time",
          "target",
          "target_details",
          "target_domain",
          "target_ip",
          "target_ports"
        ]
      },
      "domain.DDOSTargetDetails": {
        "properties": {
          "asn": {
            "description": "The autonomous system number of the target",
            "format": "int32",
            "type": "integer"
          },
          "asn_name": {
            "description": "The autonomous system name of the target",
            "type": "string"
          },
          "cidr": {
            "description": "The CIDR of the IP address",
            "type": "string"
          },
          "city": {
            "description": "The target's city",
            "type": "string"
          },
          "company_name": {
            "description": "The name of the company who has registered the IP address",
            "type": "string"
          },
          "connection_type": {
            "description": "The connection type of the target",
            "type": "string"
          },
          "country": {
            "description": "The target's country",
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "pdns": {
            "description": "The passive DNS of the target",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rdns": {
            "description": "The reverse DNS hostname of the target's IP address",
            "type": "string"
          }
        },
        "required": [
          "asn",
          "asn_name",
          "cidr",
          "city",
          "company_name",
          "connection_type",
          "country",
          "country_code",
          "pdns",
          "rdns"
        ]
      },
      "domain.DenormalizedAdversaryReference": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.DenormalizedCountry": {
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "domain.DenormalizedCustomerTarget": {
        "properties": {
          "customer_target": {
            "type": "string"
          }
        },
        "required": [
          "customer_target"
        ]
      },
      "domain.DenormalizedReportReference": {
        "properties": {
          "publish_date": {
            "type": "string"
          },
          "report_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "report_id"
        ]
      },
      "domain.DenormalizedSector": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domain.DenormalizedThreatReference": {
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "slug"
        ]
      },
      "domain.DenormalizedThreatUsedMitre": {
        "properties": {
          "attack_id": {
            "type": "string"
          },
          "observables": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reports": {
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedReportReference"
            },
            "type": "array"
          },
          "tactic_id": {
            "type": "string"
          },
          "tactic_name": {
            "type": "string"
          },
          "technique_id": {
            "type": "string"
          },
          "technique_name": {
            "type": "string"
          }
        }
      },
      "domain.DetailedNotificationV1": {
        "properties": {
          "breach_details": {
            "$ref": "#/components/schemas/domain.BreachDetailsV1"
          },
          "details": {
            "$ref": "#/components/schemas/domain.ItemDetailsV1"
          },
          "id": {
            "type": "string"
          },
          "notification": {
            "$ref": "#/components/schemas/domain.NotificationV1"
          }
        },
        "required": [
          "id",
          "notification"
        ]
      },
      "domain.DetectsEntitiesPatchRequest": {
        "properties": {
          "assigned_to_uuid": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "new_behaviors_processed": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "show_in_ui": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "domain.Device": {
        "properties": {
          "_": {
            "format": "int32",
            "type": "integer"
          },
          "agent_version": {
            "type": "string"
          },
          "config_id_base": {
            "type": "string"
          },
          "config_id_build": {
            "type": "string"
          },
          "config_id_platform": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "device_policies": {
            "$ref": "#/components/schemas/domain.MappedDevicePolicies"
          },
          "external_ip": {
            "type": "string"
          },
          "first_login_timestamp": {
            "type": "string"
          },
          "first_login_user": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "last_login_timestamp": {
            "type": "string"
          },
          "last_login_user": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "last_seen_ago_seconds": {
            "format": "int64",
            "type": "integer"
          },
          "local_ip": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "machine_domain": {
            "type": "string"
          },
          "major_version": {
            "type": "string"
          },
          "minor_version": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "notes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "os_version": {
            "type": "string"
          },
          "ou": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_id": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "product_type": {
            "type": "string"
          },
          "product_type_desc": {
            "type": "string"
          },
          "release_group": {
            "type": "string"
          },
          "site_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "system_manufacturer": {
            "type": "string"
          },
          "system_product_name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "_",
          "device_id"
        ]
      },
      "domain.DevicePolicy": {
        "properties": {
          "policy_id": {
            "type": "string"
          }
        },
        "required": [
          "policy_id"
        ]
      },
      "domain.DiscoverAPIAccount": {
        "description": "Represents information about an account.",
        "properties": {
          "account_name": {
            "description": "The account's name (Domain\\Username or Hostname\\Username).",
            "type": "string"
          },
          "account_type": {
            "description": "The type of the account (Local or Domain).",
            "type": "string"
          },
          "admin_privileges": {
            "description": "Whether the account has administrator privileges (Yes, No, or Unknown).",
            "type": "string"
          },
          "cid": {
            "description": "The account's customer ID.",
            "type": "string"
          },
          "first_seen_timestamp": {
            "description": "The first time the account was seen successfully logging in to your environment.",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the account.",
            "type": "string"
          },
          "last_failed_login_hostname": {
            "description": "The hostname of the asset on which the account last made a failed login.",
            "type": "string"
          },
          "last_failed_login_timestamp": {
            "description": "The date and time of the account's most recent failed login.",
            "type": "string"
          },
          "last_failed_login_type": {
            "description": "The type of the account's most recent failed login. \u003cul\u003e\u003cli\u003eInteractive\u003c/li\u003e\u003cli\u003eNetwork\u003c/li\u003e\u003cli\u003eBatch\u003c/li\u003e\u003cli\u003eService\u003c/li\u003e\u003cli\u003eUnlock\u003c/li\u003e\u003cli\u003eNetwork cleartext\u003c/li\u003e\u003cli\u003eNew credentials\u003c/li\u003e\u003cli\u003eRemote interactive\u003c/li\u003e\u003cli\u003eCached credentials\u003c/li\u003e\u003cli\u003eAuditing\u003c/li\u003e\u003c/ul\u003e",
            "type": "string"
          },
          "last_successful_login_host_city": {
            "description": "The name of the city where the asset is located on which the account last successfully logged in.",
            "type": "string"
          },
          "last_successful_login_host_country": {
            "description": "The name of the country where the asset is located on which the account last successfully logged in.",
            "type": "string"
          },
          "last_successful_login_hostname": {
            "description": "The hostname of the asset on which the account last successfully logged in.",
            "type": "string"
          },
          "last_successful_login_remote_ip": {
            "description": "The remote IP address of the asset on which the account last successfully logged in.",
            "type": "string"
          },
          "last_successful_login_timestamp": {
            "description": "The date and time of the account's most recent successful login.",
            "type": "string"
          },
          "last_successful_login_type": {
            "description": "The type of the account's most recent successful login. \u003cul\u003e\u003cli\u003eInteractive\u003c/li\u003e\u003cli\u003eNetwork\u003c/li\u003e\u003cli\u003eService\u003c/li\u003e\u003cli\u003eRemote interactive\u003c/li\u003e\u003cli\u003eCached credentials\u003c/li\u003e\u003cli\u003eAuditing\u003c/li\u003e\u003c/ul\u003e",
            "type": "string"
          },
          "local_admin_privileges": {
            "description": "Whether the account has local administrator privileges (Yes, No).",
            "type": "string"
          },
          "login_domain": {
            "description": "The domain of the asset the account successfully logged in to.",
            "type": "string"
          },
          "password_last_set_timestamp": {
            "description": "The most recent date and time the account's password was changed.",
            "type": "string"
          },
          "user_sid": {
            "description": "The account's security identifier on Windows assets.",
            "type": "string"
          },
          "username": {
            "description": "The account's username.",
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "domain.DiscoverAPIAccountEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIAccount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIActiveDiscoveryHost": {
        "description": "Information obtained from active discovery.",
        "properties": {
          "last_seen_network_id": {
            "description": "The ID of the network where the host was last seen",
            "type": "string"
          },
          "last_seen_site_id": {
            "description": "The ID of the site where the host was last seen",
            "type": "string"
          },
          "networks": {
            "description": "The networks discovered on the asset.",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIActiveDiscoveryNetwork"
            },
            "type": "array"
          },
          "open_ports": {
            "description": "The open ports discovered on the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.DiscoverAPIActiveDiscoveryNetwork": {
        "description": "Information about an active discovery network this asset is associated with.\nInformation about the corresponding Site ID .",
        "properties": {
          "id": {
            "description": "The id of the network",
            "type": "string"
          },
          "site_id": {
            "description": "The id of the site",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.DiscoverAPIApplication": {
        "description": "Represents information about an application.",
        "properties": {
          "architectures": {
            "description": "Represents the application architectures (x86 / x64).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "browser_extension": {
            "$ref": "#/components/schemas/domain.DiscoverAPIApplicationBrowserExtension"
          },
          "category": {
            "description": "The category of the application.",
            "type": "string"
          },
          "cid": {
            "description": "The customer ID of this application.",
            "type": "string"
          },
          "first_seen_timestamp": {
            "description": "Timestamp when this application was first seen by the cloud.",
            "type": "string"
          },
          "groups": {
            "description": "The user defined groups this application is part of.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host": {
            "$ref": "#/components/schemas/domain.DiscoverAPIApplicationHost"
          },
          "id": {
            "description": "The unique ID for the application.",
            "type": "string"
          },
          "installation_paths": {
            "description": "The file paths where the application is installed on the host. Or the locations of the executables.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "installation_timestamp": {
            "description": "Timestamp when the application was installed on the host. We might not have this data.",
            "type": "string"
          },
          "is_normalized": {
            "description": "Whether or not the application is normalized",
            "type": "boolean"
          },
          "is_suspicious": {
            "description": "Whether or not the application is suspicious",
            "type": "boolean"
          },
          "last_updated_timestamp": {
            "description": "Timestamp when this application was last updated (something changed in the application or in the host data).",
            "type": "string"
          },
          "last_used_file_hash": {
            "description": "The file hash that was last used for this application.",
            "type": "string"
          },
          "last_used_file_name": {
            "description": "The file name that was last used for this application.",
            "type": "string"
          },
          "last_used_timestamp": {
            "description": "Timestamp when this application was last used.",
            "type": "string"
          },
          "last_used_user_name": {
            "description": "The username of the user that last used this application.",
            "type": "string"
          },
          "last_used_user_sid": {
            "description": "The user SID of the last user that used this application.",
            "type": "string"
          },
          "name": {
            "description": "The name of the application.",
            "type": "string"
          },
          "name_vendor": {
            "description": "The combined field on which we will be able to group by app.",
            "type": "string"
          },
          "name_vendor_version": {
            "description": "The combined field on which we will be able to group by app + version.",
            "type": "string"
          },
          "software_type": {
            "description": "The type of software of the application.",
            "type": "string"
          },
          "vendor": {
            "description": "The name the application's vendor.",
            "type": "string"
          },
          "version": {
            "description": "The version of the application.",
            "type": "string"
          },
          "versioning_scheme": {
            "description": "The version scheme of the application.",
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "domain.DiscoverAPIApplicationBrowserExtension": {
        "description": "Uniquely identifies a browser extension.",
        "properties": {
          "architecture": {
            "description": "The architecture of the browser extension",
            "type": "string"
          },
          "browser_name": {
            "description": "The name of the browser that's running the extension",
            "type": "string"
          },
          "enabled": {
            "description": "Describes if the extension is enabled on the host on at least one browser profile",
            "type": "boolean"
          },
          "id": {
            "description": "The unique ID of the browser extension.",
            "type": "string"
          },
          "installations": {
            "description": "The installations of this browser extension for each browser profile",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIApplicationBrowserExtensionInstallation"
            },
            "type": "array"
          },
          "permission_severity": {
            "description": "The computed serverity of all permissions requested by the browser extension",
            "type": "string"
          },
          "permissions": {
            "description": "The browser permissions the extension requires to run",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "store_url": {
            "description": "The calculated browser webstore URL for this extension",
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "id"
        ]
      },
      "domain.DiscoverAPIApplicationBrowserExtensionInstallation": {
        "properties": {
          "browser_profile_id": {
            "description": "The browser profile ID of this installation",
            "type": "string"
          },
          "browser_profile_name": {
            "description": "The browser profile name of this installation",
            "type": "string"
          },
          "browser_version": {
            "description": "The version of the browser running this extension",
            "type": "string"
          },
          "enabled": {
            "description": "Describes if the extension is enabled on this browser profile installation",
            "type": "boolean"
          },
          "method": {
            "description": "The method that was used to install the browser extension",
            "type": "string"
          },
          "path": {
            "description": "The file path location of the browser extension",
            "type": "string"
          },
          "role": {
            "description": "The role of the account that installed the extension",
            "type": "string"
          },
          "user_sid": {
            "description": "The host user SID for which the extension was installed",
            "type": "string"
          },
          "username": {
            "description": "The host username for which the extension was installed",
            "type": "string"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "domain.DiscoverAPIApplicationEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIApplication"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIApplicationHost": {
        "description": "Represents information about an application's host'.",
        "properties": {
          "agent_version": {
            "description": "The version of the Falcon sensor that's installed on the asset.",
            "type": "string"
          },
          "aid": {
            "description": "The agent ID of the Falcon sensor installed on the asset.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country where the asset is located.",
            "type": "string"
          },
          "current_mac_address": {
            "description": "The last seen MAC address of the asset.",
            "type": "string"
          },
          "current_network_prefix": {
            "description": "The last seen network prefix of the asset.",
            "type": "string"
          },
          "external_ip": {
            "description": "The external IPv4 address of the asset.",
            "type": "string"
          },
          "groups": {
            "description": "The host management groups the asset is part of.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hostname": {
            "description": "The asset's hostname.",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the asset.",
            "type": "string"
          },
          "internet_exposure": {
            "description": "Whether the asset is exposed to the internet (Yes or Unknown).",
            "type": "string"
          },
          "kernel_version": {
            "description": "For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.",
            "type": "string"
          },
          "machine_domain": {
            "description": "The domain name the asset is currently joined to.",
            "type": "string"
          },
          "os_version": {
            "description": "The OS version of the asset.",
            "type": "string"
          },
          "ou": {
            "description": "The organizational unit of the asset.",
            "type": "string"
          },
          "ous": {
            "description": "The organizational units of the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "platform_name": {
            "description": "The platform name of the asset (Windows, Mac, Linux).",
            "type": "string"
          },
          "product_type_desc": {
            "description": "The product type of the asset (Workstation, Domain Controller, Server).",
            "type": "string"
          },
          "site_name": {
            "description": "The site name of the domain the asset is joined to (applies only to Windows hosts).",
            "type": "string"
          },
          "system_manufacturer": {
            "description": "The asset's system manufacturer.",
            "type": "string"
          },
          "tags": {
            "description": "The sensor and cloud tags of the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.DiscoverAPIBiosHashesData": {
        "properties": {
          "measurement_type": {
            "description": "The measurement type of the associated sha256 hash",
            "format": "int32",
            "type": "integer"
          },
          "sha256_hash": {
            "description": "The sha256 hash from the firmware image",
            "type": "string"
          }
        }
      },
      "domain.DiscoverAPICombinedApplicationsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.DiscoverAPIMetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIApplication"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPICombinedHostsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.DiscoverAPIMetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIHost"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIDeviceSlot": {
        "properties": {
          "slot_firmware": {
            "description": "The Firmware of the Rack Slot of IoT Asset",
            "type": "string"
          },
          "slot_ip_address": {
            "description": "The IoT asset's IP address",
            "type": "string"
          },
          "slot_mac_address": {
            "description": "The IoT asset's MAC address",
            "type": "string"
          },
          "slot_model": {
            "description": "The Model of the Rack Slot of IoT Asset",
            "type": "string"
          },
          "slot_name": {
            "description": "The Name of the Rack Slot of IoT Asset",
            "type": "string"
          },
          "slot_number": {
            "description": "The Slot Number of the Rack Slot of IoT Asset",
            "format": "int32",
            "type": "integer"
          },
          "slot_serial_number": {
            "description": "The Serial Number of the Rack Slot of IoT Asset",
            "type": "string"
          },
          "slot_type": {
            "description": "The IoT asset's slot type",
            "type": "string"
          },
          "slot_vendor": {
            "description": "The Vendor of the Rack Slot of IoT Asset",
            "type": "string"
          }
        }
      },
      "domain.DiscoverAPIDiskSize": {
        "properties": {
          "disk_name": {
            "description": "The name of the disk on the host",
            "type": "string"
          },
          "disk_space": {
            "description": "The size of the disk on the host",
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "domain.DiscoverAPIFieldMetadata": {
        "description": "The metadata information for a host for each field",
        "properties": {
          "providers": {
            "description": "Providers which have set the value.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.DiscoverAPIHost": {
        "properties": {
          "account_enabled": {
            "description": "Whether the asset is account-enabled in Active Directory (Yes or No).",
            "type": "string"
          },
          "active_discovery": {
            "$ref": "#/components/schemas/domain.DiscoverAPIActiveDiscoveryHost"
          },
          "ad_user_account_control": {
            "description": "The user account control properties in Active Directory.",
            "format": "int32",
            "type": "integer"
          },
          "ad_virtual_server": {
            "description": "Whether the asset is a virtual server or not (Yes, No)",
            "type": "string"
          },
          "agent_version": {
            "description": "The version of the Falcon sensor that's installed on the asset.",
            "type": "string"
          },
          "aid": {
            "description": "The agent ID of the Falcon sensor installed on the asset.",
            "type": "string"
          },
          "asset_roles": {
            "description": "The asset role or roles currently assigned to the asset either automatically or by a user (Jump host, Highly connected, Highly active, Server by behavior, DHCP server, DNS server, FTP server, SSH server, or Web server).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assigned_to": {
            "description": "The first and last name of the person who is assigned to this asset.",
            "type": "string"
          },
          "available_disk_space": {
            "description": "The available disk space in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "available_disk_space_pct": {
            "description": "The available disk space percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "average_memory_usage": {
            "description": "The average memory usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "average_memory_usage_pct": {
            "description": "The average memory usage percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "average_processor_usage": {
            "description": "The average processor usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "bios_hashes_data": {
            "description": "The list of found sha256 and their measurement types",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIBiosHashesData"
            },
            "type": "array"
          },
          "bios_id": {
            "description": "The id of the bios on the host",
            "type": "string"
          },
          "bios_manufacturer": {
            "description": "The name of the asset's BIOS manufacturer.",
            "type": "string"
          },
          "bios_version": {
            "description": "The asset's BIOS version.",
            "type": "string"
          },
          "business_criticality": {
            "description": "The business criticality of the IoT asset.",
            "type": "string"
          },
          "cid": {
            "description": "The asset's customer ID.",
            "type": "string"
          },
          "city": {
            "description": "The name of the city where the asset is located.",
            "type": "string"
          },
          "claroty_id": {
            "description": "The external ID of the IoT Device in 3rd Party System(Claroty).",
            "type": "string"
          },
          "classification": {
            "description": "How the server is classified, such as production, development, disaster recovery, or user acceptance testing.",
            "type": "string"
          },
          "cloud_account_id": {
            "description": "The cloud provider assigned identifier of the cloud account the instance is located in.",
            "type": "string"
          },
          "cloud_instance_id": {
            "description": "The id of the cloud instance.",
            "type": "string"
          },
          "cloud_provider": {
            "description": "The cloud provider environment the instance is located in (AWS/Azure/GCP).",
            "type": "string"
          },
          "cloud_region": {
            "description": "The cloud provider assigned identifier of the cloud region the instance is located in (e.g. “us-west-1”, “westeurope”, “asia-northeast1)",
            "type": "string"
          },
          "cloud_registered": {
            "description": "Whether or not the instance is located in a cloud account registered with cloud security posture.",
            "type": "boolean"
          },
          "cloud_resource_id": {
            "description": "The cloud provider assigned identifier of the instance.",
            "type": "string"
          },
          "composite_internet_exposure": {
            "description": "The composite internet exposure of the asset",
            "type": "string"
          },
          "computed_asset_roles": {
            "description": "The asset role or roles assigned to the asset automatically (Jump host, Highly connected, Highly active, Server by behavior, DHCP server, DNS server, FTP server, SSH server, or Web server).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "computed_internet_exposure": {
            "description": "Whether the asset is exposed to the internet as determined automatically (Yes, No, or Pending).",
            "type": "string"
          },
          "computed_internet_exposure_external_ip": {
            "description": "External IP exposed to the internet.",
            "type": "string"
          },
          "computed_internet_exposure_last_seen": {
            "description": "When the asset was last seen as internet exposed.",
            "type": "string"
          },
          "confidence": {
            "description": "The level of confidence that the asset is a corporate asset (25 = low confidence, 50 = medium confidence, 75 = high confidence).",
            "format": "int32",
            "type": "integer"
          },
          "country": {
            "description": "The name of the country where the asset is located.",
            "type": "string"
          },
          "cpu_manufacturer": {
            "description": "The manufacturer of the asset's CPU.",
            "type": "string"
          },
          "cpu_processor_name": {
            "description": "The name of the processor on the system",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "The time the asset was created in Active Directory, according to LDAP info.",
            "type": "string"
          },
          "criticality": {
            "description": "The criticality level of the asset (Critical, High, Noncritical, or Unassigned)",
            "type": "string"
          },
          "criticality_description": {
            "description": "The description the user entered when manually assigning a criticality level",
            "type": "string"
          },
          "criticality_rule_id": {
            "description": "The ID of the criticality rule that has most recently applied to the asset.",
            "type": "string"
          },
          "criticality_timestamp": {
            "description": "The date and time the criticality level was manually assigned",
            "type": "string"
          },
          "criticality_username": {
            "description": "The username of the account that manually assigned the criticality level",
            "type": "string"
          },
          "current_local_ip": {
            "description": "The last seen local IPv4 address of the asset.",
            "type": "string"
          },
          "current_network_prefix": {
            "description": "The last seen network prefix of the asset.",
            "type": "string"
          },
          "data_providers": {
            "description": "Where the data about the asset came from (such as CrowdStrike, ServiceNow, or Active Directory).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "data_providers_count": {
            "description": "How many services provided data about the asset.",
            "format": "int32",
            "type": "integer"
          },
          "department": {
            "description": "The department where the asset is used.",
            "type": "string"
          },
          "descriptions": {
            "description": "The descriptions of the asset in Active Directory (Cannot be used for filtering, sorting, or querying).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "device_class": {
            "description": "The Device Class of IoT Asset",
            "type": "string"
          },
          "device_family": {
            "description": "The Device Family of IoT Asset",
            "type": "string"
          },
          "device_mode": {
            "description": "The device mode of the host",
            "type": "string"
          },
          "device_slots": {
            "description": "The slots of IoT Asset",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIDeviceSlot"
            },
            "type": "array"
          },
          "device_type": {
            "description": "The Device Type of IoT Asset",
            "type": "string"
          },
          "discoverer_aids": {
            "description": "The agent IDs of the Falcon sensors installed on the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_count": {
            "description": "The number of sources that discovered the asset.",
            "format": "int32",
            "type": "integer"
          },
          "discoverer_criticalities": {
            "description": "The criticalities of the sources that discovered the asset",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_hostnames": {
            "description": "The hostnames of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_ics_collector_ids": {
            "description": "A list of agent IDs of the Falcon sensors installed on the source hosts that discovered the asset via ICS Asset discovery mechanism",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_platform_names": {
            "description": "The platform names of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_product_type_descs": {
            "description": "The product type descriptions of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_tags": {
            "description": "The tags of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discovering_by": {
            "description": "Represents the status of a managed host (“Not Discovering“, “Passive“, “Active“ or both).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "disk_sizes": {
            "description": "The names and sizes of the disks on the asset",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIDiskSize"
            },
            "type": "array"
          },
          "dragos_id": {
            "description": "The ID generated by dragos asset discovery mechanism",
            "type": "string"
          },
          "email": {
            "description": "The email of the asset as listed in Active Directory.",
            "type": "string"
          },
          "encrypted_drives": {
            "description": "The list of encrypted drives on the host",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "encrypted_drives_count": {
            "description": "The count of encrypted drives on the host",
            "format": "int32",
            "type": "integer"
          },
          "encryption_status": {
            "description": "The encryption status of the host",
            "type": "string"
          },
          "entity_type": {
            "description": "The type of asset (managed, unmanaged, unsupported).",
            "type": "string"
          },
          "external_ip": {
            "description": "The external IPv4 address of the asset.",
            "type": "string"
          },
          "field_metadata": {
            "description": "Lists the data providers for each property in the response (Cannot be used for filtering, sorting, or querying).",
            "type": "object"
          },
          "first_discoverer_aid": {
            "description": "The agent ID of the Falcon sensor on the source that first discovered the asset.",
            "type": "string"
          },
          "first_seen_timestamp": {
            "description": "The first time the asset was seen in your environment.",
            "type": "string"
          },
          "form_factor": {
            "description": "The form factor of the host",
            "type": "string"
          },
          "fqdn": {
            "description": "The fully qualified domain name of the asset.",
            "type": "string"
          },
          "groups": {
            "description": "The host management groups the asset is part of.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hostname": {
            "description": "The asset's hostname.",
            "type": "string"
          },
          "ics_id": {
            "description": "The ID generated by ICS collector asset discovery mechanism",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the asset.",
            "type": "string"
          },
          "internet_exposure": {
            "description": "Whether the asset is exposed to the internet (Yes, No or Pending).",
            "type": "string"
          },
          "internet_exposure_description": {
            "description": "The description the user entered when manually assigning a internet exposure level",
            "type": "string"
          },
          "internet_exposure_timestamp": {
            "description": "The date and time the internet exposure level was manually assigned",
            "type": "string"
          },
          "internet_exposure_username": {
            "description": "The username of the account that manually assigned the internet exposure level",
            "type": "string"
          },
          "kernel_version": {
            "description": "For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.",
            "type": "string"
          },
          "last_discoverer_aid": {
            "description": "The agent ID of the Falcon sensor installed on the source that most recently discovered the asset.",
            "type": "string"
          },
          "last_discoverer_hostname": {
            "description": "The hostname of the last source that discovered the asset.",
            "type": "string"
          },
          "last_discoverer_ics_collector_id": {
            "description": "The agent ID of the Falcon sensor installed on the source host that most recently discovered the asset via ICS Asset discovery mechanism",
            "type": "string"
          },
          "last_seen_timestamp": {
            "description": "The most recent time the asset was seen in your environment.",
            "type": "string"
          },
          "local_ip_addresses": {
            "description": "Historical local IPv4 addresses associated with the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local_ips_count": {
            "description": "The number of historical local IPv4 addresses the asset has had.",
            "format": "int32",
            "type": "integer"
          },
          "location": {
            "description": "The location of the asset.",
            "type": "string"
          },
          "logical_core_count": {
            "description": "The number of logical cores available on the system",
            "format": "int32",
            "type": "integer"
          },
          "mac_addresses": {
            "description": "Historical MAC addresses associated with the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "machine_domain": {
            "description": "The domain name the asset is currently joined to.",
            "type": "string"
          },
          "managed_by": {
            "description": "The first and last name of the person who manages this asset.",
            "type": "string"
          },
          "max_memory_usage": {
            "description": "The max memory usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "max_memory_usage_pct": {
            "description": "The max memory usage percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "max_processor_usage": {
            "description": "The max processor usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "memory_total": {
            "description": "The Total memory.",
            "format": "int64",
            "type": "integer"
          },
          "mount_storage_info": {
            "description": "The path, used and available space on mounted disks",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIMountStorageInfo"
            },
            "type": "array"
          },
          "network_id": {
            "description": "The network ID to which device is connected.",
            "type": "string"
          },
          "network_interfaces": {
            "description": "The asset's network interfaces (Cannot be used for filtering, sorting, or querying).",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPINetworkInterface"
            },
            "type": "array"
          },
          "network_scanned_ids": {
            "description": "The set of unique identifiers for the asset scanned by the Falcon sensor.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "number_of_disk_drives": {
            "description": "The number of active physical drives available on the system.",
            "format": "int32",
            "type": "integer"
          },
          "object_guid": {
            "description": "The globally unique identifier (GUID) of the asset in Active Directory.",
            "type": "string"
          },
          "object_sid": {
            "description": "The security identifier (SID) of the asset in Active Directory.",
            "type": "string"
          },
          "os_is_eol": {
            "description": "Whether the asset is at end of support (Yes, No, or Unknown).",
            "type": "string"
          },
          "os_security": {
            "$ref": "#/components/schemas/domain.DiscoverAPIOsSecurity"
          },
          "os_service_pack": {
            "description": "The OS service pack on the asset.",
            "type": "string"
          },
          "os_version": {
            "description": "The OS version of the asset.",
            "type": "string"
          },
          "ot_information_sources": {
            "description": "A list of sources through which host is discovered",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ot_network_ids": {
            "description": "A list of network ids to which host belongs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ot_serial_numbers": {
            "description": "A list of ot serial numbers that discovered with host",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ou": {
            "description": "The organizational unit of the asset.",
            "type": "string"
          },
          "ous": {
            "description": "The organizational units of the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "override_asset_roles": {
            "description": "Whether a user overrode automatically assigned asset roles to manually assign a role to the asset (true or false).",
            "type": "boolean"
          },
          "override_criticality_rules": {
            "description": "Whether a user overrode a criticality rule to manually assign a criticality level on the asset (true or false).",
            "type": "boolean"
          },
          "override_internet_exposure": {
            "description": "Whether a user overrode the automatically assigned internet exposure (True or False).",
            "type": "boolean"
          },
          "owned_by": {
            "description": "The first and last name of the person who owns this asset.",
            "type": "string"
          },
          "physical_core_count": {
            "description": "The number of physical CPU cores available on the system.",
            "format": "int32",
            "type": "integer"
          },
          "platform_name": {
            "description": "The platform name of the asset (Windows, Mac, Linux).",
            "type": "string"
          },
          "processor_package_count": {
            "description": "The number of physical processors available on the system.",
            "format": "int32",
            "type": "integer"
          },
          "product_type": {
            "description": "The product type of the asset represented as a number (1 = Workstation, 2 = Domain Controller, 3 = Server).",
            "type": "string"
          },
          "product_type_desc": {
            "description": "The product type of the asset (Workstation, Domain Controller, Server).",
            "type": "string"
          },
          "protocols": {
            "description": "The list of protocols supported by the device",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "purdue_level": {
            "description": "The purdue level of IoT Asset",
            "type": "string"
          },
          "qualys_id": {
            "description": "Represents the unique identifier of an asset reported by Qualys",
            "type": "string"
          },
          "qualys_network_id": {
            "description": "Represents the network id of an asset reported by Qualys",
            "type": "string"
          },
          "reduced_functionality_mode": {
            "description": "Whether the asset is in reduced functionality mode (Yes or No).",
            "type": "string"
          },
          "scan_details": {
            "description": "Represents information about the scans that this host has been a part of'.",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIScanDetailsHost"
            },
            "type": "array"
          },
          "servicenow_id": {
            "description": "The unique identifier of the asset from ServiceNow, if any.",
            "type": "string"
          },
          "site_name": {
            "description": "The site name of the domain the asset is joined to (applies only to Windows hosts).",
            "type": "string"
          },
          "state": {
            "description": "The name of the U.S. state where the asset is located.",
            "type": "string"
          },
          "subnet": {
            "description": "The subnet to which device is connected.",
            "type": "string"
          },
          "system_manufacturer": {
            "description": "The asset's system manufacturer.",
            "type": "string"
          },
          "system_product_name": {
            "description": "The asset's system product name.",
            "type": "string"
          },
          "system_serial_number": {
            "description": "The asset's system serial number.",
            "type": "string"
          },
          "tags": {
            "description": "The sensor and cloud tags of the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tenableio_id": {
            "description": "Represents the unique identifier of an asset reported by Tenable",
            "type": "string"
          },
          "total_bios_files": {
            "description": "The count of bios files measured by the firmware image",
            "format": "int32",
            "type": "integer"
          },
          "total_disk_space": {
            "description": "Total amount of disk space available on the system",
            "format": "int32",
            "type": "integer"
          },
          "total_memory": {
            "description": "The total memory of the asset",
            "format": "int32",
            "type": "integer"
          },
          "triage": {
            "$ref": "#/components/schemas/domain.DiscoverAPIHostTriage"
          },
          "unencrypted_drives": {
            "description": "The list of unencrypted drives on the host",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "unencrypted_drives_count": {
            "description": "The count of unencrypted drives on the host",
            "format": "int32",
            "type": "integer"
          },
          "used_disk_space": {
            "description": "The used disk space in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "used_disk_space_pct": {
            "description": "The used disk space percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "used_for": {
            "description": "What the asset is used for, such as production, staging, or QA.",
            "type": "string"
          },
          "user_asset_roles": {
            "description": "The asset role or roles manually assigned to the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_internet_exposure": {
            "description": "The internet exposure manually assigned to the asset",
            "type": "string"
          },
          "virtual_zone": {
            "description": "The Virtual Zone name in which device is installed.",
            "type": "string"
          },
          "vlan": {
            "description": "The VLAN IDs to which device is connected.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vulnerability_assessment_date": {
            "description": "Represents the date when this host has been assessed for vulnerabilities",
            "type": "string"
          },
          "xdome_id": {
            "description": "The external ID of the IoT Device in 3rd Party System(Claroty Xdome)",
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "domain.DiscoverAPIHostEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIHost"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIHostTriage": {
        "properties": {
          "action": {
            "description": "The host triage action.",
            "type": "string"
          },
          "assigned_to": {
            "description": "The user assigned to triage the host.",
            "type": "string"
          },
          "description": {
            "description": "The host triage description.",
            "type": "string"
          },
          "status": {
            "description": "The host triage status.",
            "type": "string"
          },
          "updated_by": {
            "description": "The user who last triaged the host.'",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "The time at which the host was last triaged.",
            "type": "string"
          }
        }
      },
      "domain.DiscoverAPIIoTHost": {
        "properties": {
          "account_enabled": {
            "description": "Whether the asset is account-enabled in Active Directory (Yes or No).",
            "type": "string"
          },
          "ad_user_account_control": {
            "description": "The user account control properties in Active Directory.",
            "format": "int32",
            "type": "integer"
          },
          "ad_virtual_server": {
            "description": "Whether the asset is a virtual server or not (Yes, No)",
            "type": "string"
          },
          "agent_version": {
            "description": "The version of the Falcon sensor that's installed on the asset.",
            "type": "string"
          },
          "aid": {
            "description": "The agent ID of the Falcon sensor installed on the asset.",
            "type": "string"
          },
          "asset_roles": {
            "description": "The asset role or roles currently assigned to the asset either automatically or by a user (Jump host, Highly connected, Highly active, Server by behavior, DHCP server, DNS server, FTP server, SSH server, or Web server).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assigned_to": {
            "description": "The first and last name of the person who is assigned to this asset.",
            "type": "string"
          },
          "available_disk_space": {
            "description": "The available disk space in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "available_disk_space_pct": {
            "description": "The available disk space percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "average_memory_usage": {
            "description": "The average memory usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "average_memory_usage_pct": {
            "description": "The average memory usage percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "average_processor_usage": {
            "description": "The average processor usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "bios_hashes_data": {
            "description": "The list of found sha256 and their measurement types",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIBiosHashesData"
            },
            "type": "array"
          },
          "bios_id": {
            "description": "The id of the bios on the host",
            "type": "string"
          },
          "bios_manufacturer": {
            "description": "The name of the asset's BIOS manufacturer.",
            "type": "string"
          },
          "bios_version": {
            "description": "The asset's BIOS version.",
            "type": "string"
          },
          "business_criticality": {
            "description": "The business criticality of the IoT asset.",
            "type": "string"
          },
          "cid": {
            "description": "The asset's customer ID.",
            "type": "string"
          },
          "city": {
            "description": "The name of the city where the asset is located.",
            "type": "string"
          },
          "claroty_id": {
            "description": "The external ID of the IoT Device in 3rd Party System(Claroty).",
            "type": "string"
          },
          "classification": {
            "description": "How the server is classified, such as production, development, disaster recovery, or user acceptance testing.",
            "type": "string"
          },
          "composite_internet_exposure": {
            "description": "The composite internet exposure of the asset",
            "type": "string"
          },
          "computed_asset_roles": {
            "description": "The asset role or roles assigned to the asset automatically (Jump host, Highly connected, Highly active, Server by behavior, DHCP server, DNS server, FTP server, SSH server, or Web server).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "computed_internet_exposure": {
            "description": "Whether the asset is exposed to the internet as determined automatically (Yes, No, or Pending).",
            "type": "string"
          },
          "computed_internet_exposure_external_ip": {
            "description": "External IP exposed to the internet.",
            "type": "string"
          },
          "computed_internet_exposure_last_seen": {
            "description": "When the asset was last seen as internet exposed.",
            "type": "string"
          },
          "confidence": {
            "description": "The level of confidence that the asset is a corporate asset (25 = low confidence, 50 = medium confidence, 75 = high confidence).",
            "format": "int32",
            "type": "integer"
          },
          "country": {
            "description": "The name of the country where the asset is located.",
            "type": "string"
          },
          "cpu_manufacturer": {
            "description": "The manufacturer of the asset's CPU.",
            "type": "string"
          },
          "cpu_processor_name": {
            "description": "The name of the processor on the system",
            "type": "string"
          },
          "creation_timestamp": {
            "description": "The time the asset was created in Active Directory, according to LDAP info.",
            "type": "string"
          },
          "criticality": {
            "description": "The criticality level of the asset (Critical, High, Noncritical, or Unassigned)",
            "type": "string"
          },
          "criticality_description": {
            "description": "The description the user entered when manually assigning a criticality level",
            "type": "string"
          },
          "criticality_rule_id": {
            "description": "The ID of the criticality rule that has most recently applied to the asset.",
            "type": "string"
          },
          "criticality_timestamp": {
            "description": "The date and time the criticality level was manually assigned",
            "type": "string"
          },
          "criticality_username": {
            "description": "The username of the account that manually assigned the criticality level",
            "type": "string"
          },
          "current_local_ip": {
            "description": "The last seen local IPv4 address of the asset.",
            "type": "string"
          },
          "current_network_prefix": {
            "description": "The last seen network prefix of the asset.",
            "type": "string"
          },
          "data_providers": {
            "description": "Where the data about the asset came from (such as CrowdStrike, ServiceNow, or Active Directory).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "data_providers_count": {
            "description": "How many services provided data about the asset.",
            "format": "int32",
            "type": "integer"
          },
          "department": {
            "description": "The department where the asset is used.",
            "type": "string"
          },
          "descriptions": {
            "description": "The descriptions of the asset in Active Directory (Cannot be used for filtering, sorting, or querying).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "device_class": {
            "description": "The Device Class of IoT Asset",
            "type": "string"
          },
          "device_family": {
            "description": "The Device Family of IoT Asset",
            "type": "string"
          },
          "device_mode": {
            "description": "The device mode of the host",
            "type": "string"
          },
          "device_slots": {
            "description": "The slots of IoT Asset",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIDeviceSlot"
            },
            "type": "array"
          },
          "device_type": {
            "description": "The Device Type of IoT Asset",
            "type": "string"
          },
          "discoverer_aids": {
            "description": "The agent IDs of the Falcon sensors installed on the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_count": {
            "description": "The number of sources that discovered the asset.",
            "format": "int32",
            "type": "integer"
          },
          "discoverer_criticalities": {
            "description": "The criticalities of the sources that discovered the asset",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_hostnames": {
            "description": "The hostnames of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_ics_collector_ids": {
            "description": "A list of agent IDs of the Falcon sensors installed on the source hosts that discovered the asset via ICS Asset discovery mechanism",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_platform_names": {
            "description": "The platform names of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_product_type_descs": {
            "description": "The product type descriptions of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discoverer_tags": {
            "description": "The tags of the sources that discovered the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discovering_by": {
            "description": "Represents the status of a managed host (“Not Discovering“, “Passive“, “Active“ or both).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "disk_sizes": {
            "description": "The names and sizes of the disks on the asset",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIDiskSize"
            },
            "type": "array"
          },
          "dragos_id": {
            "description": "The ID generated by dragos asset discovery mechanism",
            "type": "string"
          },
          "email": {
            "description": "The email of the asset as listed in Active Directory.",
            "type": "string"
          },
          "encrypted_drives": {
            "description": "The list of encrypted drives on the host",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "encrypted_drives_count": {
            "description": "The count of encrypted drives on the host",
            "format": "int32",
            "type": "integer"
          },
          "encryption_status": {
            "description": "The encryption status of the host",
            "type": "string"
          },
          "entity_type": {
            "description": "The type of asset (managed, unmanaged, unsupported).",
            "type": "string"
          },
          "external_ip": {
            "description": "The external IPv4 address of the asset.",
            "type": "string"
          },
          "field_metadata": {
            "description": "Lists the data providers for each property in the response (Cannot be used for filtering, sorting, or querying).",
            "type": "object"
          },
          "first_discoverer_aid": {
            "description": "The agent ID of the Falcon sensor on the source that first discovered the asset.",
            "type": "string"
          },
          "first_seen_timestamp": {
            "description": "The first time the asset was seen in your environment.",
            "type": "string"
          },
          "form_factor": {
            "description": "The form factor of the host",
            "type": "string"
          },
          "fqdn": {
            "description": "The fully qualified domain name of the asset.",
            "type": "string"
          },
          "groups": {
            "description": "The host management groups the asset is part of.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hostname": {
            "description": "The asset's hostname.",
            "type": "string"
          },
          "ics_id": {
            "description": "The ID generated by ICS collector asset discovery mechanism",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the asset.",
            "type": "string"
          },
          "internet_exposure": {
            "description": "Whether the asset is exposed to the internet (Yes, No or Pending).",
            "type": "string"
          },
          "internet_exposure_description": {
            "description": "The description the user entered when manually assigning a internet exposure level",
            "type": "string"
          },
          "internet_exposure_timestamp": {
            "description": "The date and time the internet exposure level was manually assigned",
            "type": "string"
          },
          "internet_exposure_username": {
            "description": "The username of the account that manually assigned the internet exposure level",
            "type": "string"
          },
          "kernel_version": {
            "description": "For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.",
            "type": "string"
          },
          "last_discoverer_aid": {
            "description": "The agent ID of the Falcon sensor installed on the source that most recently discovered the asset.",
            "type": "string"
          },
          "last_discoverer_hostname": {
            "description": "The hostname of the last source that discovered the asset.",
            "type": "string"
          },
          "last_discoverer_ics_collector_id": {
            "description": "The agent ID of the Falcon sensor installed on the source host that most recently discovered the asset via ICS Asset discovery mechanism",
            "type": "string"
          },
          "last_seen_timestamp": {
            "description": "The most recent time the asset was seen in your environment.",
            "type": "string"
          },
          "local_ip_addresses": {
            "description": "Historical local IPv4 addresses associated with the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local_ips_count": {
            "description": "The number of historical local IPv4 addresses the asset has had.",
            "format": "int32",
            "type": "integer"
          },
          "location": {
            "description": "The location of the asset.",
            "type": "string"
          },
          "logical_core_count": {
            "description": "The number of logical cores available on the system",
            "format": "int32",
            "type": "integer"
          },
          "mac_addresses": {
            "description": "Historical MAC addresses associated with the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "machine_domain": {
            "description": "The domain name the asset is currently joined to.",
            "type": "string"
          },
          "managed_by": {
            "description": "The first and last name of the person who manages this asset.",
            "type": "string"
          },
          "max_memory_usage": {
            "description": "The max memory usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "max_memory_usage_pct": {
            "description": "The max memory usage percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "max_processor_usage": {
            "description": "The max processor usage in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "memory_total": {
            "description": "The Total memory.",
            "format": "int64",
            "type": "integer"
          },
          "mount_storage_info": {
            "description": "The path, used and available space on mounted disks",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIMountStorageInfo"
            },
            "type": "array"
          },
          "network_id": {
            "description": "The network ID to which device is connected.",
            "type": "string"
          },
          "network_interfaces": {
            "description": "The asset's network interfaces (Cannot be used for filtering, sorting, or querying).",
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPINetworkInterface"
            },
            "type": "array"
          },
          "number_of_disk_drives": {
            "description": "The number of active physical drives available on the system.",
            "format": "int32",
            "type": "integer"
          },
          "object_guid": {
            "description": "The globally unique identifier (GUID) of the asset in Active Directory.",
            "type": "string"
          },
          "object_sid": {
            "description": "The security identifier (SID) of the asset in Active Directory.",
            "type": "string"
          },
          "os_is_eol": {
            "description": "Whether the asset is at end of support (Yes, No, or Unknown).",
            "type": "string"
          },
          "os_security": {
            "$ref": "#/components/schemas/domain.DiscoverAPIOsSecurity"
          },
          "os_service_pack": {
            "description": "The OS service pack on the asset.",
            "type": "string"
          },
          "os_version": {
            "description": "The OS version of the asset.",
            "type": "string"
          },
          "ot_information_sources": {
            "description": "A list of sources through which host is discovered",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ot_network_ids": {
            "description": "A list of network ids to which host belongs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ot_serial_numbers": {
            "description": "A list of ot serial numbers that discovered with host",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ou": {
            "description": "The organizational unit of the asset.",
            "type": "string"
          },
          "ous": {
            "description": "The organizational units of the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "override_asset_roles": {
            "description": "Whether a user overrode automatically assigned asset roles to manually assign a role to the asset (true or false).",
            "type": "boolean"
          },
          "override_criticality_rules": {
            "description": "Whether a user overrode a criticality rule to manually assign a criticality level on the asset (true or false).",
            "type": "boolean"
          },
          "override_internet_exposure": {
            "description": "Whether a user overrode the automatically assigned internet exposure (True or False).",
            "type": "boolean"
          },
          "owned_by": {
            "description": "The first and last name of the person who owns this asset.",
            "type": "string"
          },
          "physical_core_count": {
            "description": "The number of physical CPU cores available on the system.",
            "format": "int32",
            "type": "integer"
          },
          "platform_name": {
            "description": "The platform name of the asset (Windows, Mac, Linux).",
            "type": "string"
          },
          "processor_package_count": {
            "description": "The number of physical processors available on the system.",
            "format": "int32",
            "type": "integer"
          },
          "product_type": {
            "description": "The product type of the asset represented as a number (1 = Workstation, 2 = Domain Controller, 3 = Server).",
            "type": "string"
          },
          "product_type_desc": {
            "description": "The product type of the asset (Workstation, Domain Controller, Server).",
            "type": "string"
          },
          "protocols": {
            "description": "The list of protocols supported by the device",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "purdue_level": {
            "description": "The purdue level of IoT Asset",
            "type": "string"
          },
          "reduced_functionality_mode": {
            "description": "Whether the asset is in reduced functionality mode (Yes or No).",
            "type": "string"
          },
          "servicenow_id": {
            "description": "The unique identifier of the asset from ServiceNow, if any.",
            "type": "string"
          },
          "site_name": {
            "description": "The site name of the domain the asset is joined to (applies only to Windows hosts).",
            "type": "string"
          },
          "state": {
            "description": "The name of the U.S. state where the asset is located.",
            "type": "string"
          },
          "subnet": {
            "description": "The subnet to which device is connected.",
            "type": "string"
          },
          "system_manufacturer": {
            "description": "The asset's system manufacturer.",
            "type": "string"
          },
          "system_product_name": {
            "description": "The asset's system product name.",
            "type": "string"
          },
          "system_serial_number": {
            "description": "The asset's system serial number.",
            "type": "string"
          },
          "tags": {
            "description": "The sensor and cloud tags of the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "total_bios_files": {
            "description": "The count of bios files measured by the firmware image",
            "format": "int32",
            "type": "integer"
          },
          "total_disk_space": {
            "description": "Total amount of disk space available on the system",
            "format": "int32",
            "type": "integer"
          },
          "total_memory": {
            "description": "The total memory of the asset",
            "format": "int32",
            "type": "integer"
          },
          "triage": {
            "$ref": "#/components/schemas/domain.DiscoverAPIIoTHostTriage"
          },
          "unencrypted_drives": {
            "description": "The list of unencrypted drives on the host",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "unencrypted_drives_count": {
            "description": "The count of unencrypted drives on the host",
            "format": "int32",
            "type": "integer"
          },
          "used_disk_space": {
            "description": "The used disk space in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "used_disk_space_pct": {
            "description": "The used disk space percent in the last 15 minutes on the host",
            "format": "int32",
            "type": "integer"
          },
          "used_for": {
            "description": "What the asset is used for, such as production, staging, or QA.",
            "type": "string"
          },
          "user_asset_roles": {
            "description": "The asset role or roles manually assigned to the asset.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_internet_exposure": {
            "description": "The internet exposure manually assigned to the asset",
            "type": "string"
          },
          "virtual_zone": {
            "description": "The Virtual Zone name in which device is installed.",
            "type": "string"
          },
          "vlan": {
            "description": "The VLAN IDs to which device is connected.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "xdome_id": {
            "description": "The external ID of the IoT Device in 3rd Party System(Claroty Xdome)",
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "domain.DiscoverAPIIoTHostEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPIIoTHost"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIIoTHostTriage": {
        "properties": {
          "action": {
            "description": "The host triage action.",
            "type": "string"
          },
          "assigned_to": {
            "description": "The user assigned to triage the host.",
            "type": "string"
          },
          "description": {
            "description": "The host triage description.",
            "type": "string"
          },
          "status": {
            "description": "The host triage status.",
            "type": "string"
          },
          "updated_by": {
            "description": "The user who last triaged the host.'",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "The time at which the host was last triaged.",
            "type": "string"
          }
        }
      },
      "domain.DiscoverAPILogin": {
        "description": "Represents information about a successful or a failed login.",
        "properties": {
          "account_id": {
            "description": "The ID of the account that made the login.",
            "type": "string"
          },
          "account_name": {
            "description": "The name of the account that made the login (Domain\\Username or Hostname\\Username).",
            "type": "string"
          },
          "account_type": {
            "description": "The type of the account that made the login.",
            "type": "string"
          },
          "admin_privileges": {
            "description": "Whether the account that made the login has administrator privileges (Yes, No, or Unknown).",
            "type": "string"
          },
          "aggregation_time_interval": {
            "description": "A login represents an aggregation of login attempts made in a window of time (1-hour window for logins in the past day, or 24-hour window for logins older than a day).",
            "type": "string"
          },
          "aid": {
            "description": "The agent ID of the Falcon sensor installed on the asset where the login took place.",
            "type": "string"
          },
          "cid": {
            "description": "The customer ID where login took place.",
            "type": "string"
          },
          "failure_description": {
            "description": "The description of the reason why the login failed, if login_status=\"Failed\".\u003cul\u003e\u003cli\u003eThere are currently no login servers available to service the login request.\u003c/li\u003e\u003cli\u003eUser login with misspelled or bad user account\u003c/li\u003e\u003cli\u003eUser login with misspelled or bad password\u003c/li\u003e\u003cli\u003eThis is either due to a bad username or authentication information\u003c/li\u003e\u003cli\u003eUnknown user name or bad password.\u003c/li\u003e\u003cli\u003eUser login outside authorized hours\u003c/li\u003e\u003cli\u003eUser login from unauthorized workstation\u003c/li\u003e\u003cli\u003eUser login with expired password\u003c/li\u003e\u003cli\u003eUser login to account disabled by administrator\u003c/li\u003e\u003cli\u003eIndicates the Sam Server was in the wrong state to perform the desired operation.\u003c/li\u003e\u003cli\u003eClocks between DC and other computer too far out of sync\u003c/li\u003e\u003cli\u003eThe user has not been granted the requested login type (aka login right) at this machine\u003c/li\u003e\u003cli\u003eThe login request failed because the trust relationship between the primary domain and the trusted domain failed.\u003c/li\u003e\u003cli\u003eAn attempt was made to login, but the Netlogon service was not started.\u003c/li\u003e\u003cli\u003eUser login with expired account\u003c/li\u003e\u003cli\u003eUser is required to change password at next login\u003c/li\u003e\u003cli\u003eEvidently a bug in Windows and not a risk\u003c/li\u003e\u003cli\u003eUser login with account locked\u003c/li\u003e\u003cli\u003eFailure Reason: An Error occurred during Login\u003c/li\u003e\u003cli\u003eLogin Failure: The machine you are logging in to is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine.\u003c/li\u003e\u003cli\u003eStatus OK.\u003c/li\u003e\u003cli\u003eInvalid password entered\u003c/li\u003e\u003c/ul\u003e",
            "type": "string"
          },
          "host_city": {
            "description": "The name of the city where the asset is located where the login took place.",
            "type": "string"
          },
          "host_country": {
            "description": "The name of the country where the asset is located on which the login took place.",
            "type": "string"
          },
          "host_id": {
            "description": "The unique ID of the asset where the login took place.",
            "type": "string"
          },
          "hostname": {
            "description": "The hostname of the host where the login took place.",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the login.",
            "type": "string"
          },
          "is_suspicious": {
            "description": "Whether the failed login is considered suspicious based on criteria including login failures and locations (true or false).",
            "type": "boolean"
          },
          "local_admin_privileges": {
            "description": "Whether the account has local administrator privileges (Yes, No).",
            "type": "string"
          },
          "local_ip": {
            "description": "The external IP address of the asset where the login took place.",
            "type": "string"
          },
          "login_domain": {
            "description": "The domain of the asset where the login took place.",
            "type": "string"
          },
          "login_event_count": {
            "description": "Number of times a login attempt happened in the specified aggregation time interval for this login (1-hour window for logins in the past day, or 24-hour window for logins older than a day).",
            "format": "int64",
            "type": "integer"
          },
          "login_status": {
            "description": "The status of the login (Successful or Failed).",
            "type": "string"
          },
          "login_timestamp": {
            "description": "The date and time of the most recent attempt in the login.",
            "type": "string"
          },
          "login_type": {
            "description": "The type of the login.\n\nFor successful logins: \u003cul\u003e\u003cli\u003eInteractive\u003c/li\u003e\u003cli\u003eNetwork\u003c/li\u003e\u003cli\u003eService\u003c/li\u003e\u003cli\u003eRemote interactive\u003c/li\u003e\u003cli\u003eCached credentials\u003c/li\u003e\u003cli\u003eAuditing\u003c/li\u003e\u003c/ul\u003e\nFor failed logins: \u003cul\u003e\u003cli\u003eInteractive\u003c/li\u003e\u003cli\u003eNetwork\u003c/li\u003e\u003cli\u003eBatch\u003c/li\u003e\u003cli\u003eService\u003c/li\u003e\u003cli\u003eUnlock\u003c/li\u003e\u003cli\u003eNetwork cleartext\u003c/li\u003e\u003cli\u003eNew credentials\u003c/li\u003e\u003cli\u003eRemote Credentials\u003c/li\u003e\u003cli\u003eCached credentials\u003c/li\u003e\u003cli\u003eAuditing\u003c/li\u003e\u003c/ul\u003e",
            "type": "string"
          },
          "remote_ip": {
            "description": "The remote IP address where the login was initiated.",
            "type": "string"
          },
          "user_sid": {
            "description": "The security identifier of the account on a Windows asset that made the login.",
            "type": "string"
          },
          "username": {
            "description": "The username of the account that made the login.",
            "type": "string"
          }
        }
      },
      "domain.DiscoverAPILoginEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DiscoverAPILogin"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIMetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domain.DiscoverAPIPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "domain.DiscoverAPIMountStorageInfo": {
        "properties": {
          "available_space": {
            "description": "The available space of the mounted disk",
            "format": "int32",
            "type": "integer"
          },
          "mount_path": {
            "description": "The path of the mounted disk",
            "type": "string"
          },
          "used_space": {
            "description": "The used space of the mounted disk",
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "domain.DiscoverAPINetworkInterface": {
        "description": "The local IPv4 address or addresses of the network interface associated with the asset over time.",
        "properties": {
          "interface_alias": {
            "description": "The name or alias of the network interface associated with the asset.",
            "type": "string"
          },
          "interface_description": {
            "description": "The description of the network interface associated with the asset.",
            "type": "string"
          },
          "local_ip": {
            "description": "The local IPv4 address or addresses of the network interface associated with the asset over time",
            "type": "string"
          },
          "mac_address": {
            "description": "The MAC address of the network interface associated with the asset.",
            "type": "string"
          },
          "network_prefix": {
            "description": "The prefix or prefixes of the network over time, made of the first two bytes of the IP address.",
            "type": "string"
          }
        }
      },
      "domain.DiscoverAPIOsSecurity": {
        "properties": {
          "credential_guard_status": {
            "description": "The credential guard status of the host",
            "type": "boolean"
          },
          "device_guard_status": {
            "description": "The device guard status of the host",
            "type": "boolean"
          },
          "iommu_protection_status": {
            "description": "The iommu protection status of the host",
            "type": "string"
          },
          "kernel_dma_protection_status": {
            "description": "The kernel dma protection status of the host",
            "type": "boolean"
          },
          "secure_boot_enabled_status": {
            "description": "The secure boot enabled status of the host",
            "type": "boolean"
          },
          "secure_boot_requested_status": {
            "description": "The secure boot requested status of the host",
            "type": "boolean"
          },
          "secure_memory_overwrite_requested_status": {
            "description": "The secure memory overwrite requested status of the host",
            "type": "string"
          },
          "system_guard_status": {
            "description": "The system guard status of the host",
            "type": "string"
          },
          "uefi_memory_protection_status": {
            "description": "The uefi memory protection status of the host",
            "type": "string"
          },
          "virtualization_based_security_status": {
            "description": "The virtualization based security status of the host",
            "type": "boolean"
          }
        }
      },
      "domain.DiscoverAPIPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "after",
          "limit",
          "total"
        ]
      },
      "domain.DiscoverAPIResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.DiscoverAPIMetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.DiscoverAPIScanDetailsHost": {
        "properties": {
          "scan_date": {
            "description": "The date of the scan.",
            "type": "string"
          },
          "scan_id": {
            "description": "The unique identifier of the scan.",
            "type": "string"
          }
        }
      },
      "domain.DiscoverParams": {
        "properties": {
          "application_filters": {
            "type": "string"
          },
          "application_group_id": {
            "type": "string"
          },
          "application_vendors": {
            "type": "string"
          },
          "inline_app_filter": {
            "type": "string"
          },
          "requirement_criteria": {
            "type": "string"
          }
        },
        "required": [
          "application_filters",
          "application_group_id",
          "application_vendors",
          "inline_app_filter",
          "requirement_criteria"
        ]
      },
      "domain.Disposition": {
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "domain.DownloadItem": {
        "type": "object"
      },
      "domain.ECrimeKillChain": {
        "properties": {
          "attribution": {
            "description": "Free form text describing attribution of the ecrime actor",
            "type": "string"
          },
          "crimes": {
            "description": "Free form text describing actor's crimes",
            "type": "string"
          },
          "customers": {
            "description": "Free form text describing ecrime actor's customers and affiliates",
            "type": "string"
          },
          "exploitation": {
            "description": "Comma separated values of vulnerabilities by CVE codes that are exploited by actor",
            "type": "string"
          },
          "marketing": {
            "description": "Free form text describing ecrime actor's marketing campaigns and advertisement",
            "type": "string"
          },
          "monetization": {
            "description": "Legacy field, not used and empty",
            "type": "string"
          },
          "rich_text_attribution": {
            "description": "Rich text version of the attribution field",
            "type": "string"
          },
          "rich_text_crimes": {
            "description": "Rich text version of the crimes field",
            "type": "string"
          },
          "rich_text_customers": {
            "description": "Rich text version of the customers field",
            "type": "string"
          },
          "rich_text_exploitation": {
            "description": "Rich text version of the exploitation field",
            "type": "string"
          },
          "rich_text_marketing": {
            "description": "Rich text version of the marketing field",
            "type": "string"
          },
          "rich_text_monetization": {
            "description": "Legacy field, not used and empty",
            "type": "string"
          },
          "rich_text_services_offered": {
            "description": "Rich text version of the services_offered field",
            "type": "string"
          },
          "rich_text_services_used": {
            "description": "Rich text version of the services_used field",
            "type": "string"
          },
          "rich_text_technical_tradecraft": {
            "description": "Rich text version of the technical_tradecraft field",
            "type": "string"
          },
          "rich_text_victims": {
            "description": "Rich text version of the victims field",
            "type": "string"
          },
          "services_offered": {
            "description": "Free form text describing ecrime actor's services offered and monetized",
            "type": "string"
          },
          "services_used": {
            "description": "Free form text describing ecrime actor's used services provided by other actors or groups",
            "type": "string"
          },
          "technical_tradecraft": {
            "description": "Free form text describing methods and descriptions of techniques used by actor",
            "type": "string"
          },
          "victims": {
            "description": "Free form text describing victims or their characteristics of the ecrime actor",
            "type": "string"
          }
        }
      },
      "domain.EntitiesPatchRequest": {
        "properties": {
          "action": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.Entity": {
        "properties": {
          "id": {
            "description": "numerical id ensuring data integrity",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "name of the entity",
            "type": "string"
          },
          "slug": {
            "description": "search and url friendly value, usually lowercase representation of value with spaces replaced with dashes, except for countries where 2 letters codes are used",
            "type": "string"
          },
          "value": {
            "description": "string value of the generic entity which is searchable and filterable",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.EntityActionRequest": {
        "description": "Incident ID(s) for incidents upon which action(s) have to be performed.\nAction(s) to be performed on Incident(s).",
        "properties": {
          "action_parameters": {
            "description": "Collection of Action Parameter(s).",
            "items": {
              "$ref": "#/components/schemas/domain.ActionParameter"
            },
            "minimum": 1,
            "type": "array"
          },
          "ids": {
            "description": "Incident ID(s).",
            "items": {
              "type": "string"
            },
            "maximum": 5000,
            "minimum": 1,
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "domain.EnvironmentScore": {
        "properties": {
          "adjusted_score": {
            "format": "int32",
            "type": "integer"
          },
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "score": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "adjusted_score",
          "cid",
          "score",
          "timestamp"
        ]
      },
      "domain.ErrorsOnly": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "domain.Event": {
        "properties": {
          "body": {
            "description": "The raw body of the event",
            "type": "string"
          },
          "body_is_truncated": {
            "description": "By default, event bodies are truncated to 64kb and bodyIsTruncated is set to True. For event bodies larger than 64kb, call the /events-full-body endpoint with the respective eventId",
            "type": "boolean"
          },
          "body_link": {
            "description": "Link to the event, can be missing",
            "type": "string"
          },
          "botnet_config_source": {
            "$ref": "#/components/schemas/domain.BotnetConfigSource"
          },
          "created_date": {
            "description": "The date the event was created (in UTC format)",
            "type": "string"
          },
          "ddos_attack_source": {
            "$ref": "#/components/schemas/domain.DDOSAttackSource"
          },
          "event_type": {
            "description": "The type of event. One of `TweetEvent`, `CodePasteEvent`, `BotnetConfigEvent`, `DdosAttackEvent`",
            "type": "string"
          },
          "fingerprint": {
            "description": "The event's fingerprint",
            "type": "string"
          },
          "id": {
            "description": "The unique event ID",
            "type": "string"
          },
          "matched_rules": {
            "description": "List of objects with rules that matched the event",
            "items": {
              "$ref": "#/components/schemas/domain.MatchedRule"
            },
            "type": "array"
          },
          "pastebin_text_source": {
            "$ref": "#/components/schemas/domain.PastebinTextSource"
          },
          "tags": {
            "description": "A list of tags summarizing event content",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tweet_source": {
            "$ref": "#/components/schemas/domain.TweetSource"
          },
          "updated_date": {
            "description": "The date the event was last updated (in UTC format)",
            "type": "string"
          }
        },
        "required": [
          "body",
          "body_is_truncated",
          "created_date",
          "event_type",
          "fingerprint",
          "id",
          "updated_date"
        ]
      },
      "domain.EventEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Event"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.EventHistogram": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "has_detect": {
            "type": "boolean"
          },
          "has_overwatch": {
            "type": "boolean"
          },
          "has_prevented": {
            "type": "boolean"
          },
          "timestamp_max": {
            "format": "int64",
            "type": "integer"
          },
          "timestamp_min": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "count",
          "has_detect",
          "has_overwatch",
          "has_prevented",
          "timestamp_max",
          "timestamp_min"
        ]
      },
      "domain.ExecuteCommandRequestV1": {
        "properties": {
          "resources": {
            "description": "List of commands to execute",
            "items": {
              "$ref": "#/components/schemas/domain.ExecuteCommandV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.ExecuteCommandResultV1": {
        "properties": {
          "headers": {
            "description": "The response headers from the partner operation",
            "type": "object"
          },
          "id": {
            "description": "ID of the plugin that was executed in the format 'definition_id.operation_id'. Multi-instance plugins require a config_id as part of the id as well in the format 'definition_id.operation_id.config_id'.",
            "type": "string"
          },
          "parsed_headers": {
            "description": "The response headers from the partner operation",
            "type": "object"
          },
          "response_body": {
            "$ref": "#/components/schemas/domain.ExecuteCommandResultV1.response_body"
          },
          "status_code": {
            "description": "The response status code from the partner operation.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "status_code"
        ]
      },
      "domain.ExecuteCommandResultV1.response_body": {},
      "domain.ExecuteCommandResultsV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ExecuteCommandResultV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ExecuteCommandV1": {
        "properties": {
          "config_auth_type": {
            "description": "Config auth type for plugin to execute. Only applicable for oneOf security scheme plugins. If not provided, it will use the default auth type on the config",
            "type": "string"
          },
          "config_id": {
            "description": "ConfigID for plugin to execute. If omitted, the oldest config will be used as part of the execution.",
            "type": "string"
          },
          "definition_id": {
            "description": "ID of the definition containing the operation to execute.'",
            "type": "string"
          },
          "id": {
            "description": "ID of the specific plugin to execute, in the format 'definition_name.operation_name'",
            "type": "string"
          },
          "operation_id": {
            "description": "The specific operation to execute.",
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/domain.Request"
          },
          "skip_response_validation": {
            "description": "The flag indicates if we need to validate the response body with the response schema if it exist.",
            "type": "boolean"
          },
          "version": {
            "description": "The version of the definition to execute.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "config_auth_type",
          "config_id",
          "definition_id",
          "id",
          "operation_id",
          "request",
          "version"
        ]
      },
      "domain.ExecutionMetadataSummary": {
        "properties": {
          "report_params": {
            "$ref": "#/components/schemas/domain.ReportParams"
          },
          "subtype": {
            "type": "string"
          },
          "unscheduled_execution_type": {
            "type": "string"
          },
          "xdr_data": {
            "$ref": "#/components/schemas/domain.XDRData"
          },
          "xdr_params": {
            "$ref": "#/components/schemas/domain.XDRParams"
          }
        },
        "required": [
          "report_params",
          "subtype",
          "unscheduled_execution_type",
          "xdr_data",
          "xdr_params"
        ]
      },
      "domain.ExecutionMetadataV1": {
        "properties": {
          "report_params": {
            "$ref": "#/components/schemas/domain.ReportParams"
          },
          "retry_allowed": {
            "type": "boolean"
          },
          "retry_performed": {
            "type": "boolean"
          },
          "retry_report_execution_id": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "unscheduled_execution_type": {
            "type": "string"
          },
          "xdr_data": {
            "$ref": "#/components/schemas/domain.XDRData"
          },
          "xdr_params": {
            "$ref": "#/components/schemas/domain.XDRParams"
          }
        },
        "required": [
          "report_params",
          "retry_allowed",
          "retry_performed",
          "retry_report_execution_id",
          "subtype",
          "unscheduled_execution_type",
          "xdr_data",
          "xdr_params"
        ]
      },
      "domain.ExportJobEntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/reconmsa.APIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ExportJobMetadataV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ExportJobIDResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/reconmsa.APIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ExportJobMetadataV1": {
        "properties": {
          "entity": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "entity",
          "filename",
          "id",
          "status"
        ]
      },
      "domain.ExportJobV1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "domain.ExposedDataRecordBotLocationV1": {
        "properties": {
          "country": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          }
        },
        "required": [
          "country",
          "zip_code"
        ]
      },
      "domain.ExposedDataRecordBotOperatingSystemV1": {
        "properties": {
          "antivirus": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "computer_name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "hardware_id": {
            "type": "string"
          },
          "installed_software": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "language": {
            "type": "string"
          },
          "layouts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "os_architecture": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "uac": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "antivirus",
          "computer_name",
          "domain",
          "hardware_id",
          "installed_software",
          "language",
          "layouts",
          "os_architecture",
          "os_version",
          "timezone",
          "uac",
          "username"
        ]
      },
      "domain.ExposedDataRecordBotV1": {
        "properties": {
          "bot_id": {
            "type": "string"
          },
          "domain_detects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "infection_build_id": {
            "type": "string"
          },
          "infection_date": {
            "format": "date-time",
            "type": "string"
          },
          "infection_path": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/domain.ExposedDataRecordBotLocationV1"
          },
          "operating_system": {
            "$ref": "#/components/schemas/domain.ExposedDataRecordBotOperatingSystemV1"
          }
        },
        "required": [
          "bot_id",
          "domain_detects",
          "infection_build_id",
          "infection_date",
          "infection_path",
          "location",
          "operating_system"
        ]
      },
      "domain.ExposedDataRecordFinancialV1": {
        "properties": {
          "bank_account": {
            "type": "string"
          },
          "credit_card": {
            "type": "string"
          },
          "crypto_currency_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "bank_account",
          "credit_card",
          "crypto_currency_addresses"
        ]
      },
      "domain.ExposedDataRecordLocationV1": {
        "properties": {
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "federal_admin_region": {
            "type": "string"
          },
          "federal_district": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "city",
          "country_code",
          "federal_admin_region",
          "federal_district",
          "postal_code",
          "state"
        ]
      },
      "domain.ExposedDataRecordSocialV1": {
        "properties": {
          "aim_id": {
            "type": "string"
          },
          "facebook_id": {
            "type": "string"
          },
          "icq_id": {
            "type": "string"
          },
          "instagram_id": {
            "type": "string"
          },
          "msn_id": {
            "type": "string"
          },
          "skype_id": {
            "type": "string"
          },
          "twitter_id": {
            "type": "string"
          },
          "vk_id": {
            "type": "string"
          },
          "vk_token": {
            "type": "string"
          }
        },
        "required": [
          "aim_id",
          "facebook_id",
          "icq_id",
          "instagram_id",
          "msn_id",
          "skype_id",
          "twitter_id",
          "vk_id",
          "vk_token"
        ]
      },
      "domain.ExternalAPIRegistry": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "credential": {
            "$ref": "#/components/schemas/domain.ExternalCredentialResponse"
          },
          "id": {
            "type": "string"
          },
          "last_refreshed_at": {
            "type": "string"
          },
          "next_refresh_at": {
            "type": "string"
          },
          "refresh_interval": {
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "state_changed_at": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "url_uniqueness_alias": {
            "type": "string"
          },
          "user_defined_alias": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "last_refreshed_at",
          "next_refresh_at",
          "refresh_interval",
          "state",
          "state_changed_at",
          "type",
          "updated_at",
          "url",
          "url_uniqueness_alias",
          "user_defined_alias"
        ]
      },
      "domain.ExternalAssetAPIDeleteRequestV1": {
        "properties": {
          "description": {
            "description": "Some description that the user attached to the delete",
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetAPIPatchRequestV1": {
        "description": "Represents the payload for patching multiple assets.",
        "properties": {
          "assets": {
            "description": "List of asset patches",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetsAPIPatch"
            },
            "type": "array"
          }
        },
        "required": [
          "assets"
        ]
      },
      "domain.ExternalAssetApplication": {
        "properties": {
          "category": {
            "type": "string"
          },
          "cpe": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetCertificate": {
        "properties": {
          "ciphers": {
            "items": {
              "$ref": "#/components/schemas/string"
            },
            "type": "array"
          },
          "fingerprint_sha256": {
            "type": "string"
          },
          "issuer": {
            "$ref": "#/components/schemas/domain.ExternalAssetCertificateEntityIdentifiers"
          },
          "pubkey_bits": {
            "format": "integer",
            "type": "integer"
          },
          "pubkey_type": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "signature_algorithm": {
            "type": "string"
          },
          "subject": {
            "$ref": "#/components/schemas/domain.ExternalAssetCertificateEntityIdentifiers"
          },
          "valid_from": {
            "format": "date-time",
            "type": "string"
          },
          "valid_to": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetCertificateEntityIdentifiers": {
        "properties": {
          "common_name": {
            "type": "string"
          },
          "country_name": {
            "type": "string"
          },
          "dn_qualifier": {
            "type": "string"
          },
          "domain_component": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "generation_qualifier": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "locality_name": {
            "type": "string"
          },
          "organization_name": {
            "type": "string"
          },
          "organizational_unit": {
            "type": "string"
          },
          "pseudonym": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "state_or_province_name": {
            "type": "string"
          },
          "street_address": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetCloudVM": {
        "properties": {
          "description": {
            "description": "The VM description",
            "type": "string"
          },
          "instance_id": {
            "description": "The ID of the cloud VM",
            "type": "string"
          },
          "lifecycle": {
            "description": "The lifecycle phase",
            "type": "string"
          },
          "mac_address": {
            "description": "MAC address of the VM",
            "type": "string"
          },
          "owner_id": {
            "description": "VM owner ID",
            "type": "string"
          },
          "platform": {
            "description": "VM platform information",
            "type": "string"
          },
          "private_ip": {
            "description": "VM private IP address",
            "type": "string"
          },
          "public_ip": {
            "description": "VM public IP address",
            "type": "string"
          },
          "region": {
            "description": "The cloud region",
            "type": "string"
          },
          "security_groups": {
            "description": "Security groups",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source": {
            "description": "The VM source image",
            "type": "string"
          },
          "status": {
            "description": "Connectivity status of the cloud VM",
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetDiscoveryAttributes": {
        "properties": {
          "alternative_paths": {
            "description": "Alternative discovery paths",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetDiscoveryPathAttributes"
            },
            "type": "array"
          },
          "path": {
            "$ref": "#/components/schemas/domain.ExternalAssetDiscoveryPathAttributes"
          }
        },
        "required": [
          "path"
        ]
      },
      "domain.ExternalAssetDiscoveryPathAttributes": {
        "properties": {
          "steps": {
            "description": "The list of steps in the current discovery path",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetDiscoveryStepAttributes"
            },
            "type": "array"
          }
        }
      },
      "domain.ExternalAssetDiscoveryStepAttributes": {
        "properties": {
          "clue": {
            "description": "The reasoning behind this association",
            "type": "string"
          },
          "entity": {
            "description": "The step entity",
            "type": "string"
          },
          "entity_type": {
            "description": "The entity type of the described entity",
            "type": "string"
          },
          "id": {
            "description": "The discovery step identifier",
            "type": "string"
          },
          "redirect_path": {
            "description": "The redirect path",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetRedirectStepAttributes"
            },
            "type": "array"
          }
        },
        "required": [
          "clue",
          "entity",
          "entity_type"
        ]
      },
      "domain.ExternalAssetGeographicalLocation": {
        "properties": {
          "area_code": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "country_name": {
            "type": "string"
          },
          "geo_point": {
            "$ref": "#/components/schemas/domain.GeoPoint"
          },
          "postal_code": {
            "type": "string"
          },
          "region_code": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetHTTPAttributes": {
        "properties": {
          "cookies": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "response_headers": {
            "type": "string"
          },
          "technologies": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "response_headers"
        ]
      },
      "domain.ExternalAssetRedirectStepAttributes": {
        "properties": {
          "clue": {
            "description": "Clue to how the entity was discovered",
            "type": "string"
          },
          "entity": {
            "description": "The value of the entity being presented",
            "type": "string"
          },
          "entity_type": {
            "description": "The entity type of the described entity",
            "type": "string"
          },
          "id": {
            "description": "The discovery redirect step identifier, can be omitted",
            "type": "string"
          }
        },
        "required": [
          "clue",
          "entity",
          "entity_type"
        ]
      },
      "domain.ExternalAssetSSLRecord": {
        "properties": {
          "alpn": {
            "type": "string"
          },
          "alternative_name": {
            "type": "string"
          },
          "certificate": {
            "$ref": "#/components/schemas/domain.ExternalAssetCertificate"
          },
          "cipher_suites": {
            "items": {
              "$ref": "#/components/schemas/domain.Cipher"
            },
            "type": "array"
          },
          "ja3s": {
            "type": "string"
          },
          "jarm": {
            "type": "string"
          },
          "supported_versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetService": {
        "properties": {
          "applications": {
            "description": "Details about the applications associated to the service",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetApplication"
            },
            "type": "array"
          },
          "blob_links": {
            "$ref": "#/components/schemas/domain.ExternalAssetServiceBlobsLinks"
          },
          "cloud_provider": {
            "description": "The cloud provider name",
            "type": "string"
          },
          "cpes": {
            "description": "A list of Common Platform Enumeration identifiers for this service. The schema format is: cpe:\u003ccpe_version\u003e:\u003cpart\u003e:\u003cvendor\u003e:\u003cproduct\u003e:\u003cversion\u003e:\u003cupdate\u003e:\u003cedition\u003e:\u003clanguage\u003e:\u003csw_edition\u003e:\u003ctarget_sw\u003e:\u003ctarget_hw\u003e:\u003cother\u003e",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "first_seen": {
            "description": "The first time this service was observed",
            "format": "date-time",
            "type": "string"
          },
          "hosting_provider": {
            "description": "The hosting provider name",
            "type": "string"
          },
          "http_attributes": {
            "$ref": "#/components/schemas/domain.ExternalAssetHTTPAttributes"
          },
          "id": {
            "description": "The unique external asset identifier",
            "type": "string"
          },
          "last_seen": {
            "description": "The date on which this was last scanned",
            "format": "date-time",
            "type": "string"
          },
          "os": {
            "description": "The operating system the service is running on",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform on which the service is running (Windows, Mac, Linux).",
            "type": "string"
          },
          "port": {
            "description": "The port on which the service is accessible",
            "format": "int32",
            "type": "integer"
          },
          "protocol": {
            "description": "The protocol used to access this service",
            "type": "string"
          },
          "status": {
            "description": "The availability status for this service",
            "type": "string"
          },
          "status_code": {
            "description": "The status code returned by the service",
            "format": "int32",
            "type": "integer"
          },
          "subsidiaries": {
            "description": "List of subsidiaries that the asset belongs to",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetSubsidiary"
            },
            "type": "array"
          },
          "tls": {
            "$ref": "#/components/schemas/domain.ExternalAssetSSLRecord"
          },
          "transport": {
            "description": "The network transport used to access this service",
            "type": "string"
          }
        },
        "required": [
          "id",
          "last_seen",
          "port",
          "protocol",
          "status",
          "status_code",
          "transport"
        ]
      },
      "domain.ExternalAssetServiceBlobsLinks": {
        "properties": {
          "download_attributes": {
            "type": "string"
          },
          "download_banner": {
            "type": "string"
          },
          "preview_attributes": {
            "type": "string"
          },
          "preview_banner": {
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetSubsidiary": {
        "properties": {
          "id": {
            "description": "ExternalAssetSubsidiary ID",
            "type": "string"
          },
          "name": {
            "description": "ExternalAssetSubsidiary name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domain.ExternalAssetsAPIPatch": {
        "description": "Represents information about a managed, an unmanaged or an unsupported asset.",
        "properties": {
          "cid": {
            "description": "The asset's customer ID.",
            "type": "string"
          },
          "criticality": {
            "description": "The criticality level manually assigned to this asset.",
            "type": "string"
          },
          "criticality_description": {
            "description": "The criticality description manually assigned to this asset.",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the asset.",
            "type": "string"
          },
          "triage": {
            "$ref": "#/components/schemas/domain.ExternalAssetsAPITriagePatch"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.ExternalAssetsAPITriage": {
        "properties": {
          "action": {
            "description": "The asset triage action.",
            "type": "string"
          },
          "assigned_to": {
            "description": "The asset assigned to triage the host.",
            "type": "string"
          },
          "description": {
            "description": "The asset triage description.",
            "type": "string"
          },
          "status": {
            "description": "The asset triage status.",
            "type": "string"
          },
          "updated_by": {
            "description": "The user who last triaged the asset.'",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "The time at which the asset was last triaged.",
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetsAPITriagePatch": {
        "properties": {
          "action": {
            "description": "The asset triage action.",
            "type": "string"
          },
          "assigned_to": {
            "description": "The user assigned to triage the asset.",
            "type": "string"
          },
          "description": {
            "description": "The asset triage description.",
            "type": "string"
          },
          "status": {
            "description": "The asset triage status.",
            "type": "string"
          }
        }
      },
      "domain.ExternalAssetsAPITypeV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.FemExternalAsset"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.ExternalAssetsBlobAPITypeV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.ExternalCredentialResponse": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/domain.ExternalCredentialResponse.details"
          },
          "expired": {
            "type": "boolean"
          },
          "expired_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "details",
          "expired",
          "expired_at",
          "id",
          "updated_at"
        ]
      },
      "domain.ExternalCredentialResponse.details": {
        "type": "object"
      },
      "domain.ExternalExportJob": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "resource": {
            "description": "Resource to be exported",
            "type": "string"
          },
          "retries": {
            "description": "Number of times the job was retried",
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "description": "Current status of the job. One of [READY, WAITING, IN_PROGRESS, DONE, FAILED, WAITING_FOR_RETRY, CANCELED, RESULT_DELETED]",
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "resource",
          "retries",
          "status",
          "updated_at"
        ]
      },
      "domain.ExternalQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta"
        ]
      },
      "domain.ExternalRegistryListResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAPIRegistry"
            },
            "type": "array"
          }
        },
        "required": [
          "meta"
        ]
      },
      "domain.ExternalRegistryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/domain.ExternalAPIRegistry"
          }
        },
        "required": [
          "meta"
        ]
      },
      "domain.FeaturePermission": {
        "properties": {
          "feature": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/domain.Permission"
            },
            "type": "array"
          }
        },
        "required": [
          "feature",
          "permissions"
        ]
      },
      "domain.FeatureStatus": {
        "properties": {
          "feature": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "feature",
          "status"
        ]
      },
      "domain.FemDNSDomain": {
        "properties": {
          "fqdn": {
            "description": "The FQDN",
            "type": "string"
          },
          "isps": {
            "description": "The ISPs hosting this domain",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent_domain": {
            "description": "The ID of the parent domain (only populated if domain type is subdomain)",
            "type": "string"
          },
          "resolved_ips": {
            "description": "IPs the domain resolved to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "services": {
            "description": "A list of exposed services on the domain",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetService"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of domain (root, subdomain)",
            "type": "string"
          }
        },
        "required": [
          "fqdn",
          "type"
        ]
      },
      "domain.FemEcosystemSubsidiariesEntitiesResponse": {
        "properties": {
          "FemEcosystemSubsidiariesResponseFields": {
            "$ref": "#/components/schemas/domain.FemEcosystemSubsidiariesResponseFields"
          },
          "resources": {
            "description": "Contains entities returned by the API",
            "items": {
              "$ref": "#/components/schemas/domain.FemEcosystemSubsidiary"
            },
            "type": "array"
          }
        },
        "required": [
          "FemEcosystemSubsidiariesResponseFields",
          "resources"
        ]
      },
      "domain.FemEcosystemSubsidiariesMeta": {
        "properties": {
          "MetaInfo": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "version_id": {
            "description": "The version ID of an ecosystem",
            "type": "string"
          }
        },
        "required": [
          "MetaInfo",
          "version_id"
        ]
      },
      "domain.FemEcosystemSubsidiariesQueryResponse": {
        "properties": {
          "FemEcosystemSubsidiariesResponseFields": {
            "$ref": "#/components/schemas/domain.FemEcosystemSubsidiariesResponseFields"
          },
          "resources": {
            "description": "Contains entities returned by the API",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "FemEcosystemSubsidiariesResponseFields",
          "resources"
        ]
      },
      "domain.FemEcosystemSubsidiariesResponseFields": {
        "properties": {
          "errors": {
            "description": "Array of errors returned in case of request issues or processing failures",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.FemEcosystemSubsidiariesMeta"
          }
        },
        "required": [
          "meta"
        ]
      },
      "domain.FemEcosystemSubsidiary": {
        "properties": {
          "asset_count": {
            "description": "The number of assets associated with the subsidiary",
            "format": "int32",
            "type": "integer"
          },
          "children_count": {
            "description": "The number of subsidiary children",
            "format": "int32",
            "type": "integer"
          },
          "cid": {
            "description": "The customer ID",
            "type": "string"
          },
          "discovery": {
            "$ref": "#/components/schemas/domain.ExternalAssetDiscoveryAttributes"
          },
          "id": {
            "description": "The ID of the subsidiary",
            "type": "string"
          },
          "name": {
            "description": "The name of the subsidiary",
            "type": "string"
          },
          "parent_id": {
            "description": "The ID of the parent subsidiary",
            "type": "string"
          },
          "primary_domain": {
            "description": "The primary domain of the subsidiary (Originally was called apex_domain)",
            "type": "string"
          },
          "risk_score": {
            "description": "The risk score of the subsidiary",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "children_count",
          "cid",
          "id",
          "name",
          "parent_id",
          "primary_domain"
        ]
      },
      "domain.FemExternalAsset": {
        "properties": {
          "applicable_actions": {
            "description": "Lists the user actions can be taken on this asset (triage, delete, etc)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "asset_type": {
            "description": "The type of external asset (ip, dns_domain)",
            "type": "string"
          },
          "cid": {
            "description": "The customer ID",
            "type": "string"
          },
          "confidence": {
            "description": "Confidence level for the asset association to the organization",
            "format": "int32",
            "type": "integer"
          },
          "criticality": {
            "description": "The criticality level of the asset (Critical, High, Noncritical, or Unassigned)",
            "type": "string"
          },
          "criticality_description": {
            "description": "The description the user entered when manually assigning a criticality level",
            "type": "string"
          },
          "criticality_timestamp": {
            "description": "The date and time the criticality level was manually assigned",
            "type": "string"
          },
          "criticality_username": {
            "description": "The username of the account that manually assigned the criticality level",
            "type": "string"
          },
          "data_providers": {
            "description": "A list of the source providers for the asset information",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discovered_by": {
            "description": "The identifier of the asset",
            "type": "string"
          },
          "discovery": {
            "$ref": "#/components/schemas/domain.ExternalAssetDiscoveryAttributes"
          },
          "dns_domain": {
            "$ref": "#/components/schemas/domain.FemDNSDomain"
          },
          "entity_type": {
            "description": "this is similar with the entity_type field from DiscoverAPIHost; it will be always 'external' and it aligns this structure with other assets structures, making UI handling of assets more generic",
            "type": "string"
          },
          "first_seen": {
            "description": "The first time this asset has been observed as externally exposed",
            "type": "string"
          },
          "id": {
            "description": "The unique external asset identifier",
            "type": "string"
          },
          "internet_exposure": {
            "description": "The internet exposure status of the asset",
            "type": "string"
          },
          "ip": {
            "$ref": "#/components/schemas/domain.FemExternalIP"
          },
          "last_seen": {
            "description": "The last time this asset has been observed as externally exposed",
            "type": "string"
          },
          "manual": {
            "description": "Flag indicating if the asset has been manually added",
            "type": "boolean"
          },
          "perimeter": {
            "description": "Perimeter of this asset (Official/Unofficial)",
            "type": "string"
          },
          "status": {
            "description": "The availability status for the asset",
            "type": "string"
          },
          "subsidiaries": {
            "description": "List of subsidiaries that the asset belongs to",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetSubsidiary"
            },
            "type": "array"
          },
          "triage": {
            "$ref": "#/components/schemas/domain.ExternalAssetsAPITriage"
          }
        },
        "required": [
          "applicable_actions",
          "asset_type",
          "cid",
          "confidence",
          "data_providers",
          "entity_type",
          "id",
          "status"
        ]
      },
      "domain.FemExternalIP": {
        "properties": {
          "aid": {
            "description": "AID if available",
            "type": "string"
          },
          "asn": {
            "description": "ASN",
            "format": "int32",
            "type": "integer"
          },
          "cloud_provider": {
            "description": "Cloud Provider",
            "type": "string"
          },
          "cloud_vm": {
            "$ref": "#/components/schemas/domain.ExternalAssetCloudVM"
          },
          "fqdns": {
            "description": "The FQDN List of the related domains",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ip_address": {
            "description": "The IP address",
            "type": "string"
          },
          "isp": {
            "description": "The ISP",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/domain.ExternalAssetGeographicalLocation"
          },
          "ptr": {
            "description": "The PTR record",
            "type": "string"
          },
          "services": {
            "description": "A list of exposed services on the IP",
            "items": {
              "$ref": "#/components/schemas/domain.ExternalAssetService"
            },
            "type": "array"
          }
        }
      },
      "domain.Field": {
        "properties": {
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/domain.ValueItem"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "name",
          "options",
          "type"
        ]
      },
      "domain.FieldValidation": {
        "properties": {
          "bytes": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "matches_test": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "test_data": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "bytes",
          "name",
          "valid",
          "value"
        ]
      },
      "domain.FieldValue": {
        "properties": {
          "final_value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/domain.ValueItem"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "type",
          "value",
          "values"
        ]
      },
      "domain.File": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "domain.FileCount": {
        "properties": {
          "malicious": {
            "format": "int32",
            "type": "integer"
          },
          "quarantined": {
            "format": "int32",
            "type": "integer"
          },
          "scanned": {
            "format": "int32",
            "type": "integer"
          },
          "skipped": {
            "format": "int32",
            "type": "integer"
          },
          "traversed": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "domain.FileCountV2": {
        "properties": {
          "malicious": {
            "format": "int32",
            "type": "integer"
          },
          "quarantined": {
            "format": "int32",
            "type": "integer"
          },
          "scanned": {
            "format": "int32",
            "type": "integer"
          },
          "skipped": {
            "format": "int32",
            "type": "integer"
          },
          "traversed": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "malicious",
          "quarantined",
          "scanned",
          "skipped",
          "traversed"
        ]
      },
      "domain.FileDetailsV1": {
        "properties": {
          "complete_data_set": {
            "description": "(Boolean) If it's a complete dataset or not.",
            "type": "boolean"
          },
          "download_urls": {
            "description": "A list of download urls for this file.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the file containing the exposed record(s).",
            "type": "string"
          },
          "size": {
            "description": "The size of the file.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "download_urls",
          "name",
          "size"
        ]
      },
      "domain.FileV2": {
        "properties": {
          "cloud_request_id": {
            "type": "string"
          },
          "complete": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "progress": {
            "format": "float",
            "type": "number"
          },
          "session_id": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "size": {
            "format": "integer",
            "type": "integer"
          },
          "stage": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "cloud_request_id",
          "complete",
          "created_at",
          "deleted_at",
          "error_message",
          "id",
          "name",
          "progress",
          "session_id",
          "sha256",
          "size",
          "stage",
          "status",
          "updated_at"
        ]
      },
      "domain.FragmentInfo": {
        "properties": {
          "content_offset": {
            "description": "Offset of the content field from the start of data, in characters",
            "format": "int64",
            "type": "integer"
          },
          "count": {
            "description": "Total number of fragments for this group",
            "format": "int64",
            "type": "integer"
          },
          "fragmented_fields": {
            "description": " List of fields that have been split, such as: content, iocs, translated_content, ...",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_id": {
            "description": "HEX string, similar to stream_id, ties all fragments together",
            "type": "string"
          },
          "index": {
            "description": "Zero-based index of fragment in the group",
            "format": "int64",
            "type": "integer"
          },
          "translated_content_offset": {
            "description": "Offset of the translated_content field from the start of data, in characters",
            "format": "int64",
            "type": "integer"
          },
          "truncated_fields": {
            "description": "List of fields that have been truncated or deleted",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.GCPAccountV1": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_scopes": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudScope"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "cspm_enabled": {
            "type": "boolean"
          },
          "display_name": {
            "description": "GCP Display Name",
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "folder_id": {
            "description": "GCP folder ID",
            "type": "string"
          },
          "folder_name": {
            "description": "GCP folder Name",
            "type": "string"
          },
          "gcp_permissions_status": {
            "description": "Permissions status returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.Permission"
            },
            "type": "array"
          },
          "organization_id": {
            "description": "GCP organization ID",
            "type": "string"
          },
          "organization_name": {
            "description": "GCP organization name",
            "type": "string"
          },
          "parent_id": {
            "description": "GCP Account ID for organization/folder/projects.",
            "type": "string"
          },
          "parent_type": {
            "description": "GCP Parent Type.",
            "type": "string"
          },
          "project_id": {
            "description": "GCP Project ID",
            "type": "string"
          },
          "service_account_client_email": {
            "type": "string"
          },
          "service_account_client_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "description": "GCP service account ID",
            "format": "integer",
            "type": "integer"
          },
          "service_account_private_key_id": {
            "type": "string"
          },
          "service_account_project_id": {
            "type": "string"
          },
          "status": {
            "description": "Account registration status.",
            "type": "string"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt",
          "cid",
          "cspm_enabled",
          "gcp_permissions_status",
          "parent_id",
          "service_account_project_id"
        ]
      },
      "domain.GeoPoint": {
        "properties": {
          "lat": {
            "format": "double",
            "type": "number"
          },
          "lon": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "domain.Host": {
        "properties": {
          "cloud_ioas": {
            "$ref": "#/components/schemas/domain.IOACounts"
          },
          "cloud_ioms": {
            "$ref": "#/components/schemas/domain.IOMCounts"
          },
          "configuration_assessments": {
            "$ref": "#/components/schemas/domain.SCAMisconfigsCounts"
          },
          "entityPK": {
            "type": "string"
          },
          "extra_info": {
            "$ref": "#/components/schemas/domain.XLR8Info"
          },
          "id": {
            "type": "string"
          },
          "total_count": {
            "format": "double",
            "type": "number"
          },
          "vulnerabilities": {
            "$ref": "#/components/schemas/domain.VulnerabilitiesCount"
          }
        },
        "required": [
          "id",
          "total_count"
        ]
      },
      "domain.IOACounts": {
        "properties": {
          "critical": {
            "format": "double",
            "type": "number"
          },
          "high": {
            "format": "double",
            "type": "number"
          },
          "informational": {
            "format": "double",
            "type": "number"
          },
          "low": {
            "format": "double",
            "type": "number"
          },
          "medium": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "critical",
          "high"
        ]
      },
      "domain.IOC": {
        "properties": {
          "at_accounts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aws_clis": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aws_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aws_secrets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bitcoin_address": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cves": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discord_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "email_domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "emails": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "emails_local_part": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ethereum_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "generic_apis": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "github_apis": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "google_apis": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hashtags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "i2p_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "icq_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ips": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "magnet_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "md5s": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "monero_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "onion_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "paste_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "phone_numbers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "s3_buckets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sha1s": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sha256s": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sha512s": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "skype_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "slack_apis": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sqs_queues": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "telegram_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "torrent_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "whatsapp_urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.IOMCounts": {
        "properties": {
          "critical": {
            "format": "double",
            "type": "number"
          },
          "high": {
            "format": "double",
            "type": "number"
          },
          "informational": {
            "format": "double",
            "type": "number"
          },
          "low": {
            "format": "double",
            "type": "number"
          },
          "medium": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "critical",
          "high"
        ]
      },
      "domain.Image": {
        "properties": {
          "height": {
            "format": "int32",
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "width": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "url"
        ]
      },
      "domain.Incident": {
        "properties": {
          "assigned_to": {
            "type": "string"
          },
          "assigned_to_name": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email_state": {
            "type": "string"
          },
          "end": {
            "format": "date-time",
            "type": "string"
          },
          "events_histogram": {
            "items": {
              "$ref": "#/components/schemas/domain.EventHistogram"
            },
            "type": "array"
          },
          "fine_score": {
            "format": "int32",
            "type": "integer"
          },
          "grouping_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "$ref": "#/components/schemas/detects.DeviceDetailIndexed"
            },
            "type": "array"
          },
          "incident_id": {
            "type": "string"
          },
          "incident_type": {
            "format": "integer",
            "type": "integer"
          },
          "lm_host_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lm_hosts_capped": {
            "type": "boolean"
          },
          "lm_types": {
            "format": "integer",
            "type": "integer"
          },
          "lmra_host_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lmra_hosts_capped": {
            "type": "boolean"
          },
          "modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "objectives": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "start": {
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "tactics": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "techniques": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "created",
          "end",
          "fine_score",
          "host_ids",
          "incident_id",
          "start",
          "state"
        ]
      },
      "domain.IncidentID": {},
      "domain.InitRequest": {
        "properties": {
          "device_id": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "queue_offline": {
            "type": "boolean"
          }
        },
        "required": [
          "device_id",
          "origin",
          "queue_offline"
        ]
      },
      "domain.InitResponse": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "existing_aid_sessions": {
            "format": "int32",
            "type": "integer"
          },
          "offline_queued": {
            "type": "boolean"
          },
          "platform": {
            "type": "string"
          },
          "previous_commands": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pwd": {
            "type": "string"
          },
          "scripts": {
            "items": {
              "$ref": "#/components/schemas/domain.ScriptHelp"
            },
            "type": "array"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "existing_aid_sessions",
          "offline_queued",
          "scripts",
          "session_id"
        ]
      },
      "domain.InitResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.InitResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ItemDetailsV1": {
        "properties": {
          "actor_slug": {
            "description": "The threat actor associated with a raw intelligence item, if available.",
            "type": "string"
          },
          "attachments": {
            "description": "Attachments items linked to the raw intelligence item",
            "items": {
              "$ref": "#/components/schemas/domain.Attachment"
            },
            "type": "array"
          },
          "author": {
            "description": "The author’s username of a raw intelligence item",
            "type": "string"
          },
          "author_id": {
            "description": "The raw intelligence item author identifier in our system",
            "type": "string"
          },
          "category": {
            "description": "The type of source where the raw intelligence item was found",
            "type": "string"
          },
          "collection_date": {
            "description": "The date and time the raw intelligence item was scraped from the original source",
            "format": "date-time",
            "type": "string"
          },
          "content": {
            "description": "Highlighted content based on the monitoring rule that generated the notification. Highlights are surrounded with a `\u003ccs-highlight\u003e` tag",
            "type": "string"
          },
          "created_date": {
            "description": "The date and time when the raw intelligence item was created",
            "format": "date-time",
            "type": "string"
          },
          "file_type": {
            "description": "The file type of the raw intelligence item, if available",
            "type": "string"
          },
          "fragment_info": {
            "$ref": "#/components/schemas/domain.FragmentInfo"
          },
          "full_content_url": {
            "description": "The URL to download the full raw text content of the raw intelligence item. It has a limited time to live",
            "type": "string"
          },
          "ioc_types": {
            "description": "The types of IOCs found in the raw intelligence item. List of keys populated in the iocs field",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "iocs": {
            "$ref": "#/components/schemas/domain.IOC"
          },
          "labels": {
            "description": "Labels for the type of information included in a raw intelligence item",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "language": {
            "description": "The language of the raw intelligence item",
            "type": "string"
          },
          "marketplace_product": {
            "$ref": "#/components/schemas/domain.MarketplaceProduct"
          },
          "mime_type": {
            "description": "The mime type of the file",
            "type": "string"
          },
          "sha256": {
            "description": "The SHA256 hash for the file",
            "type": "string"
          },
          "site": {
            "description": "The site where the raw intelligence item was found",
            "type": "string"
          },
          "site_id": {
            "description": "The ID of the site where the raw intelligence item was found",
            "type": "string"
          },
          "size": {
            "description": "The size of the item's content in bytes, if available",
            "format": "int64",
            "type": "integer"
          },
          "telegram_info": {
            "$ref": "#/components/schemas/domain.TelegramInfo"
          },
          "thread_id": {
            "description": "Identifier that groups all raw intelligence items belonging to the same conversation thread",
            "type": "string"
          },
          "title": {
            "description": "The title of the raw intelligence item",
            "type": "string"
          },
          "type": {
            "description": "The type of the raw intelligence item",
            "type": "string"
          },
          "updated_date": {
            "description": "The date and time when the raw intelligence item was updated",
            "format": "date-time",
            "type": "string"
          },
          "url": {
            "description": "The URL of the raw intelligence item",
            "type": "string"
          },
          "user_id": {
            "description": "The raw intelligence item author identifier in the original source",
            "type": "string"
          }
        },
        "required": [
          "category",
          "content",
          "created_date",
          "site_id",
          "type",
          "updated_date"
        ]
      },
      "domain.KestrelParams": {
        "properties": {
          "view_id": {
            "type": "string"
          }
        },
        "required": [
          "view_id"
        ]
      },
      "domain.KeyValuePair": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "domain.KillChain": {
        "properties": {
          "actions_and_objectives": {
            "description": "Free form text describing actions and objectives of the actor",
            "type": "string"
          },
          "command_and_control": {
            "description": "Free form text describing methods and tools used to communicate with and control an infected machine or network",
            "type": "string"
          },
          "delivery": {
            "description": "Free form text describing malware delivery by actor",
            "type": "string"
          },
          "exploitation": {
            "description": "Comma separated values of vulnerabilities by CVE codes that are exploited by actor",
            "type": "string"
          },
          "installation": {
            "description": "Free form text describing actor's malware installation on the asset",
            "type": "string"
          },
          "objectives": {
            "description": "Legacy field, not used and empty",
            "type": "string"
          },
          "reconnaissance": {
            "description": "Free form text describing how targets are researched, identified and selected",
            "type": "string"
          },
          "rich_text_actions_and_objectives": {
            "description": "Rich free form text describing actions and objectives of the actor",
            "type": "string"
          },
          "rich_text_command_and_control": {
            "description": "Rich free form text describing methods and tools used to communicate with and control an infected machine or network",
            "type": "string"
          },
          "rich_text_delivery": {
            "description": "Rich free form text describing malware delivery by actor",
            "type": "string"
          },
          "rich_text_exploitation": {
            "description": "Rich text comma separated values of vulnerabilities by CVE codes that are exploited by actor",
            "type": "string"
          },
          "rich_text_installation": {
            "description": "Rich free form text describing actor's malware installation on the asset",
            "type": "string"
          },
          "rich_text_objectives": {
            "description": "Legacy field, not used and empty",
            "type": "string"
          },
          "rich_text_reconnaissance": {
            "description": "Rich free form text describing how targets are researched, identified and selected",
            "type": "string"
          },
          "rich_text_weaponization": {
            "description": "Rich free form text describing weaponization of the threat/malware (couples exploit with backdoor into deliverable payload)",
            "type": "string"
          },
          "weaponization": {
            "description": "Free form text describing weaponization of the threat/malware (couples exploit with backdoor into deliverable payload)",
            "type": "string"
          }
        }
      },
      "domain.LastScheduledExecution": {
        "properties": {
          "id": {
            "type": "string"
          },
          "search_window_end": {
            "format": "date-time",
            "type": "string"
          },
          "search_window_start": {
            "format": "date-time",
            "type": "string"
          },
          "status_display": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status_display"
        ]
      },
      "domain.LastUnscheduledExecution": {
        "properties": {
          "activity_status": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_updated_ts": {
            "format": "date-time",
            "type": "string"
          },
          "status_display": {
            "type": "string"
          }
        },
        "required": [
          "activity_status",
          "id",
          "last_updated_ts",
          "status_display"
        ]
      },
      "domain.LaunchExportJobRequestV1": {
        "properties": {
          "entity": {
            "description": "The entity type. This can be one of: [`notification-exposed-data-record`, `historical-search-exposed-data-record`]",
            "type": "string"
          },
          "export_type": {
            "description": "The file type of the export. This can be one of: [`json`, `csv`]",
            "type": "string"
          },
          "filter": {
            "description": "FQL query to filter entities by. Possible filter properties depend on the entity type.",
            "type": "string"
          },
          "human_readable": {
            "description": "If set to true (default), the field names in the exported file will resemble the table header in the UI (e.g. \"Hash type\"), otherwise the API level field names will be used (e.g. \"hash_type\")",
            "type": "boolean"
          },
          "sort": {
            "description": "Possible order by fields: created_timestamp, last_updated_timestamp. Ex: 'last_updated_timestamp|desc'",
            "type": "string"
          }
        },
        "required": [
          "entity",
          "export_type",
          "filter",
          "human_readable"
        ]
      },
      "domain.LaunchExportJobResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/reconmsa.APIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ExportJobV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ListFilesResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/model.File"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ListFilesV2ResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.FileV2"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ListSessionsResponseMsa": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.LookupFile": {
        "properties": {
          "app_id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "contents_hash": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/domain.User"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_modified_by": {
            "$ref": "#/components/schemas/domain.User"
          },
          "last_modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "version_numeric": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "contents_hash",
          "created_by",
          "created_timestamp",
          "description",
          "filename",
          "format",
          "id",
          "last_modified_by",
          "last_modified_timestamp",
          "name",
          "repo",
          "size",
          "status",
          "version",
          "version_numeric"
        ]
      },
      "domain.LookupFileWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.LookupFile"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MSSPRoleRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.MSSPRoles"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.MSSPRoleResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.MSSPRoles"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MSSPRoles": {
        "properties": {
          "cid_group_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "role_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_group_id": {
            "type": "string"
          }
        },
        "required": [
          "cid_group_id",
          "id",
          "role_ids",
          "user_group_id"
        ]
      },
      "domain.MaliciousFile": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "filepath": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "host_scan_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "pattern_id": {
            "format": "integer",
            "type": "integer"
          },
          "quarantined": {
            "type": "boolean"
          },
          "scan_id": {
            "type": "string"
          },
          "severity": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.MalwareDocument": {
        "description": "JSON definition of a Malware, also known as a Threat",
        "properties": {
          "actors_count": {
            "format": "int64",
            "type": "integer"
          },
          "all_systems": {
            "description": "All the Systems affected (i.e AWS, Lambda)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "associated_actors": {
            "description": "All the actors related to this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedAdversaryReference"
            },
            "type": "array"
          },
          "capabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "community_identifiers": {
            "description": "Malware's community identifiers",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_timestamp": {
            "description": "Malware's creation date when it was added to CKB in unix timestamp format",
            "type": "string"
          },
          "description": {
            "description": "Malware's text description",
            "type": "string"
          },
          "description_text_length": {
            "format": "int64",
            "type": "integer"
          },
          "developed_by": {
            "description": "Actors that developed this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedAdversaryReference"
            },
            "type": "array"
          },
          "developed_by_count": {
            "format": "int64",
            "type": "integer"
          },
          "files_containing_threat_count": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Alphanumeric ID for the Malware",
            "type": "string"
          },
          "indicator_count": {
            "format": "int64",
            "type": "integer"
          },
          "kill_chain": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Malware's last updated date in unix timestamp format",
            "type": "string"
          },
          "mitre": {
            "description": "MITRE used by this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatUsedMitre"
            },
            "type": "array"
          },
          "mitre_attack_count": {
            "format": "int64",
            "type": "integer"
          },
          "mitre_tactic_count": {
            "format": "int64",
            "type": "integer"
          },
          "mitre_technique_count": {
            "format": "int64",
            "type": "integer"
          },
          "motivation": {
            "description": "Malware's activity motivation, one of: State-Sponsored, Criminal, Hacktivism",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Malware's family name",
            "type": "string"
          },
          "next_stage_of": {
            "description": "The previous stage of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "next_stages": {
            "description": "The next stages of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "plugin_of": {
            "description": "The parent of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "plugins": {
            "description": "The plugins of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "purchased_by": {
            "description": "Actors that purchase this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedAdversaryReference"
            },
            "type": "array"
          },
          "purchased_by_count": {
            "format": "int64",
            "type": "integer"
          },
          "report_count": {
            "format": "int64",
            "type": "integer"
          },
          "reports": {
            "description": "Reports that contain this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedReportReference"
            },
            "type": "array"
          },
          "seen_in_environment": {
            "$ref": "#/components/schemas/domain.MalwareEnvironmentAggregates"
          },
          "slug": {
            "description": "Name in url friendly format, lowercased and spaces replaced with dash",
            "type": "string"
          },
          "sold_by": {
            "description": "Actors that sell this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedAdversaryReference"
            },
            "type": "array"
          },
          "sold_by_count": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "sub_botnet_of": {
            "description": "The parent botnet of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "sub_botnets": {
            "description": "The sub-botnets of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "successor_of": {
            "description": "The predecessor of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "successors": {
            "description": "The successors of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "systems_targeted_count": {
            "format": "int64",
            "type": "integer"
          },
          "target_countries": {
            "description": "Target countries of malware's activity and attacks, slug value is a 2 characters code for the country value, some examples: United States,United Kingdom,Germany,India,Japan,France,Australia,Canada,China",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedCountry"
            },
            "type": "array"
          },
          "target_industries": {
            "description": "Target economical industries of malware's activity and attacks. List of available values: Government, Financial Services, Technology, Telecommunications, Healthcare, Energy, Academic, Media, Aerospace, NGO, Manufacturing, Industrials and Engineering, Retail, Hospitality, Consulting and Professional Services, Opportunistic, Aviation, Defense, Transportation, Oil and Gas, Legal, Pharmaceutical, Logistics, Military, Automotive, Food and Beverage, Consumer Goods, Real Estate, Insurance, Agriculture, Chemicals, Utilities, Maritime, Extractive, Travel, Dissident, Cryptocurrency, Entertainment, National Government, Law Enforcement, Think Tanks, Local Government, Sports Organizations, Computer Gaming, Biomedical, Nonprofit, Financial Management \u0026 Hedge Funds, Political Parties, Architectural and Engineering, Emergency Services, Social Media, International Government, Nuclear, Research Entities, Vocational and Higher-Level Education, eCommerce",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedSector"
            },
            "type": "array"
          },
          "targeting_profile": {
            "description": "Malware's targeting profile",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targets_systems": {
            "description": "The System directly targeted by this Malware (i.e Lambda)",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedCustomerTarget"
            },
            "type": "array"
          },
          "threat_file_count": {
            "format": "int64",
            "type": "integer"
          },
          "threat_properties": {
            "description": "Malware's properties one of: Commodity, OpenSource, SourceCodeLeaked, Modular, RepurposedLegitimateSoftware",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "threat_relations_count": {
            "format": "int64",
            "type": "integer"
          },
          "used_by": {
            "description": "Actors that use this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedAdversaryReference"
            },
            "type": "array"
          },
          "used_by_count": {
            "format": "int64",
            "type": "integer"
          },
          "variant_of": {
            "description": "The parent variant of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "variants": {
            "description": "The variants of this Malware",
            "items": {
              "$ref": "#/components/schemas/domain.DenormalizedThreatReference"
            },
            "type": "array"
          },
          "vulnerabilities": {
            "description": "Vulnerabilities this Malware exploits",
            "items": {
              "$ref": "#/components/schemas/domain.Vuln"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "domain.MalwareEnvironmentAggregates": {
        "properties": {
          "detections": {
            "format": "int64",
            "type": "integer"
          },
          "sandbox": {
            "format": "int64",
            "type": "integer"
          },
          "vulnerabilities": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "detections",
          "sandbox",
          "vulnerabilities"
        ]
      },
      "domain.MalwareResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.MalwareDocument"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MappedDevicePolicies": {
        "properties": {
          "remote_response": {
            "$ref": "#/components/schemas/domain.DevicePolicy"
          }
        }
      },
      "domain.MarketplaceCredentials": {
        "properties": {
          "sites_all": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sites_with_cookie_only": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sites_with_password": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.MarketplaceProduct": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/domain.Card"
          },
          "country_code": {
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/domain.MarketplaceCredentials"
          },
          "host": {
            "$ref": "#/components/schemas/domain.Host"
          },
          "location": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "domain.MatchedBreachSummaryV1": {
        "properties": {
          "community_name": {
            "description": "Community/colloquial exposed data event name.",
            "type": "string"
          },
          "confidence_level": {
            "description": "The level of confidence regarding data veridicality. Options for likely authentic, confirmed authentic (default: unverified).",
            "type": "string"
          },
          "credential_statuses": {
            "description": "A list of statuses for the exposed data records contained in the notification. Possible values: 'newly_detected', 'previously_reported' and/or 'other'",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "credentials_domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "credentials_ips": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The description of the breach",
            "type": "string"
          },
          "event_date": {
            "description": "The date the exposed data event occurred.",
            "type": "string"
          },
          "event_id": {
            "description": "CrowdStrike-generated unique exposed data event identifier.",
            "type": "string"
          },
          "exposure_date": {
            "description": "The date when the data was leaked online",
            "format": "date-time",
            "type": "string"
          },
          "fields": {
            "description": "The set of fields which were breached: 'email', 'password', 'login_id', 'phone', etc.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "files": {
            "description": "Metadata regarding the file(s) where exposed data records where found.",
            "items": {
              "$ref": "#/components/schemas/domain.FileDetailsV1"
            },
            "type": "array"
          },
          "idp_send_date": {
            "format": "date-time",
            "type": "string"
          },
          "idp_send_status": {
            "type": "string"
          },
          "is_retroactively_deduped": {
            "description": "(Boolean) If the notification was processed before the introduction of exposed data deduplication",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the breach",
            "type": "string"
          },
          "obtained_by": {
            "description": "Exposed Data Event Threat Actor/Group: Moniker(s) or real name(s) of the individual/group who unveiled confidential data.",
            "type": "string"
          },
          "url": {
            "description": "Where the leak was found.",
            "type": "string"
          }
        },
        "required": [
          "description",
          "fields",
          "is_retroactively_deduped",
          "name"
        ]
      },
      "domain.MatchedRule": {
        "properties": {
          "customer_id": {
            "description": "The customer ID",
            "type": "string"
          },
          "hit_id": {
            "description": "The matched rule hit ID",
            "type": "string"
          },
          "rule_id": {
            "description": "The matched rule ID",
            "type": "string"
          }
        }
      },
      "domain.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "quota": {
            "$ref": "#/components/schemas/domain.Quota"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "domain.MsaDetectSummariesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIDetectionDocument"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MsaEnvironmentScoreResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.EnvironmentScore"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MsaExternalBehaviorResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Behavior"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MsaExternalIncidentResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Incident"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MsaIncidentPerformActionResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UpdateResults"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MsaIncidentQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.IncidentID"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MsaQfResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/quarantine.QuarantinedFile"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.MultiCommandExecuteResponse": {
        "properties": {
          "resources": {
            "type": "object"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.MultiCommandExecuteResponseWrapper": {
        "properties": {
          "combined": {
            "$ref": "#/components/schemas/domain.MultiCommandExecuteResponse"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "combined",
          "errors",
          "meta"
        ]
      },
      "domain.MultiPulseSensorResponse": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "aid",
          "errors",
          "session_id"
        ]
      },
      "domain.MultiStatusSensorResponse": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "base_command": {
            "type": "string"
          },
          "complete": {
            "type": "boolean"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "offline_queued": {
            "type": "boolean"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "sequence_id": {
            "format": "integer",
            "type": "integer"
          },
          "session_id": {
            "type": "string"
          },
          "stderr": {
            "type": "string"
          },
          "stdout": {
            "type": "string"
          },
          "task_id": {
            "type": "string"
          }
        },
        "required": [
          "aid",
          "complete",
          "errors",
          "offline_queued",
          "query_time",
          "session_id",
          "stderr",
          "stdout"
        ]
      },
      "domain.NewsDocument": {
        "properties": {
          "active": {
            "description": "legacy field, not used",
            "type": "boolean"
          },
          "actors": {
            "description": "Actors mentioned, related or referenced in the news/report",
            "items": {
              "$ref": "#/components/schemas/domain.SimpleActor"
            },
            "type": "array"
          },
          "attachments": {
            "description": "News attachment, containing either pdf url or feeds zip and/or gzip archive",
            "items": {
              "$ref": "#/components/schemas/domain.File"
            },
            "type": "array"
          },
          "created_date": {
            "description": "Date of the news document creation, unix timestampt",
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "description": "Full report description, extracted from the document",
            "type": "string"
          },
          "entitlements": {
            "description": "internal property used for permissions check of access, not returned or explicitly filterable",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "id": {
            "description": "Integer ID of the News document",
            "format": "int64",
            "type": "integer"
          },
          "image": {
            "$ref": "#/components/schemas/domain.Image"
          },
          "last_modified_date": {
            "description": "Date of the news document last modification, unix timestampt",
            "format": "int64",
            "type": "integer"
          },
          "malware": {
            "description": "Malware mentioned, related or referenced in the news/report",
            "items": {
              "$ref": "#/components/schemas/domain.ReportMalware"
            },
            "type": "array"
          },
          "motivations": {
            "description": "News mentioned motivation or motivation of related actors and malware families",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "name": {
            "description": "News title",
            "type": "string"
          },
          "notify_users": {
            "description": "internal field, not used",
            "type": "boolean"
          },
          "rich_text_description": {
            "description": "Rich text description with markup",
            "type": "string"
          },
          "rich_text_short_description": {
            "description": "Rich text short description with markup",
            "type": "string"
          },
          "short_description": {
            "description": "Short description of the report content",
            "type": "string"
          },
          "slug": {
            "description": "News title in a url friendly way, which is title in lowercase and special characters including space replaced with dash",
            "type": "string"
          },
          "sub_type": {
            "$ref": "#/components/schemas/domain.Entity"
          },
          "tags": {
            "description": "News tags, which contains MITRE, Vulnerability community identifiers, capabilities, malware family name, customer target, activity cluster, notable event, geopolitical issue",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "target_countries": {
            "description": "News mentioned target countries or related actor's target countries",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "target_industries": {
            "description": "News mentioned target industries or related actor's target industries",
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/domain.Image"
          },
          "topic": {
            "$ref": "#/components/schemas/domain.Entity"
          },
          "type": {
            "$ref": "#/components/schemas/domain.Entity"
          },
          "url": {
            "description": "URL of the news document where it can be accessed in the Falcon Portal",
            "type": "string"
          }
        },
        "required": [
          "actors",
          "created_date",
          "id",
          "last_modified_date",
          "motivations",
          "name",
          "slug",
          "tags",
          "target_countries",
          "target_industries",
          "thumbnail"
        ]
      },
      "domain.NewsResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.NewsDocument"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.NotificationConfig": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "config_id": {
            "type": "string"
          },
          "plugin_id": {
            "type": "string"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "config_id",
          "plugin_id",
          "recipients",
          "severity"
        ]
      },
      "domain.NotificationDetailsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.DetailedNotificationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.NotificationEntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.NotificationV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.NotificationIDResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.NotificationV1": {
        "properties": {
          "actor_slug": {
            "type": "string"
          },
          "assigned_to_uid": {
            "description": "The email of the user who is assigned to this notification",
            "type": "string"
          },
          "assigned_to_username": {
            "description": "The name of the user who is assigned to this notification",
            "type": "string"
          },
          "assigned_to_uuid": {
            "description": "The unique ID of the user who is assigned to this notification",
            "type": "string"
          },
          "breach_summary": {
            "$ref": "#/components/schemas/domain.MatchedBreachSummaryV1"
          },
          "cid": {
            "type": "string"
          },
          "created_date": {
            "description": "The date when the notification was generated",
            "format": "date-time",
            "type": "string"
          },
          "highlights": {
            "description": "Highlighted content based on the rule that generated the notifications. Highlights are surrounded with a `\u003ccs-highlight\u003e` tag",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID of the notification",
            "type": "string"
          },
          "item_author": {
            "description": "The author who posted the intelligence item",
            "type": "string"
          },
          "item_author_id": {
            "description": "The ID of the author who posted the intelligence item",
            "type": "string"
          },
          "item_date": {
            "description": "Timestamp when the item is considered to have been created",
            "format": "date-time",
            "type": "string"
          },
          "item_id": {
            "description": "ID of the item which matched the rule",
            "type": "string"
          },
          "item_site": {
            "description": "The site where the intelligence item was found",
            "type": "string"
          },
          "item_site_id": {
            "description": "The ID of the site where the intelligence item was found",
            "type": "string"
          },
          "item_type": {
            "description": "Type of the item which matched the rule: `post`, `reply`, `botnet_config`, `breach`, etc.",
            "type": "string"
          },
          "logs": {
            "items": {
              "$ref": "#/components/schemas/sadomain.NotificationLog"
            },
            "type": "array"
          },
          "raw_intel_id": {
            "description": "ID of the raw intel item that matched the rule",
            "type": "string"
          },
          "rule_creator_name": {
            "description": "The name of the user who created the rule",
            "type": "string"
          },
          "rule_creator_uid": {
            "description": "The user ID of the user who created the rule",
            "type": "string"
          },
          "rule_creator_uuid": {
            "description": "The unique UUID of the user who created the rule",
            "type": "string"
          },
          "rule_id": {
            "description": "The ID of the rule that generated this notification",
            "type": "string"
          },
          "rule_name": {
            "description": "The name of the rule that generated this notification",
            "type": "string"
          },
          "rule_priority": {
            "description": "The priority of the rule that generated this notification",
            "type": "string"
          },
          "rule_topic": {
            "description": "The topic of the rule that generated this notification",
            "type": "string"
          },
          "source_category": {
            "description": "Category of the source that generated the notification",
            "type": "string"
          },
          "status": {
            "description": "The notification status. This can be one of: `new`, `in-progress`, `closed-false-positive`, `closed-true-positive`.",
            "type": "string"
          },
          "typosquatting": {
            "$ref": "#/components/schemas/sadomain.TyposquattingComponent"
          },
          "updated_date": {
            "description": "The date when the notification was updated",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "actor_slug",
          "cid",
          "created_date",
          "id",
          "item_date",
          "item_id",
          "item_type",
          "raw_intel_id",
          "rule_id",
          "rule_name",
          "rule_priority",
          "rule_topic",
          "status",
          "updated_date"
        ]
      },
      "domain.Notifications": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/domain.NotificationConfig"
          },
          "options": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "config",
          "type"
        ]
      },
      "domain.Params": {
        "properties": {
          "cookie": {
            "type": "object"
          },
          "header": {
            "type": "object"
          },
          "path": {
            "type": "object"
          },
          "query": {
            "type": "object"
          }
        }
      },
      "domain.PastebinTextSource": {
        "properties": {
          "author_name": {
            "description": "The name of the author",
            "type": "string"
          },
          "legacy_source": {
            "$ref": "#/components/schemas/domain.PastebinTextSource.legacy_source"
          },
          "pastebin_id": {
            "description": "Unique ID of the Pastebin content",
            "type": "string"
          },
          "source_link": {
            "description": "The Pastebin URL",
            "type": "string"
          },
          "title": {
            "description": "The title of the Pastebin content",
            "type": "string"
          }
        },
        "required": [
          "author_name",
          "pastebin_id",
          "source_link",
          "title"
        ]
      },
      "domain.PastebinTextSource.legacy_source": {},
      "domain.Permission": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "domain.Platform": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "domain.PolicyInfo": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "account_scope": {
            "type": "string"
          },
          "alert_logic": {
            "type": "string"
          },
          "api_command": {
            "type": "string"
          },
          "asset_type_id": {
            "format": "int32",
            "type": "integer"
          },
          "attack_tool": {
            "type": "string"
          },
          "attack_tool_command": {
            "type": "string"
          },
          "attack_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cis_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "cisa_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "cli_command": {
            "type": "string"
          },
          "cloud_asset_type": {
            "type": "string"
          },
          "cloud_document": {
            "type": "string"
          },
          "cloud_platform": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_platform_type": {
            "type": "string"
          },
          "cloud_service": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_service_friendly": {
            "type": "string"
          },
          "cloud_service_id": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_service_subtype": {
            "type": "string"
          },
          "cloud_service_type": {
            "type": "string"
          },
          "compliance": {
            "$ref": "#/components/schemas/domain.Compliance"
          },
          "confidence": {
            "type": "string"
          },
          "controls": {
            "items": {
              "$ref": "#/components/schemas/domain.Control"
            },
            "type": "array"
          },
          "default_severity": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "fql_policy": {
            "type": "string"
          },
          "hipaa_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "hitrust_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "internal_only": {
            "type": "boolean"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "is_remediable": {
            "type": "boolean"
          },
          "iso_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "mitre_attack_cloud_matrix": {
            "type": "string"
          },
          "mitre_attack_cloud_subtype": {
            "type": "string"
          },
          "nist_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "pci_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "policy_confidence_score": {
            "format": "int32",
            "type": "integer"
          },
          "policy_fail_query": {
            "type": "string"
          },
          "policy_pass_query": {
            "type": "string"
          },
          "policy_remediation": {
            "type": "string"
          },
          "policy_severity": {
            "format": "int32",
            "type": "integer"
          },
          "policy_severity_score": {
            "format": "int32",
            "type": "integer"
          },
          "policy_statement": {
            "type": "string"
          },
          "policy_type": {
            "type": "string"
          },
          "remediation_summary": {
            "type": "string"
          },
          "resource_type_friendly_name": {
            "type": "string"
          },
          "resource_type_id": {
            "type": "string"
          },
          "soc2_benchmark_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "tactic": {
            "type": "string"
          },
          "tactic_id": {
            "type": "string"
          },
          "tactic_url": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          },
          "technique_id": {
            "type": "string"
          },
          "technique_url": {
            "type": "string"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt",
          "account_scope",
          "is_enabled",
          "is_remediable"
        ]
      },
      "domain.PolicySettingByAccountAndRegion": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "tag_excluded": {
            "type": "boolean"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "tag_excluded"
        ]
      },
      "domain.ProductFeatures": {
        "properties": {
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "product": {
            "type": "string"
          }
        },
        "required": [
          "features",
          "product"
        ]
      },
      "domain.ProductFeaturesStatus": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/domain.FeatureStatus"
            },
            "type": "array"
          },
          "product": {
            "type": "string"
          }
        },
        "required": [
          "features",
          "product"
        ]
      },
      "domain.ProductPermission": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/domain.FeaturePermission"
            },
            "type": "array"
          },
          "product": {
            "type": "string"
          }
        },
        "required": [
          "features",
          "product"
        ]
      },
      "domain.PublicIndicatorV3": {
        "properties": {
          "_marker": {
            "type": "string"
          },
          "actors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deleted": {
            "type": "boolean"
          },
          "domain_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "indicator": {
            "type": "string"
          },
          "ip_address_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "kill_chains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/domain.CSIXLabel"
            },
            "type": "array"
          },
          "last_updated": {
            "format": "int64",
            "type": "integer"
          },
          "malicious_confidence": {
            "type": "string"
          },
          "malware_families": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "published_date": {
            "format": "int64",
            "type": "integer"
          },
          "relations": {
            "items": {
              "$ref": "#/components/schemas/domain.CSIXRelation"
            },
            "type": "array"
          },
          "reports": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "threat_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "vulnerabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "_marker",
          "actors",
          "deleted",
          "domain_types",
          "id",
          "indicator",
          "ip_address_types",
          "kill_chains",
          "labels",
          "last_updated",
          "malicious_confidence",
          "malware_families",
          "published_date",
          "relations",
          "reports",
          "targets",
          "threat_types",
          "type",
          "vulnerabilities"
        ]
      },
      "domain.PublicIndicatorsV3Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.PublicIndicatorV3"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.QueriesPatchRequest": {
        "properties": {
          "action": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "q": {
            "type": "string"
          }
        }
      },
      "domain.QueryMitreAttacksResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Actor's MITRE attack (Tactic and Technique) ids, represents a concatenation of actors slug, tactic id and technique id (optional) concatenated by underscore, example: fancy-bear_TA0011_T1071'",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.QueryResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Array of string IDs that matches the query request",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.QueuedSessionCommand": {
        "properties": {
          "base_command": {
            "type": "string"
          },
          "cloud_request_id": {
            "type": "string"
          },
          "command_string": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_text": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "base_command",
          "cloud_request_id",
          "command_string",
          "created_at",
          "deleted_at",
          "status",
          "updated_at"
        ]
      },
      "domain.QueuedSessionJob": {
        "properties": {
          "Commands": {
            "items": {
              "$ref": "#/components/schemas/domain.QueuedSessionCommand"
            },
            "type": "array"
          },
          "aid": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "Commands",
          "aid",
          "created_at",
          "deleted_at",
          "id",
          "status",
          "updated_at",
          "user_id",
          "user_uuid"
        ]
      },
      "domain.QueuedSessionResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.QueuedSessionJob"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.Quota": {
        "properties": {
          "total": {
            "format": "int32",
            "type": "integer"
          },
          "used": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "total",
          "used"
        ]
      },
      "domain.ReconAPIError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIErrorDetail"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_key": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "domain.ReconAPIErrorDetail": {
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_key": {
            "type": "string"
          }
        },
        "required": [
          "field",
          "message",
          "message_key"
        ]
      },
      "domain.Reference": {
        "properties": {
          "Tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "URL": {
            "type": "string"
          }
        },
        "required": [
          "Tags",
          "URL"
        ]
      },
      "domain.RegisterActionsRequest": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/domain.CreateActionRequest"
            },
            "type": "array"
          },
          "rule_id": {
            "type": "string"
          }
        },
        "required": [
          "actions",
          "rule_id"
        ]
      },
      "domain.RegistryCredentialsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Credentials"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ReportExecutionLaunchRequestV1": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.ReportExecutionRetryRequestV1": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.ReportExecutionSummaryV1": {
        "properties": {
          "execution_metadata": {
            "$ref": "#/components/schemas/domain.ExecutionMetadataSummary"
          },
          "id": {
            "type": "string"
          },
          "last_updated_on": {
            "format": "date-time",
            "type": "string"
          },
          "report_file_reference": {
            "type": "string"
          },
          "report_params": {
            "$ref": "#/components/schemas/domain.ReportParams"
          },
          "result_metadata": {
            "$ref": "#/components/schemas/domain.ResultMetadata"
          },
          "status": {
            "type": "string"
          },
          "status_display": {
            "type": "string"
          },
          "status_msg": {
            "type": "string"
          }
        },
        "required": [
          "execution_metadata",
          "id",
          "last_updated_on",
          "report_params",
          "status",
          "status_display",
          "status_msg"
        ]
      },
      "domain.ReportExecutionV1": {
        "properties": {
          "can_write": {
            "type": "boolean"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "execution_metadata": {
            "$ref": "#/components/schemas/domain.ExecutionMetadataV1"
          },
          "expiration_on": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "job_reference": {
            "type": "string"
          },
          "last_updated_on": {
            "format": "date-time",
            "type": "string"
          },
          "report_file_reference": {
            "type": "string"
          },
          "report_params": {
            "$ref": "#/components/schemas/domain.ReportParams"
          },
          "result_metadata": {
            "$ref": "#/components/schemas/domain.ResultMetadata"
          },
          "scheduled_report_id": {
            "type": "string"
          },
          "shared_with": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "status_display": {
            "type": "string"
          },
          "status_msg": {
            "type": "string"
          },
          "tracking": {
            "type": "string"
          },
          "trigger_reference": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "created_on",
          "customer_id",
          "expiration_on",
          "id",
          "last_updated_on",
          "report_params",
          "scheduled_report_id",
          "shared_with",
          "status",
          "status_display",
          "status_msg",
          "type",
          "user_id",
          "user_uuid"
        ]
      },
      "domain.ReportExecutionsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ReportExecutionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ReportMalware": {
        "properties": {
          "community_identifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "family_name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "family_name",
          "slug"
        ]
      },
      "domain.ReportMetadata": {
        "properties": {
          "created_by_user_id": {
            "type": "string"
          },
          "created_by_uuid": {
            "type": "string"
          },
          "discover_params": {
            "$ref": "#/components/schemas/domain.DiscoverParams"
          },
          "kestrel_params": {
            "$ref": "#/components/schemas/domain.KestrelParams"
          },
          "last_scheduled_execution": {
            "$ref": "#/components/schemas/domain.LastScheduledExecution"
          },
          "last_unscheduled_execution": {
            "$ref": "#/components/schemas/domain.LastUnscheduledExecution"
          },
          "subtype": {
            "type": "string"
          },
          "xdr_params": {
            "$ref": "#/components/schemas/domain.XDRParams"
          }
        },
        "required": [
          "created_by_user_id",
          "created_by_uuid",
          "last_unscheduled_execution",
          "subtype"
        ]
      },
      "domain.ReportParams": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dashboard_id": {
            "type": "string"
          },
          "dashboard_visibility": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "filter_display": {
            "type": "string"
          },
          "filter_ui": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "report_type_options": {
            "type": "object"
          },
          "sort": {
            "type": "string"
          },
          "spotlight_params": {
            "$ref": "#/components/schemas/domain.SpotlightParams"
          }
        },
        "required": [
          "columns",
          "dashboard_id",
          "dashboard_visibility",
          "filter",
          "filter_display",
          "filter_ui",
          "format",
          "sort"
        ]
      },
      "domain.Request": {
        "properties": {
          "data": {
            "type": "string"
          },
          "json": {
            "$ref": "#/components/schemas/domain.Request.json"
          },
          "params": {
            "$ref": "#/components/schemas/domain.Params"
          },
          "x-www-form-urlencoded": {
            "type": "object"
          }
        }
      },
      "domain.Request.json": {},
      "domain.ResultMetadata": {
        "properties": {
          "execution_delay": {
            "format": "int64",
            "type": "integer"
          },
          "execution_duration": {
            "format": "int64",
            "type": "integer"
          },
          "execution_finish": {
            "format": "date-time",
            "type": "string"
          },
          "execution_start": {
            "format": "date-time",
            "type": "string"
          },
          "queue_duration": {
            "format": "int64",
            "type": "integer"
          },
          "queue_start": {
            "format": "date-time",
            "type": "string"
          },
          "report_file_name": {
            "type": "string"
          },
          "report_finish": {
            "format": "date-time",
            "type": "string"
          },
          "result_count": {
            "format": "int32",
            "type": "integer"
          },
          "result_id": {
            "type": "string"
          },
          "search_window_end": {
            "format": "date-time",
            "type": "string"
          },
          "search_window_start": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "execution_delay",
          "execution_duration",
          "execution_finish",
          "execution_start",
          "queue_duration",
          "queue_start",
          "report_file_name",
          "report_finish",
          "result_count",
          "result_id",
          "search_window_end",
          "search_window_start"
        ]
      },
      "domain.Role": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_global": {
            "type": "boolean"
          }
        },
        "required": [
          "description",
          "display_name",
          "id",
          "is_global"
        ]
      },
      "domain.RoleIDs": {
        "properties": {
          "roleIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "domain.Rule": {
        "properties": {
          "created_date": {
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "last_modified_date": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "rich_text_description": {
            "type": "string"
          },
          "short_description": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "created_date",
          "description",
          "id",
          "last_modified_date",
          "name",
          "rich_text_description",
          "short_description",
          "tags",
          "type"
        ]
      },
      "domain.RuleEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Rule"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.RuleMetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "description": "The API that generated the response",
            "type": "string"
          },
          "query_time": {
            "description": "How much time the query took",
            "format": "double",
            "type": "number"
          },
          "quota": {
            "$ref": "#/components/schemas/domain.RuleQuota"
          },
          "trace_id": {
            "description": "The request trace ID",
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "domain.RulePreviewRequest": {
        "properties": {
          "filter": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "required": [
          "filter",
          "topic"
        ]
      },
      "domain.RuleQueryResponseV1": {
        "properties": {
          "errors": {
            "description": "The request errors",
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.RuleMetaInfo"
          },
          "resources": {
            "description": "The requested rule resources",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.RuleQuota": {
        "properties": {
          "active": {
            "description": "Number of active rules",
            "format": "int32",
            "type": "integer"
          },
          "pending": {
            "description": "Number of pending rules",
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "description": "Monitoring rules limit",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "active",
          "pending",
          "total"
        ]
      },
      "domain.RulesEntitiesResponseV1": {
        "properties": {
          "errors": {
            "description": "The request encountered errors",
            "items": {
              "$ref": "#/components/schemas/domain.ReconAPIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.RuleMetaInfo"
          },
          "resources": {
            "description": "The requested rule resources",
            "items": {
              "$ref": "#/components/schemas/sadomain.Rule"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.RulesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Rule"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.SCAMisconfigsCounts": {
        "properties": {
          "critical": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "critical"
        ]
      },
      "domain.SPAPICombinedVulnerabilitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.SPAPIQueryMeta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.BaseAPIVulnerabilityV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.SPAPIEvaluationLogicCombinedResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.SPAPIQueryMeta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.SPAPIEvaluationLogicEntitiesResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIEvaluationLogicV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.SPAPIQueryMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domain.SPAPIQueryPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "quota": {
            "$ref": "#/components/schemas/domain.Quota"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "domain.SPAPIQueryPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "after",
          "limit",
          "total"
        ]
      },
      "domain.SPAPIQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.SPAPIQueryMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.SPAPIRemediationEntitiesResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIRemediationV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.SPAPIVulnerabilitiesEntitiesResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/domain.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.APIVulnerabilityV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "domain.Scan": {
        "properties": {
          "affected_hosts_count": {
            "format": "int32",
            "type": "integer"
          },
          "cid": {
            "type": "string"
          },
          "cloud_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "completed_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "cpu_priority": {
            "format": "int32",
            "type": "integer"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "endpoint_notification": {
            "type": "boolean"
          },
          "file_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filecount": {
            "$ref": "#/components/schemas/domain.FileCount"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "incomplete_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "initiated_from": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "max_duration": {
            "format": "int32",
            "type": "integer"
          },
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanMetadata"
            },
            "type": "array"
          },
          "missing_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "not_started_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "pause_duration": {
            "format": "int32",
            "type": "integer"
          },
          "policy_setting": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "preemption_priority": {
            "format": "int32",
            "type": "integer"
          },
          "profile_id": {
            "type": "string"
          },
          "quarantine": {
            "type": "boolean"
          },
          "rollup_version": {
            "format": "int32",
            "type": "integer"
          },
          "scan_completed_on": {
            "format": "date-time",
            "type": "string"
          },
          "scan_exclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_inclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_scheduled_on": {
            "format": "date-time",
            "type": "string"
          },
          "scan_started_on": {
            "format": "date-time",
            "type": "string"
          },
          "sensor_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "sensor_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "severity": {
            "format": "integer",
            "type": "integer"
          },
          "started_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "targeted_host_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.ScanHostMetadata": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "completed_on": {
            "format": "date-time",
            "type": "string"
          },
          "filecount": {
            "$ref": "#/components/schemas/domain.FileCount"
          },
          "host_id": {
            "type": "string"
          },
          "host_scan_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "scan_control_reason": {
            "type": "string"
          },
          "scan_id": {
            "type": "string"
          },
          "severity": {
            "format": "integer",
            "type": "integer"
          },
          "started_on": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.ScanMetadata": {
        "properties": {
          "completed_on": {
            "format": "date-time",
            "type": "string"
          },
          "filecount": {
            "$ref": "#/components/schemas/domain.FileCount"
          },
          "host_id": {
            "type": "string"
          },
          "host_name": {
            "type": "string"
          },
          "host_scan_id": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "scan_control_reason": {
            "type": "string"
          },
          "scan_host_metadata_id": {
            "type": "string"
          },
          "severity": {
            "format": "integer",
            "type": "integer"
          },
          "started_on": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "host_id"
        ]
      },
      "domain.ScanProfile": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cloud_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "cpu_priority": {
            "format": "int32",
            "type": "integer"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "endpoint_notification": {
            "type": "boolean"
          },
          "file_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "initiated_from": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "max_duration": {
            "format": "int32",
            "type": "integer"
          },
          "max_file_size": {
            "format": "int32",
            "type": "integer"
          },
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanProfileMetadata"
            },
            "type": "array"
          },
          "pause_duration": {
            "format": "int32",
            "type": "integer"
          },
          "policy_setting": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "preemption_priority": {
            "format": "int32",
            "type": "integer"
          },
          "quarantine": {
            "type": "boolean"
          },
          "scan_exclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_inclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "schedule": {
            "$ref": "#/components/schemas/domain.Schedule"
          },
          "sensor_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "sensor_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "targeted_host_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "deleted",
          "id"
        ]
      },
      "domain.ScanProfileMetadata": {
        "properties": {
          "host_id": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "host_id"
        ]
      },
      "domain.ScanScheduleDataV1": {
        "properties": {
          "cloud_platform": {
            "type": "string"
          },
          "next_scan_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "scan_interval": {
            "type": "string"
          },
          "scan_schedule": {
            "type": "string"
          }
        },
        "required": [
          "cloud_platform"
        ]
      },
      "domain.ScanV2": {
        "properties": {
          "affected_hosts_count": {
            "format": "int32",
            "type": "integer"
          },
          "cid": {
            "type": "string"
          },
          "cloud_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "completed_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "cpu_priority": {
            "format": "int32",
            "type": "integer"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "endpoint_notification": {
            "type": "boolean"
          },
          "file_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filecount": {
            "$ref": "#/components/schemas/domain.FileCountV2"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "incomplete_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "initiated_from": {
            "type": "string"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "max_duration": {
            "format": "int32",
            "type": "integer"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "missing_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "not_started_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "pause_duration": {
            "format": "int32",
            "type": "integer"
          },
          "policy_setting": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "preemption_priority": {
            "format": "int32",
            "type": "integer"
          },
          "profile_id": {
            "type": "string"
          },
          "quarantine": {
            "type": "boolean"
          },
          "scan_completed_on": {
            "format": "date-time",
            "type": "string"
          },
          "scan_exclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_inclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_started_on": {
            "format": "date-time",
            "type": "string"
          },
          "sensor_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "sensor_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "severity": {
            "format": "integer",
            "type": "integer"
          },
          "started_host_count": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "targeted_host_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "affected_hosts_count",
          "completed_host_count",
          "id",
          "incomplete_host_count",
          "missing_host_count",
          "not_started_host_count",
          "started_host_count",
          "targeted_host_count"
        ]
      },
      "domain.Schedule": {
        "properties": {
          "ignored_by_channelfile": {
            "type": "boolean"
          },
          "interval": {
            "format": "int32",
            "type": "integer"
          },
          "start_timestamp": {
            "type": "string"
          }
        }
      },
      "domain.ScheduledReportV1": {
        "properties": {
          "api_client_id": {
            "type": "string"
          },
          "can_write": {
            "type": "boolean"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiration_on": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_execution": {
            "$ref": "#/components/schemas/domain.ReportExecutionSummaryV1"
          },
          "last_updated_on": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "next_execution_on": {
            "format": "date-time",
            "type": "string"
          },
          "notifications": {
            "items": {
              "$ref": "#/components/schemas/domain.Notifications"
            },
            "type": "array"
          },
          "owned_by_cs": {
            "type": "boolean"
          },
          "report_metadata": {
            "$ref": "#/components/schemas/domain.ReportMetadata"
          },
          "report_params": {
            "$ref": "#/components/schemas/domain.ReportParams"
          },
          "schedule": {
            "$ref": "#/components/schemas/domain.Schedule"
          },
          "shared_with": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "start_on": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "stop_on": {
            "format": "date-time",
            "type": "string"
          },
          "tracking": {
            "type": "string"
          },
          "trigger_reference": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "api_client_id",
          "created_on",
          "customer_id",
          "description",
          "id",
          "last_updated_on",
          "name",
          "notifications",
          "report_params",
          "schedule",
          "shared_with",
          "status",
          "type",
          "user_id",
          "user_uuid"
        ]
      },
      "domain.ScheduledReportsResultV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ScheduledReportV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.ScriptHelp": {
        "properties": {
          "args": {
            "items": {
              "$ref": "#/components/schemas/model.Argument"
            },
            "type": "array"
          },
          "command": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "examples": {
            "type": "string"
          },
          "internal_only": {
            "type": "boolean"
          },
          "runnable": {
            "type": "boolean"
          },
          "sub_commands": {
            "items": {
              "$ref": "#/components/schemas/domain.ScriptHelp"
            },
            "type": "array"
          }
        },
        "required": [
          "args",
          "command",
          "description",
          "examples",
          "internal_only",
          "runnable",
          "sub_commands"
        ]
      },
      "domain.SearchAfterMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/domain.SearchAfterPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "domain.SearchAfterPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "after",
          "limit",
          "total"
        ]
      },
      "domain.SensorInstallerV1": {
        "properties": {
          "description": {
            "description": "installer description",
            "type": "string"
          },
          "file_size": {
            "description": "file size",
            "format": "int32",
            "type": "integer"
          },
          "file_type": {
            "description": "file type",
            "type": "string"
          },
          "name": {
            "description": "installer file name",
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "platform": {
            "description": "supported platform",
            "type": "string"
          },
          "release_date": {
            "description": "release date",
            "format": "date-time",
            "type": "string"
          },
          "sha256": {
            "description": "sha256",
            "type": "string"
          },
          "version": {
            "description": "version of the installer",
            "type": "string"
          }
        },
        "required": [
          "description",
          "file_size",
          "file_type",
          "name",
          "os",
          "os_version",
          "platform",
          "release_date",
          "sha256",
          "version"
        ]
      },
      "domain.SensorInstallerV2": {
        "properties": {
          "architectures": {
            "description": "architectures supported",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "installer description",
            "type": "string"
          },
          "file_size": {
            "description": "file size",
            "format": "int32",
            "type": "integer"
          },
          "file_type": {
            "description": "file type",
            "type": "string"
          },
          "ltv_expiry_date": {
            "description": "ltv expiry date",
            "type": "string"
          },
          "ltv_promoted_date": {
            "description": "ltv promoted date",
            "type": "string"
          },
          "name": {
            "description": "installer file name",
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "platform": {
            "description": "supported platform",
            "type": "string"
          },
          "release_date": {
            "description": "release date",
            "format": "date-time",
            "type": "string"
          },
          "sha256": {
            "description": "sha256",
            "type": "string"
          },
          "version": {
            "description": "version of the installer",
            "type": "string"
          }
        },
        "required": [
          "description",
          "file_size",
          "file_type",
          "name",
          "os",
          "os_version",
          "platform",
          "release_date",
          "sha256",
          "version"
        ]
      },
      "domain.SensorInstallersV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.SensorInstallerV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.SensorInstallersV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.SensorInstallerV2"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.Session": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cloud_request_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "commands": {
            "type": "object"
          },
          "commands_queued": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "device_details": {
            "$ref": "#/components/schemas/domain.Device"
          },
          "device_id": {
            "type": "string"
          },
          "duration": {
            "format": "double",
            "type": "number"
          },
          "hostname": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "logs": {
            "items": {
              "$ref": "#/components/schemas/model.SessionLog"
            },
            "type": "array"
          },
          "offline_queued": {
            "type": "boolean"
          },
          "origin": {
            "type": "string"
          },
          "platform_id": {
            "format": "int32",
            "type": "integer"
          },
          "platform_name": {
            "type": "string"
          },
          "pwd": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "cloud_request_ids",
          "commands_queued",
          "created_at",
          "deleted_at",
          "device_id",
          "duration",
          "hostname",
          "id",
          "logs",
          "offline_queued",
          "origin",
          "updated_at",
          "user_id",
          "user_uuid"
        ]
      },
      "domain.Session.commands": {},
      "domain.SessionResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Session"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.SignalProperties": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "assessment": {
            "$ref": "#/components/schemas/domain.Assessment"
          },
          "assessment_items": {
            "$ref": "#/components/schemas/domain.AssessmentItems"
          },
          "cid": {
            "type": "string"
          },
          "event_platform": {
            "type": "string"
          },
          "modified_time": {
            "format": "date-time",
            "type": "string"
          },
          "product_type_desc": {
            "type": "string"
          },
          "sensor_file_status": {
            "type": "string"
          },
          "system_serial_number": {
            "type": "string"
          }
        },
        "required": [
          "aid",
          "assessment",
          "assessment_items",
          "cid",
          "event_platform",
          "modified_time",
          "product_type_desc",
          "sensor_file_status",
          "system_serial_number"
        ]
      },
      "domain.SignalProperty": {
        "properties": {
          "criteria": {
            "type": "string"
          },
          "group_name": {
            "type": "string"
          },
          "meets_criteria": {
            "type": "string"
          },
          "signal_id": {
            "type": "string"
          },
          "signal_name": {
            "type": "string"
          }
        },
        "required": [
          "criteria",
          "group_name",
          "meets_criteria",
          "signal_id",
          "signal_name"
        ]
      },
      "domain.SimpleActor": {
        "properties": {
          "entitlements": {
            "items": {
              "$ref": "#/components/schemas/domain.Entity"
            },
            "type": "array"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/domain.Image"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "domain.SpotlightParams": {
        "properties": {
          "template_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "template_name": {
            "type": "string"
          },
          "top_n_results": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "template_fields",
          "template_name",
          "top_n_results"
        ]
      },
      "domain.StatusResponse": {
        "properties": {
          "base_command": {
            "type": "string"
          },
          "complete": {
            "type": "boolean"
          },
          "sequence_id": {
            "format": "integer",
            "type": "integer"
          },
          "session_id": {
            "type": "string"
          },
          "stderr": {
            "type": "string"
          },
          "stdout": {
            "type": "string"
          },
          "task_id": {
            "type": "string"
          }
        },
        "required": [
          "complete",
          "session_id",
          "stderr",
          "stdout"
        ]
      },
      "domain.StatusResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.StatusResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.TelegramChannelInfo": {
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "domain.TelegramInfo": {
        "properties": {
          "channel_info": {
            "$ref": "#/components/schemas/domain.TelegramChannelInfo"
          },
          "recipient_info": {
            "$ref": "#/components/schemas/domain.TelegramRecipientInfo"
          },
          "sender_info": {
            "$ref": "#/components/schemas/domain.TelegramSenderInfo"
          }
        }
      },
      "domain.TelegramRecipientInfo": {
        "properties": {
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "last_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "domain.TelegramSenderInfo": {
        "properties": {
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "last_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "domain.ThreatEntity": {
        "properties": {
          "family_name": {
            "description": "family name of the threat",
            "type": "string"
          }
        }
      },
      "domain.TweetSource": {
        "properties": {
          "author_name": {
            "description": "The username of the tweet's author",
            "type": "string"
          },
          "language": {
            "description": "The language of the tweet",
            "type": "string"
          },
          "legacy_source": {
            "$ref": "#/components/schemas/domain.TweetSource.legacy_source"
          },
          "source_link": {
            "description": "The link to the tweet",
            "type": "string"
          },
          "tweet_id": {
            "description": "The tweet ID",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "author_name",
          "language",
          "source_link",
          "tweet_id"
        ]
      },
      "domain.TweetSource.legacy_source": {},
      "domain.UpdateActionRequest": {
        "properties": {
          "content_format": {
            "type": "string"
          },
          "frequency": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "trigger_matchless": {
            "type": "boolean"
          }
        },
        "required": [
          "content_format",
          "frequency",
          "id",
          "recipients",
          "status",
          "trigger_matchless"
        ]
      },
      "domain.UpdateNotificationRequestV1": {
        "properties": {
          "assigned_to_uuid": {
            "description": "The unique ID of the user who is assigned to this notification. The value `unassigned` can be used to unassign a notification.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the notifications",
            "type": "string"
          },
          "idp_send_status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "description": "The notification status. This can be one of: `new`, `in-progress`, `closed-false-positive`, `closed-true-positive`.",
            "type": "string"
          }
        },
        "required": [
          "assigned_to_uuid",
          "id",
          "idp_send_status",
          "message",
          "status"
        ]
      },
      "domain.UpdateResults": {
        "properties": {
          "detections_unchanged": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "detections_updated": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "domain.UpdateRuleRequestV1": {
        "properties": {
          "breach_monitor_only": {
            "description": "Monitor only for breach data. Must be accompanied by breach_monitoring_enabled:true.",
            "type": "boolean"
          },
          "breach_monitoring_enabled": {
            "description": "Whether to monitor for breach data. Available only for `Company Domains` and `Email addresses` rule topics. When enabled, ownership of the monitored domains or emails is required",
            "type": "boolean"
          },
          "filter": {
            "description": "The FQL filter to be used for searching",
            "type": "string"
          },
          "id": {
            "description": "The rule ID to be updated",
            "type": "string"
          },
          "match_on_tsq_result_types": {
            "description": "Which result types to monitor for. Can be set to only monitor domains or subdomains, as well as both. Only available for the `Typosquatting` rule topic.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of a given rule",
            "type": "string"
          },
          "permissions": {
            "description": "The permissions for a given rule which specifies the rule's access by other users. Possible values: [`public`, `private`]",
            "type": "string"
          },
          "priority": {
            "description": "The priority for a given rule. Possible values: [`low`, `medium`, `high`]",
            "type": "string"
          },
          "substring_matching_enabled": {
            "description": "Whether to monitor for substring matches. Only available for the `Typosquatting` topic.",
            "type": "boolean"
          }
        },
        "required": [
          "breach_monitor_only",
          "breach_monitoring_enabled",
          "filter",
          "id",
          "match_on_tsq_result_types",
          "name",
          "permissions",
          "priority",
          "substring_matching_enabled"
        ]
      },
      "domain.UpdateUserFields": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "domain.UpdateUserRequest": {
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "domain.User": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_login_at": {
            "format": "date-time",
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "domain.UserAction": {
        "description": "Action to be performed",
        "properties": {
          "action_name": {
            "description": "Action name",
            "enum": [
              "reset_password",
              "reset_2fa"
            ],
            "type": "string"
          },
          "action_value": {
            "description": "Value for action, if any",
            "type": "string"
          }
        },
        "required": [
          "action_name"
        ]
      },
      "domain.UserActionRequest": {
        "description": "ID(s) of users the action(s) are to applied to",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/domain.UserAction"
          },
          "ids": {
            "description": "User ID(s).",
            "items": {
              "type": "string"
            },
            "maximum": 5000,
            "minimum": 1,
            "type": "array"
          }
        },
        "required": [
          "action",
          "ids"
        ]
      },
      "domain.UserCreateRequest": {
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "domain.UserGrants": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cid_group_id": {
            "type": "string"
          },
          "cid_group_name": {
            "type": "string"
          },
          "grant_type": {
            "type": "string"
          },
          "parent_cid": {
            "type": "string"
          },
          "role_id": {
            "type": "string"
          },
          "role_name": {
            "type": "string"
          },
          "user_group_id": {
            "type": "string"
          },
          "user_group_name": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "role_id"
        ]
      },
      "domain.UserGroup": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user_group_id": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "domain.UserGroupMembers": {
        "properties": {
          "user_group_id": {
            "type": "string"
          },
          "user_uuids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "user_group_id",
          "user_uuids"
        ]
      },
      "domain.UserGroupMembersRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserGroupMembers"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.UserGroupMembersResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserGroupMembers"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.UserGroupsRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "domain.UserGroupsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.UserMetadata": {
        "properties": {
          "customer": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "customer",
          "uuid"
        ]
      },
      "domain.UserRole": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "display_name",
          "id"
        ]
      },
      "domain.ValueItem": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "domain.Vuln": {
        "properties": {
          "cve": {
            "description": "CVE ID number with four or more digits in the sequence number portion of the ID, examples: CVE-1999-0067, CVE-2014-12345, CVE-2016-7654321",
            "type": "string"
          }
        },
        "required": [
          "cve"
        ]
      },
      "domain.VulnerabilitiesCount": {
        "properties": {
          "critical": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "critical"
        ]
      },
      "domain.Vulnerability": {
        "properties": {
          "affected_products": {
            "description": "List of products affected by vulnerability, specifying product and vendor",
            "items": {
              "$ref": "#/components/schemas/domain.VulnerabilityAffectedProduct"
            },
            "type": "array"
          },
          "community_identifiers": {
            "description": "Vulnerability community identifiers, which is usually populated for the most popular vulnerabilities",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cve": {
            "description": "CVE ID number with four or more digits in the sequence number portion of the ID, examples: CVE-1999-0067, CVE-2014-12345, CVE-2016-7654321",
            "type": "string"
          },
          "cvss_v2_base": {
            "$ref": "#/components/schemas/domain.VulnerabilityCvssV2"
          },
          "cvss_v3_base": {
            "$ref": "#/components/schemas/domain.VulnerabilityCvssV3"
          },
          "description": {
            "description": "Text description of the vulnerability",
            "type": "string"
          },
          "exploit_status": {
            "description": "Exploit status of vulnerability, one of: unproven, available, easilyaccessible, activelyused",
            "type": "string"
          },
          "name": {
            "description": "legacy field, not populated",
            "type": "string"
          },
          "publish_date": {
            "description": "Date when the vulnerability was published",
            "type": "string"
          },
          "related_actors": {
            "description": "Threat actors that exploits vulnerability",
            "items": {
              "$ref": "#/components/schemas/domain.VulnerabilityActor"
            },
            "type": "array"
          },
          "related_reports": {
            "description": "Related finished Intelligence Reports to vulnerability, which usually describes the exploitation or attacks using those",
            "items": {
              "$ref": "#/components/schemas/domain.VulnerabilityReport"
            },
            "type": "array"
          },
          "related_threats": {
            "description": "Malware Families (threats) that are known to be related to the vulnerability",
            "items": {
              "$ref": "#/components/schemas/domain.VulnerabilityRelatedThreat"
            },
            "type": "array"
          },
          "severity": {
            "description": "Severity of the vulnerability, can be empty or one of: LOW, MEDIUM, HIGH, CRITICAL",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "Date when the vulnerability was last time updated in the CrowdStrike's database",
            "type": "string"
          }
        },
        "required": [
          "cve"
        ]
      },
      "domain.VulnerabilityActor": {
        "properties": {
          "id": {
            "description": "Actor internal ID, consisting of it's name with spaces removed",
            "type": "string"
          },
          "name": {
            "description": "Actor name, composed of 2 uppercase words",
            "type": "string"
          }
        }
      },
      "domain.VulnerabilityAffectedProduct": {
        "properties": {
          "product": {
            "description": "Lowercase product name that vulnerability affects",
            "type": "string"
          },
          "vendor": {
            "description": "Lowercase vendor name that develops or provides the affected product",
            "type": "string"
          }
        }
      },
      "domain.VulnerabilityCvssV2": {
        "properties": {
          "access_complexity": {
            "description": "Access complexity of the vulnerability, one of: Low, Medium, High",
            "type": "string"
          },
          "access_vector": {
            "description": "Access vector describing how the vulnerability is exploited, one of: Local, Network, AdjacentNetwork",
            "type": "string"
          },
          "authentication": {
            "description": "Represents the number of times an attacker must authenticate to a target in order to exploit a vulnerability, one of: None, Single, Multiple",
            "type": "string"
          },
          "availability_impact": {
            "type": "string"
          },
          "confidentiality_impact": {
            "type": "string"
          },
          "integrity_impact": {
            "description": "Represents the impact to integrity of a successfully exploited vulnerability, one of: None, Partial, Complete",
            "type": "string"
          },
          "score": {
            "description": "Score of the vulnerability - which is between 0 and 10, the higher is the score - the more riskier the vulnerability is",
            "format": "double",
            "type": "number"
          },
          "severity": {
            "description": "Severity of the vulnerability, can be empty or one of: LOW, MEDIUM, HIGH",
            "type": "string"
          }
        }
      },
      "domain.VulnerabilityCvssV3": {
        "properties": {
          "attack_complexity": {
            "description": "Describes the conditions beyond the attacker’s control that must exist in order to exploit the vulnerability, one of: Low, High",
            "type": "string"
          },
          "attack_vector": {
            "description": "Reflects the context by which vulnerability exploitation is possible, one of: Network, Adjacent, Local, Physical",
            "type": "string"
          },
          "availability_impact": {
            "description": "Measures the potential impact to availability of a successfully exploited misuse vulnerability, one of: None, Low, High",
            "type": "string"
          },
          "confidentiality_impact": {
            "description": "Measures the potential impact on confidentiality of a successfully exploited misuse vulnerability, one of: None, Low, High",
            "type": "string"
          },
          "integrity_impact": {
            "description": "Measures the potential impact to integrity of a successfully exploited misuse vulnerability, one of: None, Low, High",
            "type": "string"
          },
          "privileges_required": {
            "description": "Describes the level of privileges an attacker must possess before successfully exploiting the vulnerability, one of: None, Low, High",
            "type": "string"
          },
          "scope": {
            "description": "The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope, one of: Unchanged, Changed",
            "type": "string"
          },
          "score": {
            "description": "Score of the vulnerability - which is between 0 and 10, the higher is the score - the more riskier the vulnerability is",
            "format": "double",
            "type": "number"
          },
          "severity": {
            "description": "Severity of the vulnerability, can be empty or one of: LOW, MEDIUM, HIGH, CRITICAL",
            "type": "string"
          },
          "user_interaction": {
            "description": "Captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component, one of: None, Required",
            "type": "string"
          }
        }
      },
      "domain.VulnerabilityRelatedThreat": {
        "properties": {
          "capabilities": {
            "description": "List of malware family or threat capabilities",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Malware Family or Threat Name",
            "type": "string"
          }
        }
      },
      "domain.VulnerabilityReport": {
        "properties": {
          "serial_id": {
            "description": "Report serial ID, composed of 2 parts separated with dash, example: CSA-20000, CSIT-220000",
            "type": "string"
          },
          "title": {
            "description": "legacy, not populated field",
            "type": "string"
          }
        }
      },
      "domain.VulnerabilityResponse": {
        "properties": {
          "errors": {
            "description": "Array of API Errors",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Array of Vulnerability documents that were requested",
            "items": {
              "$ref": "#/components/schemas/domain.Vulnerability"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "domain.XDRData": {
        "properties": {
          "detection_id": {
            "type": "string"
          }
        },
        "required": [
          "detection_id"
        ]
      },
      "domain.XDRParams": {
        "properties": {
          "assign_to": {
            "type": "string"
          },
          "assign_to_uuid": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "execution_offset": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "severity": {
            "format": "integer",
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "tactic": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "technique": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "trigger_mode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "assign_to",
          "assign_to_uuid",
          "author",
          "comment",
          "execution_offset",
          "origin",
          "severity",
          "status",
          "tactic",
          "tags",
          "technique",
          "template_id",
          "trigger_mode",
          "type"
        ]
      },
      "domain.XLR8Info": {
        "properties": {
          "asset_criticality": {
            "type": "string"
          },
          "internet_exposed": {
            "type": "boolean"
          },
          "risk_score": {
            "format": "int32",
            "type": "integer"
          },
          "risk_score_string": {
            "type": "string"
          }
        },
        "required": [
          "asset_criticality",
          "internet_exposed",
          "risk_score",
          "risk_score_string"
        ]
      },
      "domain.ZeroTrustSimpleAssessment": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "score": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "aid",
          "score"
        ]
      },
      "driftindicators.DriftEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIDriftIndicators"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "driftindicators.driftIndicatorsCountValue": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/common.CountAsResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "driftindicators.driftIndicatorsFieldValue": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "empowerapi.FalconScript": {
        "properties": {
          "access_roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "content": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_disruptive": {
            "type": "boolean"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "modifies_system": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "required_skus": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "revision": {
            "format": "integer",
            "type": "integer"
          },
          "sha256": {
            "type": "string"
          },
          "size": {
            "format": "integer",
            "type": "integer"
          },
          "use_case": {
            "type": "string"
          },
          "workflow_enabled": {
            "type": "boolean"
          },
          "workflow_input_schema": {
            "type": "string"
          },
          "workflow_output_schema": {
            "type": "string"
          },
          "workflow_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "access_roles",
          "categories",
          "created_by",
          "created_timestamp",
          "description",
          "id",
          "is_disruptive",
          "modified_by",
          "modified_timestamp",
          "modifies_system",
          "name",
          "platform",
          "revision",
          "use_case",
          "workflow_enabled",
          "workflow_input_schema",
          "workflow_output_schema",
          "workflow_tags"
        ]
      },
      "empowerapi.MsaFalconScriptResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/empowerapi.FalconScript"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "empowerapi.MsaIDListResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "empowerapi.MsaPFResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/empowerapi.RemoteCommandPutFileV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "empowerapi.MsaPFResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/empowerapi.RemoteCommandPutFileV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "empowerapi.RemoteCommandPutFileV1": {
        "properties": {
          "comments_for_audit_log": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_uuid": {
            "type": "string"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "file_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_by_uuid": {
            "type": "string"
          },
          "modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permission_type": {
            "type": "string"
          },
          "platform": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "run_attempt_count": {
            "format": "integer",
            "type": "integer"
          },
          "run_success_count": {
            "format": "integer",
            "type": "integer"
          },
          "sha256": {
            "type": "string"
          },
          "size": {
            "format": "integer",
            "type": "integer"
          },
          "write_access": {
            "type": "boolean"
          }
        },
        "required": [
          "run_attempt_count",
          "run_success_count"
        ]
      },
      "empowerapi.RemoteCommandPutFileV2": {
        "properties": {
          "comments_for_audit_log": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_uuid": {
            "type": "string"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "file_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_by_uuid": {
            "type": "string"
          },
          "modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permission_type": {
            "type": "string"
          },
          "platform": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "run_attempt_count": {
            "format": "integer",
            "type": "integer"
          },
          "run_success_count": {
            "format": "integer",
            "type": "integer"
          },
          "sha256": {
            "type": "string"
          },
          "share_with_workflow": {
            "type": "boolean"
          },
          "size": {
            "format": "integer",
            "type": "integer"
          },
          "workflow_input_schema": {
            "type": "string"
          },
          "workflow_is_disruptive": {
            "type": "boolean"
          },
          "workflow_output_schema": {
            "type": "string"
          },
          "write_access": {
            "type": "boolean"
          }
        },
        "required": [
          "run_attempt_count",
          "run_success_count",
          "share_with_workflow",
          "workflow_is_disruptive"
        ]
      },
      "entities.ODSCancelScanRequest": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "entities.ODSScanHostResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanHostMetadata"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "entities.ODSScanMaliciousFileResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.MaliciousFile"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "entities.ODSScanRequest": {
        "properties": {
          "cloud_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "cpu_priority": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "endpoint_notification": {
            "type": "boolean"
          },
          "file_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "initiated_from": {
            "type": "string"
          },
          "max_duration": {
            "format": "int32",
            "type": "integer"
          },
          "pause_duration": {
            "format": "int32",
            "type": "integer"
          },
          "quarantine": {
            "type": "boolean"
          },
          "scan_exclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_inclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sensor_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "sensor_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cloud_ml_level_detection",
          "cloud_ml_level_prevention",
          "cpu_priority",
          "description",
          "endpoint_notification",
          "file_paths",
          "host_groups",
          "hosts",
          "initiated_from",
          "max_duration",
          "pause_duration",
          "quarantine",
          "scan_exclusions",
          "scan_inclusions",
          "sensor_ml_level_detection",
          "sensor_ml_level_prevention"
        ]
      },
      "entities.ODSScanResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Scan"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "entities.ODSScanResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "entities.ODSScheduleScanRequest": {
        "properties": {
          "cloud_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "cloud_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          },
          "cpu_priority": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "endpoint_notification": {
            "type": "boolean"
          },
          "file_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "initiated_from": {
            "type": "string"
          },
          "max_duration": {
            "format": "int32",
            "type": "integer"
          },
          "max_file_size": {
            "format": "int32",
            "type": "integer"
          },
          "pause_duration": {
            "format": "int32",
            "type": "integer"
          },
          "quarantine": {
            "type": "boolean"
          },
          "scan_exclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_inclusions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "schedule": {
            "$ref": "#/components/schemas/domain.Schedule"
          },
          "sensor_ml_level_detection": {
            "format": "int32",
            "type": "integer"
          },
          "sensor_ml_level_prevention": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cloud_ml_level_detection",
          "cloud_ml_level_prevention",
          "cpu_priority",
          "description",
          "endpoint_notification",
          "file_paths",
          "host_groups",
          "initiated_from",
          "max_duration",
          "max_file_size",
          "pause_duration",
          "quarantine",
          "scan_exclusions",
          "scan_inclusions",
          "schedule",
          "sensor_ml_level_detection",
          "sensor_ml_level_prevention"
        ]
      },
      "entities.ODSScheduleScanResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanProfile"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "entities.RollingAverage": {
        "properties": {
          "chrome_os": {
            "format": "double",
            "type": "number"
          },
          "containers": {
            "format": "double",
            "type": "number"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "lumos": {
            "format": "double",
            "type": "number"
          },
          "mobile": {
            "format": "double",
            "type": "number"
          },
          "public_cloud_with_containers": {
            "format": "double",
            "type": "number"
          },
          "public_cloud_without_containers": {
            "format": "double",
            "type": "number"
          },
          "servers_with_containers": {
            "format": "double",
            "type": "number"
          },
          "servers_without_containers": {
            "format": "double",
            "type": "number"
          },
          "workstations": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "chrome_os",
          "containers",
          "date",
          "lumos",
          "mobile",
          "public_cloud_with_containers",
          "public_cloud_without_containers",
          "servers_with_containers",
          "servers_without_containers",
          "workstations"
        ]
      },
      "exclusions.CreateReqV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "excluded_from": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "exclusions.ExclusionV1": {
        "properties": {
          "applied_globally": {
            "type": "boolean"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "excluded_from": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "last_modified": {
            "format": "date-time",
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "regexp_value": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "value_hash": {
            "type": "string"
          }
        },
        "required": [
          "applied_globally",
          "created_by",
          "created_on",
          "groups",
          "id",
          "last_modified",
          "modified_by",
          "regexp_value",
          "value",
          "value_hash"
        ]
      },
      "exclusions.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/exclusions.ExclusionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "executions.ActivityExecutionResult": {
        "properties": {
          "end_timestamp": {
            "description": "Timestamp of when the execution completed. Only present when status is an end state.",
            "format": "date-time",
            "type": "string"
          },
          "error_code": {
            "description": "When a node execution is in an error status this field is present and provides an error code that can be used to determine details why the failure occurred.",
            "format": "int32",
            "type": "integer"
          },
          "error_message": {
            "description": "When a node execution is in an error status this field is present and provides a user friendly error message.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the selected activity that is being configured.",
            "type": "string"
          },
          "mocked": {
            "description": "Whether this node's result is mocked",
            "type": "boolean"
          },
          "name": {
            "description": "Optional user provided name for the activity, if not specified a default of the name for that activity will be used.",
            "type": "string"
          },
          "node_id": {
            "description": "Unique id of the node as specified in the definition.",
            "type": "string"
          },
          "references": {
            "description": "A set of objects which provide references to other URLs related to the activity execution.",
            "items": {
              "$ref": "#/components/schemas/executions.ReferenceLink"
            },
            "type": "array"
          },
          "result": {
            "description": "Result fields of activity execution.",
            "type": "object"
          },
          "start_timestamp": {
            "description": "Timestamp of when the execution first started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Current status of execution for the activity.",
            "type": "string"
          },
          "type": {
            "description": "Root element of the execution route of the activity",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "node_id",
          "start_timestamp",
          "status",
          "type"
        ]
      },
      "executions.AncestorExecution": {
        "properties": {
          "field": {
            "description": "Display name of the input field to the parent execution loop node.",
            "type": "string"
          },
          "id": {
            "description": "Unique id of the ancestor execution id.",
            "type": "string"
          },
          "iteration": {
            "description": "Index number indicating what iteration of the parent execution this given execution is associated with.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "field",
          "id",
          "iteration"
        ]
      },
      "executions.ChildExecutionResult": {
        "properties": {
          "end_timestamp": {
            "description": "Timestamp of when the execution completed. Only present when status is an end state.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique id of the child execution id.",
            "type": "string"
          },
          "iteration": {
            "description": "Index number indicating what iteration of the parent execution this given execution is associated with.",
            "format": "int32",
            "type": "integer"
          },
          "start_timestamp": {
            "description": "Timestamp of when the execution first started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Current status of execution.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "iteration",
          "start_timestamp",
          "status"
        ]
      },
      "executions.ExecutionResult": {
        "properties": {
          "activities": {
            "description": "Details for the result of each activity node.",
            "items": {
              "$ref": "#/components/schemas/executions.ActivityExecutionResult"
            },
            "type": "array"
          },
          "ancestor_executions": {
            "description": "Populated when the execution origin is from a sub model.",
            "items": {
              "$ref": "#/components/schemas/executions.AncestorExecution"
            },
            "type": "array"
          },
          "definition_id": {
            "description": "Unique id of the workflow the execution is associated with.",
            "type": "string"
          },
          "definition_version": {
            "description": "Version of the definition that executed.",
            "format": "int32",
            "type": "integer"
          },
          "end_timestamp": {
            "description": "Timestamp of when the execution completed. Only present when status is an end state.",
            "format": "date-time",
            "type": "string"
          },
          "execution_id": {
            "description": "Unique id generated for the execution.",
            "type": "string"
          },
          "loops": {
            "description": "Details for the results of each loop in the workflow definition.",
            "items": {
              "$ref": "#/components/schemas/executions.LoopResult"
            },
            "type": "array"
          },
          "output_data": {
            "description": "Output from this workflow execution",
            "type": "object"
          },
          "retryable": {
            "description": "A boolean value indicating whether the failed workflow execution is retryable",
            "type": "boolean"
          },
          "start_timestamp": {
            "description": "Timestamp of when the execution first started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Overall status for the execution.",
            "type": "string"
          },
          "summary": {
            "description": "Execution summary if defined in the workflow definition",
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/executions.TriggerResult"
          }
        },
        "required": [
          "activities",
          "ancestor_executions",
          "definition_id",
          "definition_version",
          "execution_id",
          "loops",
          "retryable",
          "start_timestamp",
          "status",
          "trigger"
        ]
      },
      "executions.Iterations": {
        "properties": {
          "completed": {
            "description": "count of executions with completed status.",
            "format": "int32",
            "type": "integer"
          },
          "failed": {
            "description": "count of executions with failed status.",
            "format": "int32",
            "type": "integer"
          },
          "in_progress": {
            "description": "count of executions with in progress status",
            "format": "int32",
            "type": "integer"
          },
          "is_nonrecoverable": {
            "description": "true when sub-model has non recoverable status",
            "type": "boolean"
          },
          "pending": {
            "description": "count of executions that are pending",
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "description": "count of total executions.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "completed",
          "failed",
          "in_progress",
          "is_nonrecoverable",
          "pending",
          "total"
        ]
      },
      "executions.LoopResult": {
        "properties": {
          "child_executions": {
            "description": "Details of all child executions associated with the loop. A child execution is generated for each iteration of the input data.",
            "items": {
              "$ref": "#/components/schemas/executions.ChildExecutionResult"
            },
            "type": "array"
          },
          "end_timestamp": {
            "description": "Timestamp of when the execution completed. Only present when status is an end state.",
            "format": "date-time",
            "type": "string"
          },
          "error_code": {
            "description": "When a node execution is in an error status this field is present and provides an error code that can be used to determine details why the failure occurred.",
            "format": "int32",
            "type": "integer"
          },
          "error_message": {
            "description": "When a node execution is in an error status this field is present and provides a user friendly error message.",
            "type": "string"
          },
          "input_field": {
            "description": "Display name of the input field that the sub model is iterating over.",
            "type": "string"
          },
          "iterations": {
            "$ref": "#/components/schemas/executions.Iterations"
          },
          "mocked": {
            "description": "Whether this node's result is mocked",
            "type": "boolean"
          },
          "node_id": {
            "description": "Unique id of the node as specified in the definition.",
            "type": "string"
          },
          "outputs": {
            "description": "Outputs from all the iterations of the sub model",
            "items": {
              "$ref": "#/components/schemas/executions.LoopResult.outputs"
            },
            "type": "array"
          },
          "start_timestamp": {
            "description": "Timestamp of when the execution first started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Current status of execution for the activity.",
            "type": "string"
          }
        },
        "required": [
          "child_executions",
          "input_field",
          "iterations",
          "node_id",
          "start_timestamp",
          "status"
        ]
      },
      "executions.LoopResult.outputs": {
        "type": "object"
      },
      "executions.ReferenceLink": {
        "properties": {
          "display": {
            "description": "Descriptive name of the reference",
            "type": "string"
          },
          "url": {
            "description": "URL path to the reference",
            "type": "string"
          }
        },
        "required": [
          "display",
          "url"
        ]
      },
      "executions.TriggerResult": {
        "properties": {
          "id": {
            "description": "Unique identifier for the selected trigger as provided by the triggers API",
            "type": "string"
          },
          "mocked": {
            "description": "Whether this node's result is mocked",
            "type": "boolean"
          },
          "name": {
            "description": "Display name of the trigger",
            "type": "string"
          },
          "result": {
            "description": "Opaque blob for result of trigger. Structured according to the trigger's JSON schema'.",
            "type": "object"
          }
        },
        "required": [
          "name"
        ]
      },
      "exports.ExportsResponse": {
        "properties": {
          "Resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ExternalExportJob"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "Resources",
          "meta"
        ]
      },
      "exports.LaunchExportRequest": {
        "properties": {
          "format": {
            "description": "Format of the export file. One of: csv, json",
            "type": "string"
          },
          "fql": {
            "description": "Falcon Query Language string to filter documents",
            "type": "string"
          },
          "resource": {
            "description": "Resource to export. Refer to API docs for the possible values",
            "type": "string"
          },
          "sort": {
            "description": "Sort value to apply to documents. Note: not all resources support sorting",
            "type": "string"
          }
        },
        "required": [
          "format",
          "resource",
          "sort"
        ]
      },
      "exports.LaunchExportResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Export job IDs",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "falconx.AMSICall": {
        "properties": {
          "app_name": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "raw_script_content": {
            "type": "string"
          }
        }
      },
      "falconx.Actor": {
        "properties": {
          "created_timestamp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "first_activity_timestamp": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "image_artifact_id": {
            "type": "string"
          },
          "known_as": {
            "type": "string"
          },
          "last_activity_timestamp": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "origins": {
            "items": {
              "$ref": "#/components/schemas/falconx.Entity"
            },
            "type": "array"
          },
          "short_description": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "target_countries": {
            "items": {
              "$ref": "#/components/schemas/falconx.Entity"
            },
            "type": "array"
          },
          "target_industries": {
            "items": {
              "$ref": "#/components/schemas/falconx.Entity"
            },
            "type": "array"
          },
          "thumbnail_artifact_id": {
            "type": "string"
          }
        }
      },
      "falconx.ActorSummary": {
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        }
      },
      "falconx.AssociatedRuntime": {
        "properties": {
          "name": {
            "type": "string"
          },
          "pid": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "falconx.C2": {
        "properties": {
          "host": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "port": {
            "format": "int32",
            "type": "integer"
          },
          "protocol": {
            "type": "string"
          }
        }
      },
      "falconx.Certificate": {
        "properties": {
          "issuer": {
            "type": "string"
          },
          "md5": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "sha1": {
            "type": "string"
          },
          "valid_from": {
            "format": "date-time",
            "type": "string"
          },
          "valid_until": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "falconx.ContactedHost": {
        "properties": {
          "address": {
            "type": "string"
          },
          "associated_runtime": {
            "items": {
              "$ref": "#/components/schemas/falconx.AssociatedRuntime"
            },
            "type": "array"
          },
          "compromised": {
            "type": "boolean"
          },
          "country": {
            "type": "string"
          },
          "port": {
            "format": "int32",
            "type": "integer"
          },
          "protocol": {
            "type": "string"
          }
        }
      },
      "falconx.DNSRequest": {
        "properties": {
          "address": {
            "type": "string"
          },
          "compromised": {
            "type": "boolean"
          },
          "country": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "registrar_creation_timestamp": {
            "type": "string"
          },
          "registrar_name": {
            "type": "string"
          },
          "registrar_name_servers": {
            "type": "string"
          },
          "registrar_organization": {
            "type": "string"
          }
        }
      },
      "falconx.Entity": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.ErrorsOnly": {
        "properties": {
          "MetaInfo": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "quota": {
            "$ref": "#/components/schemas/falconx.Quota"
          }
        },
        "required": [
          "MetaInfo",
          "errors"
        ]
      },
      "falconx.ExtractedFile": {
        "properties": {
          "description": {
            "type": "string"
          },
          "file_available_to_download": {
            "type": "boolean"
          },
          "file_path": {
            "type": "string"
          },
          "file_size": {
            "format": "int32",
            "type": "integer"
          },
          "md5": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "runtime_process": {
            "type": "string"
          },
          "sha1": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "threat_level": {
            "format": "int32",
            "type": "integer"
          },
          "threat_level_readable": {
            "type": "string"
          },
          "type_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "falconx.ExtractedInterestingString": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "process": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.FileAccess": {
        "properties": {
          "mask": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "falconx.FileDataDirectory": {
        "properties": {
          "is_in_section": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "virtual_address": {
            "type": "string"
          },
          "virtual_size": {
            "type": "string"
          }
        }
      },
      "falconx.FileImport": {
        "properties": {
          "functions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "module": {
            "type": "string"
          }
        }
      },
      "falconx.FileMetadata": {
        "properties": {
          "file_analysis": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file_compositions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "imported_objects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "falconx.FileResource": {
        "properties": {
          "language": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rva": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "falconx.FileSection": {
        "properties": {
          "characteristics": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "entropy": {
            "format": "double",
            "type": "number"
          },
          "md5": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "raw_size": {
            "type": "string"
          },
          "virtual_address": {
            "type": "string"
          },
          "virtual_size": {
            "type": "string"
          }
        }
      },
      "falconx.HTTPRequest": {
        "properties": {
          "header": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "host_ip": {
            "type": "string"
          },
          "host_port": {
            "format": "int32",
            "type": "integer"
          },
          "method": {
            "type": "string"
          },
          "response_code": {
            "format": "int32",
            "type": "integer"
          },
          "response_phrase": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "falconx.Handle": {
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "falconx.Incident": {
        "properties": {
          "details": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "falconx.IntelReportV1": {
        "properties": {
          "actors": {
            "items": {
              "$ref": "#/components/schemas/falconx.Actor"
            },
            "type": "array"
          },
          "malware_families": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "related_indicators": {
            "items": {
              "$ref": "#/components/schemas/falconx.RelatedIndicator"
            },
            "type": "array"
          }
        }
      },
      "falconx.IntelSummaryReportV1": {
        "properties": {
          "actors": {
            "items": {
              "$ref": "#/components/schemas/falconx.ActorSummary"
            },
            "type": "array"
          }
        }
      },
      "falconx.IntelXReportV1": {
        "properties": {
          "malware_config": {
            "$ref": "#/components/schemas/falconx.MalwareConfig"
          },
          "sha256": {
            "type": "string"
          }
        }
      },
      "falconx.MITREAttack": {
        "properties": {
          "attack_id": {
            "type": "string"
          },
          "attack_id_wiki": {
            "type": "string"
          },
          "informative_identifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "malicious_identifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent": {
            "$ref": "#/components/schemas/falconx.MITREAttackParent"
          },
          "suspicious_identifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tactic": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          }
        }
      },
      "falconx.MITREAttackParent": {
        "properties": {
          "attack_id": {
            "type": "string"
          },
          "attack_id_wiki": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          }
        }
      },
      "falconx.MalqueryErrorV1": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "falconx.MalqueryReportV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/falconx.MalqueryErrorV1"
            },
            "type": "array"
          },
          "input": {
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/falconx.MalqueryResource"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "falconx.MalqueryResource": {
        "properties": {
          "family": {
            "type": "string"
          },
          "file_size": {
            "format": "int32",
            "type": "integer"
          },
          "file_type": {
            "type": "string"
          },
          "first_seen_timestamp": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "md5": {
            "type": "string"
          },
          "sha1": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          }
        }
      },
      "falconx.MalwareConfig": {
        "properties": {
          "bitcoin_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "c2s": {
            "items": {
              "$ref": "#/components/schemas/falconx.C2"
            },
            "type": "array"
          },
          "campaign_id": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "encryption_keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "family": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mitre_attacks": {
            "items": {
              "$ref": "#/components/schemas/falconx.MITREAttack"
            },
            "type": "array"
          },
          "mutexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "passwords": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "plugin_version": {
            "type": "string"
          },
          "rs4_key": {
            "type": "string"
          },
          "rsa": {
            "type": "string"
          },
          "urls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "falconx.MatchedSignature": {
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.MemoryDumpData": {
        "properties": {
          "address": {
            "type": "string"
          },
          "binary_content_id": {
            "type": "string"
          },
          "extracted_strings_id": {
            "type": "string"
          },
          "file_process": {
            "type": "string"
          },
          "file_process_disc_pathway": {
            "type": "string"
          },
          "file_process_pid": {
            "format": "int32",
            "type": "integer"
          },
          "file_process_sha256": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "flags": {
            "type": "string"
          },
          "hex_dump_id": {
            "type": "string"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "falconx.MemoryForensic": {
        "properties": {
          "stream_uid": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.MetaInfo": {
        "properties": {
          "MetaInfo": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "quota": {
            "$ref": "#/components/schemas/falconx.Quota"
          }
        },
        "required": [
          "MetaInfo"
        ]
      },
      "falconx.Module": {
        "properties": {
          "base": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "falconx.Parameter": {
        "properties": {
          "argument_number": {
            "format": "int32",
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "meaning": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.Process": {
        "properties": {
          "amsi_calls": {
            "items": {
              "$ref": "#/components/schemas/falconx.AMSICall"
            },
            "type": "array"
          },
          "command_line": {
            "type": "string"
          },
          "file_accesses": {
            "items": {
              "$ref": "#/components/schemas/falconx.FileAccess"
            },
            "type": "array"
          },
          "handles": {
            "items": {
              "$ref": "#/components/schemas/falconx.Handle"
            },
            "type": "array"
          },
          "icon_artifact_id": {
            "type": "string"
          },
          "modules": {
            "items": {
              "$ref": "#/components/schemas/falconx.Module"
            },
            "type": "array"
          },
          "mutants": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "normalized_path": {
            "type": "string"
          },
          "parent_uid": {
            "type": "string"
          },
          "pid": {
            "format": "int32",
            "type": "integer"
          },
          "process_flags": {
            "items": {
              "$ref": "#/components/schemas/falconx.ProcessFlag"
            },
            "type": "array"
          },
          "registry": {
            "items": {
              "$ref": "#/components/schemas/falconx.Registry"
            },
            "type": "array"
          },
          "script_calls": {
            "items": {
              "$ref": "#/components/schemas/falconx.ScriptCall"
            },
            "type": "array"
          },
          "sha256": {
            "type": "string"
          },
          "streams": {
            "items": {
              "$ref": "#/components/schemas/falconx.Stream"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "falconx.ProcessFlag": {
        "properties": {
          "data": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "falconx.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/falconx.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "falconx.Quota": {
        "properties": {
          "in_progress": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          },
          "used": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "in_progress",
          "total",
          "used"
        ]
      },
      "falconx.Registry": {
        "properties": {
          "key": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_human_readable": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.RelatedIndicator": {
        "properties": {
          "created_timestamp": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_timestamp": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.ReportV1": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "has_recording": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "index_timestamp": {
            "type": "string"
          },
          "intel": {
            "items": {
              "$ref": "#/components/schemas/falconx.IntelReportV1"
            },
            "type": "array"
          },
          "intelx": {
            "$ref": "#/components/schemas/falconx.IntelXReportV1"
          },
          "ioc_report_broad_csv_artifact_id": {
            "type": "string"
          },
          "ioc_report_broad_json_artifact_id": {
            "type": "string"
          },
          "ioc_report_broad_maec_artifact_id": {
            "type": "string"
          },
          "ioc_report_broad_stix_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_csv_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_json_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_maec_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_stix_artifact_id": {
            "type": "string"
          },
          "malquery": {
            "items": {
              "$ref": "#/components/schemas/falconx.MalqueryReportV1"
            },
            "type": "array"
          },
          "origin": {
            "type": "string"
          },
          "sandbox": {
            "items": {
              "$ref": "#/components/schemas/falconx.SandboxReportV1"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "threat_graph": {
            "$ref": "#/components/schemas/falconx.ThreatGraphReportV1"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          },
          "user_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_uuid": {
            "type": "string"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "falconx.ReportV1Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/falconx.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/falconx.ReportV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "falconx.SandboxParametersV1": {
        "properties": {
          "action_script": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "command_line": {
            "type": "string"
          },
          "document_password": {
            "type": "string"
          },
          "enable_tor": {
            "type": "boolean"
          },
          "environment_id": {
            "format": "int32",
            "type": "integer"
          },
          "interactivity": {
            "type": "boolean"
          },
          "network_settings": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "submit_name": {
            "type": "string"
          },
          "system_date": {
            "type": "string"
          },
          "system_time": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "falconx.SandboxReportV1": {
        "properties": {
          "all_extracted_strings_artifact_id": {
            "type": "string"
          },
          "architecture": {
            "type": "string"
          },
          "certificates": {
            "items": {
              "$ref": "#/components/schemas/falconx.Certificate"
            },
            "type": "array"
          },
          "certificates_validation_message": {
            "type": "string"
          },
          "classification": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "classification_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contacted_hosts": {
            "items": {
              "$ref": "#/components/schemas/falconx.ContactedHost"
            },
            "type": "array"
          },
          "dll_characteristics": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dns_requests": {
            "items": {
              "$ref": "#/components/schemas/falconx.DNSRequest"
            },
            "type": "array"
          },
          "entrypoint": {
            "type": "string"
          },
          "entrypoint_preview_count": {
            "format": "int32",
            "type": "integer"
          },
          "entrypoint_preview_instructions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "entrypoint_section": {
            "type": "string"
          },
          "environment_description": {
            "type": "string"
          },
          "environment_id": {
            "format": "int32",
            "type": "integer"
          },
          "error_message": {
            "type": "string"
          },
          "error_origin": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "exact_deep_hash": {
            "type": "string"
          },
          "extracted_files": {
            "items": {
              "$ref": "#/components/schemas/falconx.ExtractedFile"
            },
            "type": "array"
          },
          "extracted_interesting_strings": {
            "items": {
              "$ref": "#/components/schemas/falconx.ExtractedInterestingString"
            },
            "type": "array"
          },
          "file_data_directories": {
            "items": {
              "$ref": "#/components/schemas/falconx.FileDataDirectory"
            },
            "type": "array"
          },
          "file_imports": {
            "items": {
              "$ref": "#/components/schemas/falconx.FileImport"
            },
            "type": "array"
          },
          "file_metadata": {
            "$ref": "#/components/schemas/falconx.FileMetadata"
          },
          "file_resources": {
            "items": {
              "$ref": "#/components/schemas/falconx.FileResource"
            },
            "type": "array"
          },
          "file_sections": {
            "items": {
              "$ref": "#/components/schemas/falconx.FileSection"
            },
            "type": "array"
          },
          "file_size": {
            "format": "int32",
            "type": "integer"
          },
          "file_type": {
            "type": "string"
          },
          "file_type_short": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "http_requests": {
            "items": {
              "$ref": "#/components/schemas/falconx.HTTPRequest"
            },
            "type": "array"
          },
          "icon": {
            "type": "string"
          },
          "image_base": {
            "type": "string"
          },
          "image_file_characteristics": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/falconx.Incident"
            },
            "type": "array"
          },
          "intelligence_mitre_attacks": {
            "items": {
              "$ref": "#/components/schemas/falconx.MITREAttack"
            },
            "type": "array"
          },
          "ioc_report_broad_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_artifact_id": {
            "type": "string"
          },
          "is_certificates_valid": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "major_os_version": {
            "format": "int32",
            "type": "integer"
          },
          "memory_dumps": {
            "items": {
              "$ref": "#/components/schemas/falconx.MemoryDumpData"
            },
            "type": "array"
          },
          "memory_dumps_artifact_id": {
            "type": "string"
          },
          "memory_forensics": {
            "items": {
              "$ref": "#/components/schemas/falconx.MemoryForensic"
            },
            "type": "array"
          },
          "memory_strings_artifact_id": {
            "type": "string"
          },
          "minor_os_version": {
            "format": "int32",
            "type": "integer"
          },
          "mitre_attacks": {
            "items": {
              "$ref": "#/components/schemas/falconx.MITREAttack"
            },
            "type": "array"
          },
          "network_settings": {
            "type": "string"
          },
          "packer": {
            "type": "string"
          },
          "pcap_report_artifact_id": {
            "type": "string"
          },
          "processes": {
            "items": {
              "$ref": "#/components/schemas/falconx.Process"
            },
            "type": "array"
          },
          "sample_flags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "screenshots_artifact_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sha256": {
            "type": "string"
          },
          "signatures": {
            "items": {
              "$ref": "#/components/schemas/falconx.Signature"
            },
            "type": "array"
          },
          "submission_type": {
            "type": "string"
          },
          "submit_name": {
            "type": "string"
          },
          "submit_url": {
            "type": "string"
          },
          "subsystem": {
            "type": "string"
          },
          "suricata_alerts": {
            "items": {
              "$ref": "#/components/schemas/falconx.SuricataAlert"
            },
            "type": "array"
          },
          "target_url": {
            "type": "string"
          },
          "threat_score": {
            "format": "int32",
            "type": "integer"
          },
          "urls": {
            "items": {
              "$ref": "#/components/schemas/falconx.UrlData"
            },
            "type": "array"
          },
          "verdict": {
            "type": "string"
          },
          "version_info": {
            "items": {
              "$ref": "#/components/schemas/falconx.VersionInfo"
            },
            "type": "array"
          },
          "visualization": {
            "type": "string"
          },
          "windows_version_bitness": {
            "format": "int32",
            "type": "integer"
          },
          "windows_version_edition": {
            "type": "string"
          },
          "windows_version_name": {
            "type": "string"
          },
          "windows_version_service_pack": {
            "type": "string"
          },
          "windows_version_version": {
            "type": "string"
          }
        },
        "required": [
          "is_certificates_valid"
        ]
      },
      "falconx.SandboxSummaryReportV1": {
        "properties": {
          "classification_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "environment_description": {
            "type": "string"
          },
          "environment_id": {
            "format": "int32",
            "type": "integer"
          },
          "error_message": {
            "type": "string"
          },
          "error_origin": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "file_type": {
            "type": "string"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/falconx.Incident"
            },
            "type": "array"
          },
          "network_settings": {
            "type": "string"
          },
          "sample_flags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sha256": {
            "type": "string"
          },
          "submission_type": {
            "type": "string"
          },
          "submit_name": {
            "type": "string"
          },
          "submit_url": {
            "type": "string"
          },
          "threat_score": {
            "format": "int32",
            "type": "integer"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "falconx.ScriptCall": {
        "properties": {
          "cls_id": {
            "type": "string"
          },
          "dispatch_id": {
            "type": "string"
          },
          "matched_malicious_signatures": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/falconx.Parameter"
            },
            "type": "array"
          },
          "result": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "falconx.Signature": {
        "properties": {
          "attack_id": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "relevance": {
            "format": "int32",
            "type": "integer"
          },
          "threat_level": {
            "format": "int32",
            "type": "integer"
          },
          "threat_level_human": {
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "falconx.Stream": {
        "properties": {
          "executed": {
            "type": "boolean"
          },
          "file_name": {
            "type": "string"
          },
          "human_keywords": {
            "type": "string"
          },
          "instructions_artifact_id": {
            "type": "string"
          },
          "matched_signatures": {
            "items": {
              "$ref": "#/components/schemas/falconx.MatchedSignature"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "falconx.SubmissionParametersV1": {
        "properties": {
          "sandbox": {
            "items": {
              "$ref": "#/components/schemas/falconx.SandboxParametersV1"
            },
            "type": "array"
          },
          "send_email_notification": {
            "type": "boolean"
          },
          "user_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "falconx.SubmissionV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "error_origin": {
            "type": "string"
          },
          "error_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "index_timestamp": {
            "type": "string"
          },
          "interactive_phase": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "sandbox": {
            "items": {
              "$ref": "#/components/schemas/falconx.SandboxParametersV1"
            },
            "type": "array"
          },
          "send_email_notification": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          },
          "user_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_uuid": {
            "type": "string"
          }
        }
      },
      "falconx.SubmissionV1Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/falconx.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/falconx.SubmissionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "falconx.SummaryReportV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "has_recording": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "intel": {
            "items": {
              "$ref": "#/components/schemas/falconx.IntelSummaryReportV1"
            },
            "type": "array"
          },
          "ioc_report_broad_csv_artifact_id": {
            "type": "string"
          },
          "ioc_report_broad_json_artifact_id": {
            "type": "string"
          },
          "ioc_report_broad_maec_artifact_id": {
            "type": "string"
          },
          "ioc_report_broad_stix_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_csv_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_json_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_maec_artifact_id": {
            "type": "string"
          },
          "ioc_report_strict_stix_artifact_id": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "sandbox": {
            "items": {
              "$ref": "#/components/schemas/falconx.SandboxSummaryReportV1"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          },
          "user_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "falconx.SummaryReportV1Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/falconx.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/falconx.SummaryReportV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "falconx.SuricataAlert": {
        "properties": {
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "destination_ip": {
            "type": "string"
          },
          "destination_port": {
            "format": "int32",
            "type": "integer"
          },
          "protocol": {
            "type": "string"
          },
          "sid": {
            "type": "string"
          }
        }
      },
      "falconx.ThreatGraphIndicatorV1": {
        "properties": {
          "customer_prevalence": {
            "type": "string"
          },
          "global_prevalence": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "falconx.ThreatGraphReportV1": {
        "properties": {
          "indicators": {
            "items": {
              "$ref": "#/components/schemas/falconx.ThreatGraphIndicatorV1"
            },
            "type": "array"
          }
        }
      },
      "falconx.UrlData": {
        "properties": {
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "verdict": {
            "type": "string"
          }
        }
      },
      "falconx.VersionInfo": {
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "fielddata.FieldSource": {
        "properties": {
          "case_sensitive": {
            "description": "Indicates whether the field is case sensitive for searching against fulcrum. Some downstream APIs are and others are not, so this is needed so that UI can handle this cohesively.",
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/fielddata.FieldSourceOption"
            },
            "type": "array"
          },
          "sort": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          }
        },
        "required": [
          "strict"
        ]
      },
      "fielddata.FieldSourceOption": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/fielddata.FieldSourceOption.id"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "fielddata.FieldSourceOption.id": {},
      "firewall.CreateFirewallPoliciesReqV1": {
        "description": "A req to create prevention policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to create",
            "items": {
              "$ref": "#/components/schemas/firewall.CreateFirewallPolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "firewall.CreateFirewallPolicyReqV1": {
        "properties": {
          "clone_id": {
            "description": "If specified the firewall rules of the firewall policy identified by the id will be used",
            "type": "string"
          },
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "platform_name"
        ]
      },
      "firewall.PolicyV1": {
        "properties": {
          "channel_version": {
            "description": "Channel file version for the policy",
            "format": "integer",
            "type": "integer"
          },
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "rule_set_id": {
            "description": "Firewall rule set id. This id combines several firewall rules and gets attached to the policy",
            "type": "string"
          }
        },
        "required": [
          "channel_version",
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "rule_set_id"
        ]
      },
      "firewall.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/firewall.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "firewall.UpdateFirewallPoliciesReqV1": {
        "description": "A req to update firewall policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to update",
            "items": {
              "$ref": "#/components/schemas/firewall.UpdateFirewallPolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "firewall.UpdateFirewallPolicyReqV1": {
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "flightcontrolapi.getRolesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.Role"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "flightcontrolapi.userGrantResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.UserGrants"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "flightcontrolapi.userResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.User"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.AggregatesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResult"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.EventsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.MatchEventResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.FilepathTestRequest": {
        "properties": {
          "filepath_pattern": {
            "type": "string"
          },
          "filepath_test_string": {
            "type": "string"
          }
        },
        "required": [
          "filepath_pattern",
          "filepath_test_string"
        ]
      },
      "fwmgr.api.FilepathTestResult": {
        "properties": {
          "filepath_pattern": {
            "type": "string"
          },
          "filepath_test_string": {
            "type": "string"
          },
          "is_match": {
            "type": "boolean"
          }
        },
        "required": [
          "filepath_pattern",
          "filepath_test_string",
          "is_match"
        ]
      },
      "fwmgr.api.FirewallFieldsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.FirewallFieldsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.FirewallFieldsV1": {
        "properties": {
          "default_monitor": {
            "$ref": "#/components/schemas/fwmgr.domain.Monitoring"
          },
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "platform_fields": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.Field"
            },
            "type": "array"
          }
        },
        "required": [
          "default_monitor",
          "id",
          "platform",
          "platform_fields"
        ]
      },
      "fwmgr.api.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/fwmgr.api.QueryPaging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/fwmgr.msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "fwmgr.api.NetworkLocationCreateRequestV1": {
        "properties": {
          "connection_types": {
            "$ref": "#/components/schemas/fwmgr.domain.ConnectionType"
          },
          "default_gateways": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "dhcp_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dns_resolution_targets": {
            "$ref": "#/components/schemas/fwmgr.domain.DNSResolutionTargets"
          },
          "dns_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "type": "boolean"
          },
          "host_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "https_reachable_hosts": {
            "$ref": "#/components/schemas/fwmgr.domain.HTTPSHosts"
          },
          "icmp_request_targets": {
            "$ref": "#/components/schemas/fwmgr.domain.ICMPTargets"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "connection_types",
          "default_gateways",
          "description",
          "dhcp_servers",
          "dns_resolution_targets",
          "dns_servers",
          "enabled",
          "host_addresses",
          "https_reachable_hosts",
          "icmp_request_targets",
          "name"
        ]
      },
      "fwmgr.api.NetworkLocationModifyMetadataRequestV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "dns_resolution_targets_polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "https_reachable_hosts_polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "icmp_request_targets_polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "location_precedence": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "dns_resolution_targets_polling_interval",
          "https_reachable_hosts_polling_interval",
          "icmp_request_targets_polling_interval",
          "location_precedence"
        ]
      },
      "fwmgr.api.NetworkLocationModifyPrecedenceRequestV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "location_precedence": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "location_precedence"
        ]
      },
      "fwmgr.api.NetworkLocationModifyRequestV1": {
        "properties": {
          "connection_types": {
            "$ref": "#/components/schemas/fwmgr.domain.ConnectionType"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "default_gateways": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "dhcp_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dns_resolution_targets": {
            "$ref": "#/components/schemas/fwmgr.domain.DNSResolutionTargets"
          },
          "dns_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "type": "boolean"
          },
          "host_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "https_reachable_hosts": {
            "$ref": "#/components/schemas/fwmgr.domain.HTTPSHosts"
          },
          "icmp_request_targets": {
            "$ref": "#/components/schemas/fwmgr.domain.ICMPTargets"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "connection_types",
          "default_gateways",
          "description",
          "dhcp_servers",
          "dns_resolution_targets",
          "dns_servers",
          "enabled",
          "host_addresses",
          "https_reachable_hosts",
          "icmp_request_targets",
          "id",
          "name"
        ]
      },
      "fwmgr.api.NetworkLocationSummariesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.NetworkLocationSummaryV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.NetworkLocationSummaryV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rule_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cid",
          "description",
          "enabled",
          "id",
          "name",
          "rule_count"
        ]
      },
      "fwmgr.api.NetworkLocationsMetadataV1": {
        "properties": {
          "dns_resolution_targets_polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "https_reachable_hosts_polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "icmp_request_targets_polling_interval": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dns_resolution_targets_polling_interval",
          "https_reachable_hosts_polling_interval",
          "icmp_request_targets_polling_interval"
        ]
      },
      "fwmgr.api.NetworkLocationsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.NetworkLocationsV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.NetworkLocationsV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "connection_types": {
            "$ref": "#/components/schemas/fwmgr.domain.ConnectionType"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "default_gateways": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "dhcp_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dns_resolution_targets": {
            "$ref": "#/components/schemas/fwmgr.domain.DNSResolutionTargetsWithPolling"
          },
          "dns_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "type": "boolean"
          },
          "host_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "https_reachable_hosts": {
            "$ref": "#/components/schemas/fwmgr.domain.HTTPSHostsWithPolling"
          },
          "icmp_request_targets": {
            "$ref": "#/components/schemas/fwmgr.domain.ICMPTargetsWithPolling"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/fwmgr.api.NetworkLocationsMetadataV1"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rule_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cid",
          "connection_types",
          "default_gateways",
          "description",
          "dhcp_servers",
          "dns_resolution_targets",
          "dns_servers",
          "enabled",
          "host_addresses",
          "https_reachable_hosts",
          "icmp_request_targets",
          "id",
          "name",
          "rule_count"
        ]
      },
      "fwmgr.api.PlatformsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.Platform"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.PolicyContainerUpsertRequestV1": {
        "properties": {
          "default_inbound": {
            "type": "string"
          },
          "default_outbound": {
            "type": "string"
          },
          "enforce": {
            "type": "boolean"
          },
          "is_default_policy": {
            "type": "boolean"
          },
          "local_logging": {
            "type": "boolean"
          },
          "platform_id": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "rule_group_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "test_mode": {
            "type": "boolean"
          },
          "tracking": {
            "type": "string"
          }
        },
        "required": [
          "default_inbound",
          "default_outbound",
          "enforce",
          "local_logging",
          "platform_id",
          "policy_id",
          "rule_group_ids",
          "test_mode"
        ]
      },
      "fwmgr.api.PolicyContainersResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.PolicyContainerV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.QueryPaging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "total"
        ]
      },
      "fwmgr.api.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.api.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.RuleCreateRequestV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "address_family": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.workaroundUIFieldValue"
            },
            "type": "array"
          },
          "fqdn": {
            "type": "string"
          },
          "fqdn_enabled": {
            "type": "boolean"
          },
          "icmp": {
            "$ref": "#/components/schemas/fwmgr.domain.ICMP"
          },
          "local_address": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.AddressRange"
            },
            "type": "array"
          },
          "local_port": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.PortRange"
            },
            "type": "array"
          },
          "log": {
            "type": "boolean"
          },
          "monitor": {
            "$ref": "#/components/schemas/fwmgr.domain.Monitoring"
          },
          "name": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "remote_address": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.AddressRange"
            },
            "type": "array"
          },
          "remote_port": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.PortRange"
            },
            "type": "array"
          },
          "temp_id": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "address_family",
          "description",
          "direction",
          "enabled",
          "fields",
          "fqdn",
          "fqdn_enabled",
          "icmp",
          "local_address",
          "local_port",
          "log",
          "monitor",
          "name",
          "protocol",
          "remote_address",
          "remote_port",
          "temp_id"
        ]
      },
      "fwmgr.api.RuleGroupCreateRequestV1": {
        "properties": {
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.RuleCreateRequestV1"
            },
            "type": "array"
          }
        },
        "required": [
          "description",
          "enabled",
          "name",
          "platform",
          "rules"
        ]
      },
      "fwmgr.api.RuleGroupModifyRequestV1": {
        "properties": {
          "diff_operations": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.jsonDiff"
            },
            "type": "array"
          },
          "diff_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "rule_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rule_versions": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "tracking": {
            "type": "string"
          }
        },
        "required": [
          "diff_operations",
          "diff_type",
          "id",
          "rule_ids",
          "rule_versions",
          "tracking"
        ]
      },
      "fwmgr.api.RuleGroupV1": {
        "properties": {
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "policy_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rule_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tracking": {
            "type": "string"
          }
        },
        "required": [
          "created_by",
          "created_on",
          "customer_id",
          "deleted",
          "description",
          "enabled",
          "id",
          "modified_by",
          "modified_on",
          "name",
          "platform",
          "policy_ids",
          "rule_ids",
          "tracking"
        ]
      },
      "fwmgr.api.RuleGroupsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.RuleGroupV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.RulesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.RuleV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.ValidateFilepathResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.api.FilepathTestResult"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.api.jsonDiff": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/fwmgr.api.jsonDiff.value"
          }
        },
        "required": [
          "op",
          "path",
          "value"
        ]
      },
      "fwmgr.api.jsonDiff.value": {},
      "fwmgr.api.workaroundUIFieldValue": {
        "properties": {
          "final_value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ]
      },
      "fwmgr.domain.AddressRange": {
        "properties": {
          "address": {
            "type": "string"
          },
          "netmask": {
            "format": "byte",
            "type": "integer"
          }
        },
        "required": [
          "address"
        ]
      },
      "fwmgr.domain.ConnectionType": {
        "properties": {
          "wired": {
            "type": "boolean"
          },
          "wireless": {
            "$ref": "#/components/schemas/fwmgr.domain.WirelessType"
          }
        },
        "required": [
          "wired",
          "wireless"
        ]
      },
      "fwmgr.domain.DNSResolutionTargets": {
        "properties": {
          "targets": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.DNSTarget"
            },
            "type": "array"
          }
        },
        "required": [
          "targets"
        ]
      },
      "fwmgr.domain.DNSResolutionTargetsWithPolling": {
        "properties": {
          "polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "targets": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.DNSTarget"
            },
            "type": "array"
          }
        },
        "required": [
          "polling_interval"
        ]
      },
      "fwmgr.domain.DNSTarget": {
        "properties": {
          "hostname": {
            "type": "string"
          },
          "ip_match": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "hostname"
        ]
      },
      "fwmgr.domain.Field": {
        "properties": {
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.domain.ValueItem"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "name",
          "options",
          "type"
        ]
      },
      "fwmgr.domain.HTTPSHosts": {
        "properties": {
          "hostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "hostnames"
        ]
      },
      "fwmgr.domain.HTTPSHostsWithPolling": {
        "properties": {
          "hostnames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "polling_interval": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "polling_interval"
        ]
      },
      "fwmgr.domain.ICMP": {
        "properties": {
          "icmp_code": {
            "type": "string"
          },
          "icmp_type": {
            "type": "string"
          }
        },
        "required": [
          "icmp_code",
          "icmp_type"
        ]
      },
      "fwmgr.domain.ICMPTargets": {
        "properties": {
          "targets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "targets"
        ]
      },
      "fwmgr.domain.ICMPTargetsWithPolling": {
        "properties": {
          "polling_interval": {
            "format": "int32",
            "type": "integer"
          },
          "targets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "polling_interval"
        ]
      },
      "fwmgr.domain.Monitoring": {
        "properties": {
          "count": {
            "type": "string"
          },
          "period_ms": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "period_ms"
        ]
      },
      "fwmgr.domain.Platform": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "fwmgr.domain.PortRange": {
        "properties": {
          "end": {
            "format": "integer",
            "type": "integer"
          },
          "start": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "end",
          "start"
        ]
      },
      "fwmgr.domain.ValueItem": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "fwmgr.domain.WirelessType": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "require_encryption": {
            "type": "boolean"
          },
          "ssids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "enabled",
          "require_encryption",
          "ssids"
        ]
      },
      "fwmgr.firewall.AddressRange": {
        "properties": {
          "address": {
            "type": "string"
          },
          "netmask": {
            "format": "byte",
            "type": "integer"
          }
        },
        "required": [
          "address"
        ]
      },
      "fwmgr.firewall.FieldValue": {
        "properties": {
          "final_value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "type",
          "value",
          "values"
        ]
      },
      "fwmgr.firewall.Flags": {
        "properties": {
          "audit": {
            "type": "boolean"
          },
          "log": {
            "type": "boolean"
          },
          "monitor": {
            "type": "boolean"
          }
        },
        "required": [
          "audit",
          "log",
          "monitor"
        ]
      },
      "fwmgr.firewall.ICMP": {
        "properties": {
          "icmp_code": {
            "type": "string"
          },
          "icmp_type": {
            "type": "string"
          }
        },
        "required": [
          "icmp_code",
          "icmp_type"
        ]
      },
      "fwmgr.firewall.MatchEventResponse": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "command_line": {
            "type": "string"
          },
          "connection_direction": {
            "type": "string"
          },
          "domain_name_list": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "flags": {
            "$ref": "#/components/schemas/fwmgr.firewall.Flags"
          },
          "hidden": {
            "type": "boolean"
          },
          "host_name": {
            "type": "string"
          },
          "icmp_code": {
            "type": "string"
          },
          "icmp_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image_file_name": {
            "type": "string"
          },
          "ipv": {
            "type": "string"
          },
          "local_address": {
            "type": "string"
          },
          "local_port": {
            "type": "string"
          },
          "match_count": {
            "type": "string"
          },
          "match_count_since_last_event": {
            "type": "string"
          },
          "network_profile": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "policy_name": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "remote_address": {
            "type": "string"
          },
          "remote_port": {
            "type": "string"
          },
          "rule_action": {
            "type": "string"
          },
          "rule_description": {
            "type": "string"
          },
          "rule_family_id": {
            "type": "string"
          },
          "rule_group_name": {
            "type": "string"
          },
          "rule_id": {
            "type": "string"
          },
          "rule_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "tree_id": {
            "type": "string"
          }
        },
        "required": [
          "aid",
          "cid",
          "command_line",
          "connection_direction",
          "domain_name_list",
          "event_type",
          "flags",
          "hidden",
          "host_name",
          "icmp_code",
          "icmp_type",
          "id",
          "image_file_name",
          "ipv",
          "local_address",
          "local_port",
          "match_count",
          "match_count_since_last_event",
          "network_profile",
          "pid",
          "platform",
          "policy_id",
          "policy_name",
          "protocol",
          "remote_address",
          "remote_port",
          "rule_action",
          "rule_description",
          "rule_family_id",
          "rule_group_name",
          "rule_id",
          "rule_name",
          "status",
          "timestamp",
          "tree_id"
        ]
      },
      "fwmgr.firewall.Monitoring": {
        "properties": {
          "count": {
            "type": "string"
          },
          "period_ms": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "period_ms"
        ]
      },
      "fwmgr.firewall.PolicyContainerV1": {
        "properties": {
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "default_inbound": {
            "type": "string"
          },
          "default_outbound": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "enforce": {
            "type": "boolean"
          },
          "is_default_policy": {
            "type": "boolean"
          },
          "local_logging": {
            "type": "boolean"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "platform_id": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "rule_group_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "test_mode": {
            "type": "boolean"
          },
          "tracking": {
            "type": "string"
          }
        },
        "required": [
          "default_inbound",
          "default_outbound",
          "enforce",
          "local_logging",
          "platform_id",
          "policy_id",
          "rule_group_ids",
          "test_mode"
        ]
      },
      "fwmgr.firewall.PortRange": {
        "properties": {
          "end": {
            "format": "integer",
            "type": "integer"
          },
          "start": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "end",
          "start"
        ]
      },
      "fwmgr.firewall.RuleGroupSummaryV1": {
        "properties": {
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "policy_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "created_by",
          "created_on",
          "description",
          "enabled",
          "id",
          "modified_by",
          "modified_on",
          "name",
          "platform",
          "policy_ids"
        ]
      },
      "fwmgr.firewall.RuleV1": {
        "properties": {
          "action": {
            "type": "string"
          },
          "address_family": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "family": {
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.FieldValue"
            },
            "type": "array"
          },
          "fqdn": {
            "type": "string"
          },
          "fqdn_enabled": {
            "type": "boolean"
          },
          "icmp": {
            "$ref": "#/components/schemas/fwmgr.firewall.ICMP"
          },
          "id": {
            "type": "string"
          },
          "local_address": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.AddressRange"
            },
            "type": "array"
          },
          "local_port": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.PortRange"
            },
            "type": "array"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_on": {
            "type": "string"
          },
          "monitor": {
            "$ref": "#/components/schemas/fwmgr.firewall.Monitoring"
          },
          "name": {
            "type": "string"
          },
          "platform_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "protocol": {
            "type": "string"
          },
          "remote_address": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.AddressRange"
            },
            "type": "array"
          },
          "remote_port": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.firewall.PortRange"
            },
            "type": "array"
          },
          "rule_group": {
            "$ref": "#/components/schemas/fwmgr.firewall.RuleGroupSummaryV1"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "action",
          "address_family",
          "created_by",
          "created_on",
          "deleted",
          "description",
          "direction",
          "enabled",
          "family",
          "fields",
          "fqdn",
          "fqdn_enabled",
          "icmp",
          "id",
          "local_address",
          "local_port",
          "monitor",
          "name",
          "platform_ids",
          "protocol",
          "remote_address",
          "remote_port",
          "rule_group",
          "version"
        ]
      },
      "fwmgr.msa.AggregateQueryRequest": {
        "properties": {
          "date_ranges": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "type": "string"
          },
          "extended_bounds": {
            "$ref": "#/components/schemas/fwmgr.msa.ExtendedBoundsSpec"
          },
          "field": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "max_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregateQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "fwmgr.msa.AggregationResult": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResultItem"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "fwmgr.msa.AggregationResultItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/fwmgr.msa.AggregationResultItem.label"
          },
          "string_from": {
            "type": "string"
          },
          "string_to": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "fwmgr.msa.AggregationResultItem.label": {},
      "fwmgr.msa.DateRangeSpec": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "fwmgr.msa.ExtendedBoundsSpec": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          }
        },
        "required": [
          "max",
          "min"
        ]
      },
      "fwmgr.msa.RangeSpec": {
        "properties": {
          "From": {
            "format": "double",
            "type": "number"
          },
          "To": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "From",
          "To"
        ]
      },
      "fwmgr.msaspec.Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "fwmgr.msaspec.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/fwmgr.msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/fwmgr.msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "fwmgr.msaspec.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "fwmgr.msaspec.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "fwmgr.msaspec.ResponseFields": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/fwmgr.msaspec.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "fwmgr.msaspec.Writes": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "resources_affected"
        ]
      },
      "graph.Condition": {
        "properties": {
          "cel_expression": {
            "description": "CEL expression for the condition, should evaluate to a boolean.",
            "type": "string"
          },
          "display": {
            "description": "User friendly description of the expression. This is generally supplied by the UI/caller.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expression": {
            "description": "FQL expression for the condition on the sequence flow.",
            "type": "string"
          }
        }
      },
      "graph.ConfiguredActivity": {
        "properties": {
          "class": {
            "description": "The class of activity. If undefined it is an ActivityClassExternal",
            "type": "string"
          },
          "flows": {
            "$ref": "#/components/schemas/.flows"
          },
          "id": {
            "description": "The unique identifier of the selected activity that is being configured.",
            "type": "string"
          },
          "inline_configuration": {
            "$ref": "#/components/schemas/graph.InlineActivityConfig"
          },
          "max_seconds": {
            "description": "Maximum seconds to wait for an async process to finish. Overrides default async_max_seconds on Activity seed.",
            "type": "string"
          },
          "name": {
            "description": "Optional user provided name for the activity, if not specified a default of the name for that Activity will be used.",
            "type": "string"
          },
          "nodeID": {
            "type": "string"
          },
          "properties": {
            "description": "Dynamic payload providing values needed to configure the activity for execution. The structure of this data is dictated by the JSON Schema defined for the selected Activity.",
            "type": "object"
          },
          "version": {
            "description": "Version of the activity, if unspecified the latest is used",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "flows",
          "id",
          "name",
          "nodeID",
          "properties"
        ]
      },
      "graph.ConfiguredTrigger": {
        "properties": {
          "id": {
            "description": "Unique identifier for the selected trigger as provided by the triggers API",
            "type": "string"
          },
          "name": {
            "description": "Display name of the trigger",
            "type": "string"
          },
          "nodeID": {
            "type": "string"
          },
          "outgoing_flow": {
            "description": "Reference to the ID of the flow node outbound from the trigger.",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "timer_event_definition": {
            "$ref": "#/components/schemas/graph.TimerEventDefinition"
          },
          "trigger_type": {
            "description": "Denotes the type of trigger, signal based, scheduled, on demand, etc",
            "type": "string"
          },
          "version": {
            "description": "Semantic version of the trigger, if unspecified the evaluator will use the last version before trigger alternate names was introduced",
            "type": "string"
          }
        },
        "required": [
          "name",
          "nodeID",
          "outgoing_flow"
        ]
      },
      "graph.DefinitionModel": {
        "properties": {
          "activities": {
            "description": "Details of all the activities within the model. Each activity has a unique node ID as the key, that is set by the caller.",
            "type": "object"
          },
          "end": {
            "$ref": "#/components/schemas/graph.End"
          },
          "flows": {
            "description": "Details all the sequence flows within the model. Each flow has a unique node ID as the key, that is set by the caller.",
            "type": "object"
          },
          "gateways": {
            "description": "Details all the gateways within the model. Each gateway has a unique node ID as the key, that is set by the caller.",
            "type": "object"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "sub_models": {
            "description": "Details of all sub-models within the model. Each sub-model has a unique node ID as the key set by the caller.",
            "type": "object"
          },
          "trigger": {
            "$ref": "#/components/schemas/graph.ConfiguredTrigger"
          }
        },
        "required": [
          "flows",
          "nodeRegistry",
          "trigger"
        ]
      },
      "graph.End": {
        "properties": {
          "incoming_flows": {
            "description": "Reference to the ID of the flow nodes inbound to the end node.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nodeID": {
            "type": "string"
          },
          "output_fields": {
            "description": "Keys of the fields that are the output for this model",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "summary": {
            "description": "Summary of the workflow is free form text with possibly embedded variables",
            "type": "string"
          }
        },
        "required": [
          "incoming_flows",
          "nodeID"
        ]
      },
      "graph.Flow": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/graph.Condition"
          },
          "source": {
            "description": "Reference to the ID of the node that is the source of the flow.",
            "type": "string"
          },
          "source_alias": {
            "description": "Alias for the source of the flow.",
            "type": "string"
          },
          "target": {
            "description": "Reference to the ID of the node that is the target of the flow.",
            "type": "string"
          }
        },
        "required": [
          "source",
          "target"
        ]
      },
      "graph.Gateway": {
        "properties": {
          "flows": {
            "$ref": "#/components/schemas/.flows"
          },
          "nodeID": {
            "type": "string"
          },
          "type": {
            "description": "The type of gateway being specified, allowed values are; exclusive, inclusive and parallel.",
            "type": "string"
          }
        },
        "required": [
          "flows",
          "nodeID",
          "type"
        ]
      },
      "graph.InlineActivityConfig": {
        "properties": {
          "config": {
            "description": "A map containing an activity configuration for an inline action.",
            "type": "object"
          },
          "input_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "output_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          }
        }
      },
      "graph.Multi": {
        "properties": {
          "array_field": {
            "description": "Name of the field that contains the array in input data",
            "type": "string"
          },
          "array_field_display_name": {
            "description": "Display name of the field that contains the array in input data",
            "type": "string"
          },
          "condition": {
            "$ref": "#/components/schemas/graph.Condition"
          },
          "continue_on_partial_execution": {
            "description": "If true will allow the workflow to continue execution even if some loop iterations fail or when there are no iterations to execute",
            "type": "boolean"
          },
          "max_execution_seconds": {
            "description": "Maximum number of seconds the submodel will run for, if this is exceeded no new iterations will run. If unset a default value is used during execution",
            "format": "int32",
            "type": "integer"
          },
          "max_iteration_count": {
            "description": "Maximum number of iterations allowed in sub model",
            "format": "int32",
            "type": "integer"
          },
          "sequential": {
            "description": "Indicates the loop will run sequentially",
            "type": "boolean"
          }
        },
        "required": [
          "array_field",
          "array_field_display_name",
          "continue_on_partial_execution",
          "max_execution_seconds",
          "max_iteration_count"
        ]
      },
      "graph.SubModel": {
        "properties": {
          "flows": {
            "$ref": "#/components/schemas/.flows"
          },
          "model": {
            "$ref": "#/components/schemas/graph.DefinitionModel"
          },
          "multi": {
            "$ref": "#/components/schemas/graph.Multi"
          },
          "name": {
            "description": "Optional user provided name for the submodel.",
            "type": "string"
          },
          "nodeID": {
            "type": "string"
          }
        },
        "required": [
          "flows",
          "model",
          "multi",
          "nodeID"
        ]
      },
      "graph.TimerEventDefinition": {
        "properties": {
          "end_date": {
            "description": "End date in mm-dd-yyyy format",
            "type": "string"
          },
          "skip_concurrent": {
            "description": "Flag indicating if concurrent execution of scheduled workflow should be skipped or not",
            "type": "boolean"
          },
          "start_date": {
            "description": "Start date in mm-dd-yyyy format",
            "type": "string"
          },
          "time_cycle": {
            "description": "A time cycle element specifies repeating intervals, and can be specified using using cron expressions.",
            "type": "string"
          },
          "tz": {
            "description": "Timezone label from IANA timezone database, for example, America/Los_Angeles",
            "type": "string"
          }
        },
        "required": [
          "skip_concurrent",
          "time_cycle",
          "tz"
        ]
      },
      "graph.ValidationError": {
        "properties": {
          "cid": {
            "description": "The cid the validation error applies to if it is not the CID managing the workflow",
            "type": "string"
          },
          "code": {
            "description": "identifier for UI to indicate reason for node being invalid.",
            "format": "int32",
            "type": "integer"
          },
          "display_name": {
            "description": "Display name for the property if it exists in a trigger or activity",
            "type": "string"
          },
          "level": {
            "description": "Level is used to indicate if this is an error or warning validation. If empty it should be assumed to be Error Level",
            "type": "string"
          },
          "message": {
            "description": "Detail of why the node is invalid.",
            "type": "string"
          },
          "node_id": {
            "description": "ID of the node in the graph that has been invalidated.",
            "type": "string"
          },
          "parent_node_id": {
            "description": "ID of the parent node in the graph that resulted in a child node being invalidated.",
            "type": "string"
          },
          "property": {
            "description": "Used to specify an exact property that is invalid for fql evaluation",
            "type": "string"
          },
          "resource_id": {
            "description": "Resource ID for property if it exists, e.g. trigger ID or activity ID",
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "host_groups.CreateGroupReqV1": {
        "description": "A specific device group to create",
        "properties": {
          "assignment_rule": {
            "description": "The FQL assignment rule for the group. This may only be specified if the groups type is 'dynamic'",
            "type": "string"
          },
          "description": {
            "description": "The description of the group",
            "type": "string"
          },
          "group_type": {
            "description": "The type of device group to create",
            "enum": [
              "static",
              "dynamic",
              "staticByID"
            ],
            "type": "string"
          },
          "name": {
            "description": "The name of the group",
            "type": "string"
          }
        },
        "required": [
          "group_type",
          "name"
        ]
      },
      "host_groups.CreateGroupsReqV1": {
        "description": "A request to create device groups",
        "properties": {
          "resources": {
            "description": "A collection of device groups to create",
            "items": {
              "$ref": "#/components/schemas/host_groups.CreateGroupReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "host_groups.HostGroupV1": {
        "description": "A host group which targets a set of devices either through a dynamic assignment rule or a static set of hosts",
        "properties": {
          "assignment_rule": {
            "description": "The assignment rule of a group",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "An additional description of the group or the devices it targets",
            "type": "string"
          },
          "group_type": {
            "description": "The method by which this host group is managed",
            "enum": [
              "static",
              "dynamic",
              "staticByID"
            ],
            "type": "string"
          },
          "id": {
            "description": "The identifier of this host group",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The name of the group",
            "type": "string"
          }
        },
        "required": [
          "created_by",
          "created_timestamp",
          "description",
          "id",
          "modified_by",
          "modified_timestamp",
          "name"
        ]
      },
      "host_groups.MembersRespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "A collection of device details",
            "items": {
              "$ref": "#/components/schemas/device.Device"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "host_groups.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "host_groups.UpdateGroupReqV1": {
        "description": "A specific group to be updated",
        "properties": {
          "assignment_rule": {
            "description": "The new assignment rule of the group. Note: If the group type is static, this field cannot be updated manually",
            "type": "string"
          },
          "description": {
            "description": "The new description of the group",
            "type": "string"
          },
          "id": {
            "description": "The id of the group to update",
            "type": "string"
          },
          "name": {
            "description": "The new name of the group",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "host_groups.UpdateGroupsReqV1": {
        "description": "A request to update a set of device groups",
        "properties": {
          "resources": {
            "description": "A collection of groups to update",
            "items": {
              "$ref": "#/components/schemas/host_groups.UpdateGroupReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "images.ExtCombinedImagesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ExtAPIImageCombined"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiCombinedImageExport": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageCombinedExport"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiCustomerAndImage": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APICustomerAndImage"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageAssessmentHistory": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageAssessmentHistory"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageByVulnerabilityCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageByVulnerabilityCount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageCount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageCountByBaseOS": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageCountByState": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageIssuesSummary": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageIssuesSummary"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "images.apiImageVulnerabilitiesSummary": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageVulnerabilitiesSummary"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "ingestion.CVEExploitReference": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "kind",
          "label",
          "url"
        ]
      },
      "ingestion.CVEExploitSource": {
        "properties": {
          "is_flat": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/ingestion.CVEExploitReference"
            },
            "type": "array"
          },
          "source": {
            "type": "string"
          }
        },
        "required": [
          "is_flat",
          "label",
          "references",
          "source"
        ]
      },
      "ingestion.ExPRTRatingFactors": {
        "properties": {
          "description": {
            "type": "string"
          },
          "factor": {
            "type": "string"
          },
          "impact": {
            "format": "int32",
            "type": "integer"
          },
          "long_description": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "factor",
          "impact",
          "long_description"
        ]
      },
      "ingestion.Reference": {
        "properties": {
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "tags",
          "url"
        ]
      },
      "internal.SensorStatus": {
        "properties": {
          "agent_version": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "heartbeat_time": {
            "format": "int64",
            "type": "integer"
          },
          "hostname": {
            "type": "string"
          },
          "idp_policy_id": {
            "type": "string"
          },
          "idp_policy_name": {
            "type": "string"
          },
          "kerberos_config": {
            "type": "string"
          },
          "ldap_config": {
            "type": "string"
          },
          "ldaps_config": {
            "type": "string"
          },
          "local_ip": {
            "type": "string"
          },
          "machine_domain": {
            "type": "string"
          },
          "ntlm_config": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "rdp_to_dc_config": {
            "type": "string"
          },
          "smb_to_dc_config": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_causes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ti_enabled": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "device_id"
        ]
      },
      "inventoryapi.SurfaceError": {
        "properties": {
          "code": {
            "description": "Error code",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "Error details",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "inventoryapi.UserExternalAsset": {
        "properties": {
          "id": {
            "description": "Unique identifier for the asset",
            "type": "string"
          },
          "value": {
            "description": "Value of the asset",
            "type": "string"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "inventoryapi.UserExternalAssetCreate": {
        "properties": {
          "assets": {
            "description": "Assets to be added",
            "items": {
              "$ref": "#/components/schemas/inventoryapi.UserExternalAsset"
            },
            "type": "array"
          },
          "subsidiary_id": {
            "description": "Subsidiary ID to which assets are to be added",
            "type": "string"
          }
        },
        "required": [
          "assets",
          "subsidiary_id"
        ]
      },
      "inventoryapi.UserExternalAssetCreateRequestV1": {
        "properties": {
          "data": {
            "description": "Data is the list of assets to be added",
            "items": {
              "$ref": "#/components/schemas/inventoryapi.UserExternalAssetCreate"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ]
      },
      "inventoryapi.UserExternalAssetCreateResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/inventoryapi.UserExternalAssetResult"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "inventoryapi.UserExternalAssetResult": {
        "properties": {
          "asset_type": {
            "description": "Asset type",
            "type": "string"
          },
          "current_subsidiary": {
            "$ref": "#/components/schemas/inventoryapidomain.Subsidiary"
          },
          "error": {
            "$ref": "#/components/schemas/inventoryapi.SurfaceError"
          },
          "id": {
            "description": "The ID of the asset",
            "type": "string"
          },
          "index": {
            "description": "The index of the asset",
            "format": "int32",
            "type": "integer"
          },
          "raw_value": {
            "description": "Raw value of the asset to be created",
            "type": "string"
          },
          "subsidiary": {
            "$ref": "#/components/schemas/inventoryapidomain.Subsidiary"
          },
          "value": {
            "description": "Asset",
            "type": "string"
          }
        },
        "required": [
          "id",
          "index",
          "raw_value",
          "subsidiary"
        ]
      },
      "inventoryapidomain.Subsidiary": {
        "properties": {
          "id": {
            "description": "Unique identifier for the subsidiary",
            "type": "string"
          },
          "name": {
            "description": "Name of the subsidiary",
            "type": "string"
          }
        }
      },
      "ioa.CloudAccountID": {
        "properties": {
          "aws_account_id": {
            "type": "string"
          },
          "azure_subscription_id": {
            "type": "string"
          },
          "azure_tenant_id": {
            "type": "string"
          }
        }
      },
      "ioa.Enrichments": {
        "properties": {
          "inventory": {
            "$ref": "#/components/schemas/detection.InventoryEnrichment"
          },
          "sensor_events": {
            "$ref": "#/components/schemas/detection.Enrichment"
          }
        }
      },
      "ioa.EventAggregate": {
        "properties": {
          "cid_severity": {
            "type": "integer"
          },
          "confidence": {
            "format": "int32",
            "type": "integer"
          },
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "first_timestamp": {
            "type": "string"
          },
          "join_keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_timestamp": {
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/.resource"
          },
          "score": {
            "format": "int32",
            "type": "integer"
          },
          "threatintel": {
            "$ref": "#/components/schemas/detection.AggregateThreatIntel"
          },
          "timestamps": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "resource"
        ]
      },
      "ioa_exclusions.IoaExclusionCreateReqV1": {
        "properties": {
          "cl_regex": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "detection_json": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ifn_regex": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pattern_id": {
            "type": "string"
          },
          "pattern_name": {
            "type": "string"
          }
        },
        "required": [
          "cl_regex",
          "description",
          "detection_json",
          "groups",
          "ifn_regex",
          "name",
          "pattern_id",
          "pattern_name"
        ]
      },
      "ioa_exclusions.IoaExclusionRespV1": {
        "properties": {
          "applied_globally": {
            "type": "boolean"
          },
          "cl_regex": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "detection_json": {
            "type": "string"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "ifn_regex": {
            "type": "string"
          },
          "last_modified": {
            "format": "date-time",
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pattern_id": {
            "type": "string"
          },
          "pattern_name": {
            "type": "string"
          }
        },
        "required": [
          "applied_globally",
          "cl_regex",
          "created_by",
          "created_on",
          "description",
          "detection_json",
          "groups",
          "id",
          "ifn_regex",
          "last_modified",
          "modified_by",
          "name",
          "pattern_id",
          "pattern_name"
        ]
      },
      "ioa_exclusions.IoaExclusionUpdateReqV1": {
        "properties": {
          "cl_regex": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "detection_json": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "ifn_regex": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pattern_id": {
            "type": "string"
          },
          "pattern_name": {
            "type": "string"
          }
        },
        "required": [
          "cl_regex",
          "description",
          "detection_json",
          "groups",
          "id",
          "ifn_regex",
          "name",
          "pattern_id",
          "pattern_name"
        ]
      },
      "ioa_exclusions.IoaExclusionsRespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/ioa_exclusions.IoaExclusionRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "ioa_rule_groups.RuleGroupV1": {
        "description": "An IOA rule group which contains a set of IOA rules",
        "properties": {
          "comment": {
            "type": "string"
          },
          "committed_timestamp": {
            "description": "The last attempted time CFS got this data on the rule group",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the rule group",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "description": {
            "description": "An additional description of the group or the rules it contains",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "description": "The identifier of this IOA rule group",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the rule group",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The name of the group",
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "rule_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "committed_timestamp",
          "created_by",
          "created_timestamp",
          "customer_id",
          "deleted",
          "description",
          "enabled",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform",
          "rule_ids",
          "version"
        ]
      },
      "iocapi.IOCDevicesCount": {
        "properties": {
          "device_count": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "limit_exceeded": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "device_count",
          "id",
          "type",
          "value"
        ]
      },
      "iocapi.MsaReplyDevicesRanOn": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/iocapi.responseMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "iocapi.MsaReplyIOCDevicesCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/iocapi.responseMeta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/iocapi.IOCDevicesCount"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "iocapi.MsaReplyProcessesRanOn": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/iocapi.responseMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "iocapi.paginationMeta": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "next_page": {
            "type": "string"
          },
          "offset": {
            "$ref": "#/components/schemas/iocapi.paginationMeta.offset"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "iocapi.paginationMeta.offset": {},
      "iocapi.responseMeta": {
        "properties": {
          "entity": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/iocapi.paginationMeta"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "jsonschema.Authorization": {
        "properties": {
          "apiScope": {
            "type": "string"
          },
          "complexPermissions": {
            "$ref": "#/components/schemas/jsonschema.ComplexPermissions"
          },
          "featureFlag": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.Permission"
            },
            "type": "array"
          }
        },
        "required": [
          "complexPermissions",
          "featureFlag",
          "permissions"
        ]
      },
      "jsonschema.CollectionIndexField": {
        "properties": {
          "field": {
            "type": "string"
          },
          "fql_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "field",
          "fql_name",
          "type"
        ]
      },
      "jsonschema.ComplexPermissions": {
        "properties": {
          "OR": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.ComplexPermissions.OR"
            },
            "type": "array"
          }
        }
      },
      "jsonschema.ComplexPermissions.OR": {
        "properties": {
          "AND": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.Permission"
            },
            "type": "array"
          }
        }
      },
      "jsonschema.ConditionGroupFields": {
        "properties": {
          "condition_control": {
            "type": "boolean"
          },
          "control_name": {
            "type": "string"
          },
          "controller": {
            "type": "boolean"
          },
          "dependent_control": {
            "type": "string"
          },
          "requires_meta": {
            "type": "string"
          },
          "reset_fields": {
            "$ref": "#/components/schemas/jsonschema.ResetFields"
          }
        }
      },
      "jsonschema.DurationOption": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "jsonschema.Permission": {
        "properties": {
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "resource"
        ]
      },
      "jsonschema.Pivot": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "entity": {
            "type": "string"
          },
          "entityValue": {
            "type": "string"
          },
          "queryString": {
            "type": "string"
          },
          "searchable": {
            "type": "boolean"
          },
          "sortByDisplay": {
            "type": "boolean"
          },
          "sortByValue": {
            "type": "boolean"
          },
          "sortDesc": {
            "type": "boolean"
          },
          "strict": {
            "type": "boolean"
          }
        }
      },
      "jsonschema.ResetFields": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ]
      },
      "jsonschema.Schema": {
        "properties": {
          "SubSchema": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "definitions": {
            "type": "object"
          }
        },
        "required": [
          "SubSchema"
        ]
      },
      "jsonschema.SignalsExtensions": {
        "properties": {
          "enum_wrapper": {
            "type": "boolean"
          },
          "example_display_map": {
            "type": "object"
          },
          "path_name": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        }
      },
      "jsonschema.SubSchema": {
        "properties": {
          "$ref": {
            "type": "string"
          },
          "$schema": {
            "type": "string"
          },
          "additionalItems": {
            "type": "string"
          },
          "additionalProperties": {
            "type": "string"
          },
          "allOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "anyOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "binaryEncoding": {
            "type": "string"
          },
          "const": {
            "$ref": "#/components/schemas/jsonschema.SubSchema.const"
          },
          "default": {
            "$ref": "#/components/schemas/jsonschema.SubSchema.default"
          },
          "dependencies": {
            "type": "object"
          },
          "deprecated": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "else": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "enum": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema.enum"
            },
            "type": "array"
          },
          "errorMessage": {
            "type": "string"
          },
          "examples": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema.examples"
            },
            "type": "array"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "format": {
            "type": "string"
          },
          "if": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "items": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "maxItems": {
            "format": "int32",
            "type": "integer"
          },
          "maxLength": {
            "format": "int32",
            "type": "integer"
          },
          "maxProperties": {
            "format": "int32",
            "type": "integer"
          },
          "maximum": {
            "format": "int32",
            "type": "integer"
          },
          "media": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "minItems": {
            "format": "int32",
            "type": "integer"
          },
          "minLength": {
            "format": "int32",
            "type": "integer"
          },
          "minProperties": {
            "format": "int32",
            "type": "integer"
          },
          "minimum": {
            "format": "int32",
            "type": "integer"
          },
          "multipleOf": {
            "format": "int32",
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "oneOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "patternProperties": {
            "type": "object"
          },
          "properties": {
            "type": "object"
          },
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "then": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "ui:component": {
            "type": "string"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "x-cs-authorization": {
            "$ref": "#/components/schemas/jsonschema.Authorization"
          },
          "x-cs-can-create": {
            "type": "boolean"
          },
          "x-cs-condition-group-fields": {
            "$ref": "#/components/schemas/jsonschema.ConditionGroupFields"
          },
          "x-cs-do-not-hide": {
            "type": "boolean"
          },
          "x-cs-immutable": {
            "type": "boolean"
          },
          "x-cs-indexable": {
            "type": "boolean"
          },
          "x-cs-indexable-fields": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.CollectionIndexField"
            },
            "type": "array"
          },
          "x-cs-max-duration": {
            "format": "int32",
            "type": "integer"
          },
          "x-cs-min-duration": {
            "format": "int32",
            "type": "integer"
          },
          "x-cs-not-parameterizable": {
            "type": "boolean"
          },
          "x-cs-order": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-pivot": {
            "$ref": "#/components/schemas/jsonschema.Pivot"
          },
          "x-cs-signals": {
            "$ref": "#/components/schemas/jsonschema.SignalsExtensions"
          },
          "x-cs-signals-category": {
            "type": "string"
          },
          "x-cs-signals-operators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-signals-subCategory": {
            "type": "string"
          },
          "x-cs-tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-ui": {
            "$ref": "#/components/schemas/jsonschema.UIExtensions"
          },
          "x-cs-workflow": {
            "$ref": "#/components/schemas/jsonschema.WorkflowExtensions"
          }
        }
      },
      "jsonschema.SubSchema.const": {},
      "jsonschema.SubSchema.default": {},
      "jsonschema.SubSchema.enum": {},
      "jsonschema.SubSchema.examples": {},
      "jsonschema.UIExtensions": {
        "properties": {
          "accept": {
            "description": "supported file extensions for file upload, eg. '.yaml', '.json'",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "component": {
            "type": "string"
          },
          "customGroupName": {
            "type": "string"
          },
          "durationOptions": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.DurationOption"
            },
            "type": "array"
          },
          "encoding": {
            "description": "supported encoding for file upload, eg. 'base64'",
            "type": "string"
          },
          "helperText": {
            "type": "string"
          },
          "schema_reference": {
            "description": "local reference to look up the dynamic json schema and mobiledoc card configuration returned in the top-level of api response",
            "type": "string"
          }
        }
      },
      "jsonschema.WorkflowExtensions": {
        "properties": {
          "description": {
            "type": "string"
          },
          "max_file_size": {
            "description": "max file size allowed in bytes",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-no-variable-injection": {
            "type": "boolean"
          }
        }
      },
      "k8sassets.ClusterEnrichmentData": {
        "properties": {
          "container_count": {
            "format": "int64",
            "type": "integer"
          },
          "image_count": {
            "format": "int64",
            "type": "integer"
          },
          "node_count": {
            "format": "int64",
            "type": "integer"
          },
          "pod_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "container_count",
          "image_count",
          "node_count",
          "pod_count"
        ]
      },
      "k8sassets.ClusterEnrichmentEntry": {
        "properties": {
          "cluster_id": {
            "type": "string"
          },
          "enrichment_data": {
            "$ref": "#/components/schemas/k8sassets.ClusterEnrichmentData"
          }
        },
        "required": [
          "cluster_id",
          "enrichment_data"
        ]
      },
      "k8sassets.ClusterEnrichmentResponse": {
        "properties": {
          "EnrichmentData": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.ClusterEnrichmentEntry"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "EnrichmentData",
          "meta"
        ]
      },
      "k8sassets.ContainerEnrichmentData": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.ContainerEnrichmentData.agents"
            },
            "type": "array"
          }
        },
        "required": [
          "agents"
        ]
      },
      "k8sassets.ContainerEnrichmentData.agents": {
        "type": "object"
      },
      "k8sassets.ContainerEnrichmentEntry": {
        "properties": {
          "container_id": {
            "type": "string"
          },
          "enrichment_data": {
            "$ref": "#/components/schemas/k8sassets.ContainerEnrichmentData"
          }
        },
        "required": [
          "container_id",
          "enrichment_data"
        ]
      },
      "k8sassets.ContainerEnrichmentResponse": {
        "properties": {
          "EnrichmentData": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.ContainerEnrichmentEntry"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "EnrichmentData",
          "meta"
        ]
      },
      "k8sassets.ContainerInfo": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "k8sassets.DeploymentEnrichmentData": {
        "properties": {
          "pod_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "pod_count"
        ]
      },
      "k8sassets.DeploymentEnrichmentEntry": {
        "properties": {
          "deployment_id": {
            "type": "string"
          },
          "enrichment_data": {
            "$ref": "#/components/schemas/k8sassets.DeploymentEnrichmentData"
          }
        },
        "required": [
          "deployment_id",
          "enrichment_data"
        ]
      },
      "k8sassets.DeploymentEnrichmentResponse": {
        "properties": {
          "EnrichmentData": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.DeploymentEnrichmentEntry"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "EnrichmentData",
          "meta"
        ]
      },
      "k8sassets.NodeEnrichmentData": {
        "properties": {
          "container_count": {
            "format": "int64",
            "type": "integer"
          },
          "pod_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "container_count",
          "pod_count"
        ]
      },
      "k8sassets.NodeEnrichmentEntry": {
        "properties": {
          "enrichment_data": {
            "$ref": "#/components/schemas/k8sassets.NodeEnrichmentData"
          },
          "node_name": {
            "type": "string"
          }
        },
        "required": [
          "enrichment_data",
          "node_name"
        ]
      },
      "k8sassets.NodeEnrichmentResponse": {
        "properties": {
          "EnrichmentData": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.NodeEnrichmentEntry"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "EnrichmentData",
          "meta"
        ]
      },
      "k8sassets.PodEnrichmentData": {
        "properties": {
          "container_count": {
            "format": "int64",
            "type": "integer"
          },
          "container_info": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.ContainerInfo"
            },
            "type": "array"
          },
          "deployment_id": {
            "type": "string"
          }
        },
        "required": [
          "container_count",
          "container_info",
          "deployment_id"
        ]
      },
      "k8sassets.PodEnrichmentEntry": {
        "properties": {
          "enrichment_data": {
            "$ref": "#/components/schemas/k8sassets.PodEnrichmentData"
          },
          "pod_id": {
            "type": "string"
          }
        },
        "required": [
          "enrichment_data",
          "pod_id"
        ]
      },
      "k8sassets.PodEnrichmentResponse": {
        "properties": {
          "EnrichmentData": {
            "items": {
              "$ref": "#/components/schemas/k8sassets.PodEnrichmentEntry"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "EnrichmentData",
          "meta"
        ]
      },
      "k8sioms.KubernetesIOMEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIKubernetesIOM"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "k8sioms.kubernetesIOMCountValue": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/common.CountAsResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "k8sioms.kubernetesIOMFieldValue": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "k8sreg.APIKey": {
        "properties": {
          "api_key": {
            "type": "string"
          }
        },
        "required": [
          "api_key"
        ]
      },
      "k8sreg.AWSAccountResp": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "aws_permissions_status": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AccountPermissionsStatus"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "cloudformation_url": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "from_cspm": {
            "type": "boolean"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "aws_permissions_status",
          "cid",
          "created_at",
          "from_cspm",
          "iam_role_arn",
          "is_master",
          "status",
          "updated_at"
        ]
      },
      "k8sreg.AWSClusterItemResp": {
        "properties": {
          "cloud_formation_url": {
            "type": "string"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          }
        },
        "required": [
          "is_master"
        ]
      },
      "k8sreg.AccountPermissionsStatus": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "k8sreg.AzureAcctClusterItemResp": {
        "properties": {
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "tenant_id"
        ]
      },
      "k8sreg.AzureBashScript": {
        "properties": {
          "script": {
            "type": "string"
          },
          "service_account_public_keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "script",
          "service_account_public_keys"
        ]
      },
      "k8sreg.AzureSubEntity": {
        "properties": {
          "subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "subscription_id",
          "tenant_id"
        ]
      },
      "k8sreg.AzureSubscriptionResp": {
        "properties": {
          "azure_permissions_status": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AccountPermissionsStatus"
            },
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "from_cspm": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "azure_permissions_status",
          "created_at",
          "from_cspm",
          "status",
          "subscription_id",
          "tenant_id",
          "updated_at"
        ]
      },
      "k8sreg.AzureTenantConfig": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "public_certificate": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "client_id",
          "tenant_id"
        ]
      },
      "k8sreg.AzureTenantInfo": {
        "properties": {
          "subscription_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "subscription_ids",
          "tenant_id"
        ]
      },
      "k8sreg.ClusterResp": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "agent_version": {
            "$ref": "#/components/schemas/k8sreg.VersionResp"
          },
          "cid": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "cluster_service": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "helm_version": {
            "$ref": "#/components/schemas/k8sreg.VersionResp"
          },
          "k8s_version": {
            "$ref": "#/components/schemas/k8sreg.VersionResp"
          },
          "last_heartbeat_at": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "agent_version",
          "cid",
          "cluster_id",
          "cluster_name",
          "cluster_service",
          "created_at",
          "helm_version",
          "k8s_version",
          "last_heartbeat_at",
          "location",
          "status",
          "updated_at"
        ]
      },
      "k8sreg.CreateAWSAccReq": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.CreateAWSAccReq.resources"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "k8sreg.CreateAWSAccReq.resources": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "region"
        ]
      },
      "k8sreg.CreateAWSAccResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AWSAccountResp"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.CreateAzureSubReq": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AzureSubEntity"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "k8sreg.GetAWSAccountsResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AWSAccountResp"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetAzureBashScriptResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AzureBashScript"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetAzureSubscriptionsResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AzureSubscriptionResp"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetAzureTenantConfigResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AzureTenantConfig"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetAzureTenantInfoResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.AzureTenantInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetClustersResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.ClusterResp"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetLocationsResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.LocationResp"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetScriptsResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.GetScriptsResp.resources"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.GetScriptsResp.resources": {
        "type": "object"
      },
      "k8sreg.HelmYAMLResp": {},
      "k8sreg.ListClusterCloudItemResp": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "aws_meta": {
            "$ref": "#/components/schemas/k8sreg.AWSClusterItemResp"
          },
          "azure_meta": {
            "$ref": "#/components/schemas/k8sreg.AzureAcctClusterItemResp"
          },
          "cloud_status": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "cluster_service": {
            "type": "string"
          },
          "cluster_status": {
            "type": "string"
          },
          "from_cspm": {
            "type": "boolean"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "cloud_status",
          "cluster_service"
        ]
      },
      "k8sreg.ListClusterCloudResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.ListClusterCloudItemResp"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.LocationResp": {
        "properties": {
          "cloud": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "cloud",
          "location"
        ]
      },
      "k8sreg.RegenAPIKeyResp": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/k8sreg.APIKey"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "k8sreg.VersionResp": {
        "properties": {
          "bugfix": {
            "format": "int32",
            "type": "integer"
          },
          "major": {
            "format": "int32",
            "type": "integer"
          },
          "minor": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "major",
          "minor"
        ]
      },
      "main.SessionToken": {
        "properties": {
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "expiration",
          "token"
        ]
      },
      "main.availableStreamV2": {
        "properties": {
          "dataFeedURL": {
            "type": "string"
          },
          "refreshActiveSessionInterval": {
            "format": "integer",
            "type": "integer"
          },
          "refreshActiveSessionURL": {
            "type": "string"
          },
          "sessionToken": {
            "$ref": "#/components/schemas/main.SessionToken"
          }
        },
        "required": [
          "dataFeedURL",
          "refreshActiveSessionInterval",
          "refreshActiveSessionURL",
          "sessionToken"
        ]
      },
      "main.discoveryResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/main.availableStreamV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "malquery.ExternalExactSearchParametersV1": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/malquery.ExternalHuntOptions"
          },
          "patterns": {
            "description": "Patterns to search for",
            "items": {
              "$ref": "#/components/schemas/malquery.SearchParameter"
            },
            "type": "array"
          }
        },
        "required": [
          "patterns"
        ]
      },
      "malquery.ExternalHuntOptions": {
        "properties": {
          "filter_filetypes": {
            "description": "Limit results to files of certain types such as EMAIL, PCAP, PDF, PE32. Full list can be found in the documentation",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filter_meta": {
            "description": "Specify a subset of metadata fields to return in the results. Possible values: sha256, md5, type, size, first_seen, label, family",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "limit": {
            "description": "Maximum number of results to be returned",
            "format": "int32",
            "type": "integer"
          },
          "max_date": {
            "description": "Limit results to files first seen before this date. The format is YYYY/MM/DD",
            "type": "string"
          },
          "max_size": {
            "description": "Maximum file size. The value can be specified either in bytes or in multiples of KB/MB/GB. Examples: 128000, 1.3 KB, 8mb",
            "type": "string"
          },
          "min_date": {
            "description": "Limit results to files first seen after this date. The format is YYYY/MM/DD",
            "type": "string"
          },
          "min_size": {
            "description": "Minimum file size. The value can be specified either in bytes or in multiples of KB/MB/GB. Examples: 128000, 1.3 KB, 8mb",
            "type": "string"
          }
        }
      },
      "malquery.ExternalHuntParametersV1": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/malquery.ExternalHuntOptions"
          },
          "yara_rule": {
            "description": "A YARA rule that defines your search",
            "type": "string"
          }
        },
        "required": [
          "yara_rule"
        ]
      },
      "malquery.ExternalQueryResponse": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "$ref": "#/components/schemas/malquery.QueryError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/malquery.QueryMetaInfo"
          },
          "resources": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/malquery.ExternalResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "malquery.ExternalResource": {
        "properties": {
          "family": {
            "description": "Sample family",
            "type": "string"
          },
          "filesize": {
            "description": "Sample size",
            "format": "int32",
            "type": "integer"
          },
          "filetype": {
            "description": "Sample file type",
            "type": "string"
          },
          "first_seen": {
            "description": "Date when it was first seen",
            "type": "string"
          },
          "ignore_reason": {
            "description": "Reason why the resource is ignored",
            "type": "string"
          },
          "label": {
            "description": "Sample label",
            "type": "string"
          },
          "label_confidence": {
            "description": "Resource label confidence",
            "type": "string"
          },
          "md5": {
            "description": "Sample MD5",
            "type": "string"
          },
          "pattern": {
            "description": "Search pattern",
            "type": "string"
          },
          "pattern_type": {
            "description": "Search pattern type",
            "type": "string"
          },
          "samples": {
            "description": "List of sample metadata",
            "items": {
              "$ref": "#/components/schemas/malquery.SampleMetadata"
            },
            "type": "array"
          },
          "sha1": {
            "description": "Sample SHA1",
            "type": "string"
          },
          "sha256": {
            "description": "Sample SHA256",
            "type": "string"
          },
          "tags": {
            "description": "List of resource tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "yara_rule": {
            "description": "Search YARA rule",
            "type": "string"
          },
          "yara_rules": {
            "description": "List of YARA rules for related files",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "samples"
        ]
      },
      "malquery.FuzzyOptions": {
        "properties": {
          "filter_meta": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "malquery.FuzzySearchMetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "description": "Elapsed time since the request started in seconds",
            "format": "double",
            "type": "number"
          },
          "reqid": {
            "description": "Request ID returned after creating a hunt or exact search",
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/malquery.Stats"
          },
          "status": {
            "description": "Request status. Possible values: inprogress, failed, done",
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "trace_id"
        ]
      },
      "malquery.FuzzySearchParametersV1": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/malquery.FuzzyOptions"
          },
          "patterns": {
            "items": {
              "$ref": "#/components/schemas/malquery.SearchParameter"
            },
            "type": "array"
          }
        },
        "required": [
          "patterns"
        ]
      },
      "malquery.FuzzySearchResponse": {
        "properties": {
          "errors": {
            "description": "Search errors",
            "items": {
              "$ref": "#/components/schemas/malquery.QueryError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/malquery.FuzzySearchMetaInfo"
          },
          "resources": {
            "description": "Search results",
            "items": {
              "$ref": "#/components/schemas/malquery.SampleMetadata"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "malquery.MultiDownloadRequestV1": {
        "properties": {
          "samples": {
            "description": "List of sample sha256 ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "samples"
        ]
      },
      "malquery.QueryError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "malquery.QueryMetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "description": "Elapsed time since the request started in seconds",
            "format": "double",
            "type": "number"
          },
          "reqid": {
            "description": "Request ID returned after creating a hunt or exact search",
            "type": "string"
          },
          "status": {
            "description": "Request status. Possible values: inprogress, failed, done",
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "trace_id"
        ]
      },
      "malquery.RateLimitsMeta": {
        "properties": {
          "days_left": {
            "description": "Days left until the limits are refreshed",
            "format": "int32",
            "type": "integer"
          },
          "download_count": {
            "description": "How many downloads were executed in the last month",
            "format": "int32",
            "type": "integer"
          },
          "download_counts": {
            "description": "Download counts per user",
            "items": {
              "$ref": "#/components/schemas/malquery.UserRequestCount"
            },
            "type": "array"
          },
          "download_limit": {
            "description": "Total download limit per month",
            "format": "int32",
            "type": "integer"
          },
          "hunt_count": {
            "description": "How many hunts were executed in the last month",
            "format": "int32",
            "type": "integer"
          },
          "hunt_counts": {
            "description": "Hunt counts per user",
            "items": {
              "$ref": "#/components/schemas/malquery.UserRequestCount"
            },
            "type": "array"
          },
          "hunt_limit": {
            "description": "Total hunt limit per month",
            "format": "int32",
            "type": "integer"
          },
          "monitor_count": {
            "description": "How many monitors were created in the last month",
            "format": "int32",
            "type": "integer"
          },
          "monitor_limit": {
            "description": "Total monitor limit per month",
            "format": "int32",
            "type": "integer"
          },
          "refresh_time": {
            "description": "Time when the limits are refreshed. ISO 8601 format",
            "type": "string"
          }
        },
        "required": [
          "days_left",
          "download_count",
          "download_limit",
          "hunt_count",
          "hunt_limit",
          "monitor_count",
          "monitor_limit",
          "refresh_time"
        ]
      },
      "malquery.RateLimitsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/malquery.RateLimitsMeta"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "malquery.RequestMetaInfo": {
        "properties": {
          "options": {
            "$ref": "#/components/schemas/malquery.ExternalHuntOptions"
          },
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "patterns": {
            "description": "Patterns to search for",
            "items": {
              "$ref": "#/components/schemas/malquery.SearchParameter"
            },
            "type": "array"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "description": "Elapsed time since the request started in seconds",
            "format": "double",
            "type": "number"
          },
          "reqid": {
            "description": "Request ID returned after creating a hunt or exact search",
            "type": "string"
          },
          "reqtype": {
            "description": "Request type. Possible values: hunt, search",
            "type": "string"
          },
          "sample": {
            "description": "Sample ID",
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/malquery.Stats"
          },
          "status": {
            "description": "Request status. Possible values: inprogress, failed, done",
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          },
          "yara_rule": {
            "description": "YARA rule to be monitored",
            "type": "string"
          }
        },
        "required": [
          "trace_id"
        ]
      },
      "malquery.RequestResponse": {
        "properties": {
          "errors": {
            "description": "Request errors",
            "items": {
              "$ref": "#/components/schemas/malquery.QueryError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/malquery.RequestMetaInfo"
          },
          "resources": {
            "description": "Request results",
            "items": {
              "$ref": "#/components/schemas/malquery.ExternalResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "malquery.SampleMetadata": {
        "properties": {
          "family": {
            "description": "Sample family",
            "type": "string"
          },
          "filesize": {
            "description": "Sample size",
            "format": "int32",
            "type": "integer"
          },
          "filetype": {
            "description": "Sample file type",
            "type": "string"
          },
          "first_seen": {
            "description": "Date when it was first seen",
            "type": "string"
          },
          "label": {
            "description": "Sample label",
            "type": "string"
          },
          "md5": {
            "description": "Sample MD5",
            "type": "string"
          },
          "sha1": {
            "description": "Sample SHA1",
            "type": "string"
          },
          "sha256": {
            "description": "Sample SHA256",
            "type": "string"
          }
        }
      },
      "malquery.SampleMetadataResponse": {
        "properties": {
          "errors": {
            "description": "Errors that occurred during the request",
            "items": {
              "$ref": "#/components/schemas/malquery.QueryError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/malquery.SamplesMetadataMetaInfo"
          },
          "resources": {
            "description": "List of sample metadata",
            "items": {
              "$ref": "#/components/schemas/malquery.SampleMetadata"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "malquery.SamplesMetadataMetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "trace_id"
        ]
      },
      "malquery.SearchParameter": {
        "properties": {
          "type": {
            "description": "Pattern type. Accepted values: hex, ascii, wide",
            "type": "string"
          },
          "value": {
            "description": "Pattern value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "malquery.Stats": {
        "properties": {
          "clean_count": {
            "description": "Number of clean samples",
            "format": "int32",
            "type": "integer"
          },
          "malware_count": {
            "description": "Number of malicious samples",
            "format": "int32",
            "type": "integer"
          },
          "pua_count": {
            "description": "Number of potentially unwanted samples such as adware",
            "format": "int32",
            "type": "integer"
          },
          "total_count": {
            "description": "Total number of samples",
            "format": "int32",
            "type": "integer"
          },
          "unknown_count": {
            "description": "Number of unknown (which could not be classified) samples",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "clean_count",
          "malware_count",
          "pua_count",
          "total_count",
          "unknown_count"
        ]
      },
      "malquery.UserRequestCount": {
        "properties": {
          "counter": {
            "format": "int32",
            "type": "integer"
          },
          "userid": {
            "type": "string"
          }
        },
        "required": [
          "counter",
          "userid"
        ]
      },
      "map[string]interface {}": {
        "type": "object"
      },
      "messages.Activity": {
        "properties": {
          "body": {
            "type": "string"
          },
          "case_id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/messages.Author"
          },
          "created_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_modified_time": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "case_id",
          "cid",
          "created_by",
          "created_time",
          "id",
          "type"
        ]
      },
      "messages.Alert": {
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "product",
          "url"
        ]
      },
      "messages.Attachment": {
        "properties": {
          "created_by": {
            "type": "string"
          },
          "created_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "created_by",
          "created_time",
          "id",
          "mime_type",
          "name",
          "size"
        ]
      },
      "messages.Author": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "display_name",
          "first_name",
          "last_name",
          "uid",
          "uuid"
        ]
      },
      "messages.Case": {
        "properties": {
          "aids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assigner": {
            "$ref": "#/components/schemas/messages.Author"
          },
          "attachments": {
            "items": {
              "$ref": "#/components/schemas/messages.Attachment"
            },
            "type": "array"
          },
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_time": {
            "type": "string"
          },
          "detections": {
            "items": {
              "$ref": "#/components/schemas/messages.Detection"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/messages.Incident"
            },
            "type": "array"
          },
          "ip_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "key": {
            "type": "string"
          },
          "last_modified_time": {
            "type": "string"
          },
          "malware_submission_id": {
            "type": "string"
          },
          "malware_submission_url": {
            "type": "string"
          },
          "recon_rule_type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "aids",
          "assigner",
          "attachments",
          "body",
          "cid",
          "created_time",
          "detections",
          "hosts",
          "id",
          "incidents",
          "ip_addresses",
          "key",
          "last_modified_time",
          "malware_submission_id",
          "malware_submission_url",
          "recon_rule_type",
          "status",
          "title",
          "type"
        ]
      },
      "messages.Detection": {
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "messages.Incident": {
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "mlscannerapi.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "quota": {
            "$ref": "#/components/schemas/mlscannerapi.Quota"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "mlscannerapi.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/mlscannerapi.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "mlscannerapi.Quota": {
        "properties": {
          "in_progress": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          },
          "used": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "in_progress",
          "total",
          "used"
        ]
      },
      "mlscannerapi.SamplesScanParameters": {
        "properties": {
          "samples": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "samples"
        ]
      },
      "mlscannerapi.SamplesScanResult": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "samples": {
            "items": {
              "$ref": "#/components/schemas/mlscannerapi.ScannedSample"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id",
          "samples",
          "status"
        ]
      },
      "mlscannerapi.ScanV1Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/mlscannerapi.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/mlscannerapi.SamplesScanResult"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "mlscannerapi.ScannedSample": {
        "properties": {
          "error": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "verdict": {
            "type": "string"
          }
        },
        "required": [
          "sha256"
        ]
      },
      "model.Argument": {
        "properties": {
          "arg_name": {
            "type": "string"
          },
          "arg_type": {
            "type": "string"
          },
          "command_level": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "data_type": {
            "type": "string"
          },
          "default_value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required": {
            "type": "boolean"
          },
          "requires_value": {
            "type": "boolean"
          },
          "script_id": {
            "format": "integer",
            "type": "integer"
          },
          "sequence": {
            "format": "integer",
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "arg_name",
          "arg_type",
          "command_level",
          "created_at",
          "data_type",
          "default_value",
          "description",
          "encoding",
          "id",
          "options",
          "required",
          "requires_value",
          "script_id",
          "sequence",
          "updated_at"
        ]
      },
      "model.File": {
        "properties": {
          "cloud_request_id": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "size": {
            "format": "integer",
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "cloud_request_id",
          "created_at",
          "deleted_at",
          "id",
          "name",
          "session_id",
          "sha256",
          "size",
          "updated_at"
        ]
      },
      "model.SessionLog": {
        "properties": {
          "base_command": {
            "type": "string"
          },
          "cloud_request_id": {
            "type": "string"
          },
          "command_string": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "current_directory": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "session_id": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "base_command",
          "cloud_request_id",
          "command_string",
          "created_at",
          "current_directory",
          "id",
          "session_id",
          "updated_at"
        ]
      },
      "model.UserInputReadResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "user inputs returned",
            "items": {
              "$ref": "#/components/schemas/model.UserInputViewModel"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "model.UserInputUpdateRequest": {
        "properties": {
          "input": {
            "description": "input to provide to the user input activity",
            "type": "string"
          },
          "note": {
            "description": "note added to user input at the time an input is provided",
            "type": "string"
          }
        },
        "required": [
          "input",
          "note"
        ]
      },
      "model.UserInputViewModel": {
        "properties": {
          "allowed_inputs": {
            "description": "if not empty, only listed inputs are allowed",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowed_responders": {
            "description": "if not empty, only listed responders are allowed to provide input",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "completed": {
            "description": "whether or not the user input is completed yet",
            "type": "boolean"
          },
          "completed_at": {
            "description": "time at which the user input was modified",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "time at which the user input was created",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of the user input",
            "type": "string"
          },
          "input": {
            "description": "input provided by a responder user",
            "type": "string"
          },
          "note": {
            "description": "note added to user input at the time an input is provided",
            "type": "string"
          },
          "responder": {
            "description": "user responding to the user input request",
            "type": "string"
          },
          "timeout_at": {
            "description": "time after which the user input may be expired and no longer actionable",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "allowed_inputs",
          "allowed_responders",
          "completed",
          "completed_at",
          "created_at",
          "id",
          "input",
          "note",
          "responder",
          "timeout_at"
        ]
      },
      "models.APIAssessmentDetections": {
        "properties": {
          "description": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "detection_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image_architecture": {
            "type": "string"
          },
          "image_created_at": {
            "type": "string"
          },
          "image_digest": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "image_registry": {
            "type": "string"
          },
          "image_repository": {
            "type": "string"
          },
          "image_size": {
            "type": "string"
          },
          "image_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "os_name": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "remediation": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "details",
          "detection_type",
          "id",
          "image_architecture",
          "image_created_at",
          "image_digest",
          "image_id",
          "image_registry",
          "image_repository",
          "image_size",
          "image_tag",
          "name",
          "os_name",
          "os_version",
          "remediation",
          "severity",
          "title"
        ]
      },
      "models.APICombinedDetections": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "containers_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "detection_id": {
            "type": "string"
          },
          "detection_name": {
            "type": "string"
          },
          "detection_severity": {
            "type": "string"
          },
          "detection_type": {
            "type": "string"
          },
          "images_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "last_detected": {
            "type": "string"
          },
          "remediation": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "containers_impacted",
          "description",
          "details",
          "detection_id",
          "detection_name",
          "detection_severity",
          "detection_type",
          "images_impacted",
          "last_detected",
          "remediation",
          "title"
        ]
      },
      "models.APIContainerAlert": {
        "properties": {
          "containers_impacted_count": {
            "type": "string"
          },
          "containers_impacted_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "detection_description": {
            "type": "string"
          },
          "detection_event_simple_name": {
            "type": "string"
          },
          "detection_name": {
            "type": "string"
          },
          "first_seen_timestamp": {
            "type": "string"
          },
          "last_seen_timestamp": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "containers_impacted_count",
          "containers_impacted_ids",
          "detection_description",
          "detection_event_simple_name",
          "detection_name",
          "first_seen_timestamp",
          "last_seen_timestamp",
          "severity"
        ]
      },
      "models.APICustomerAndImage": {
        "properties": {
          "ai_related": {
            "type": "boolean"
          },
          "base_image_id": {
            "type": "string"
          },
          "base_os": {
            "type": "string"
          },
          "base_os_version": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/models.LightWeightConfig"
          },
          "created_at": {
            "type": "string"
          },
          "crowdstrike_user": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "eol_date": {
            "type": "string"
          },
          "first_scanned": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "image_scanning_active": {
            "type": "boolean"
          },
          "image_size": {
            "format": "int64",
            "type": "integer"
          },
          "is_base_image": {
            "type": "boolean"
          },
          "registry": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "source_base_image": {
            "$ref": "#/components/schemas/models.ImageDetails"
          },
          "tag": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "warning": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "ai_related",
          "base_os",
          "base_os_version",
          "cid",
          "created_at",
          "crowdstrike_user",
          "digest",
          "eol_date",
          "first_scanned",
          "image_id",
          "image_scanning_active",
          "image_size",
          "is_base_image",
          "registry",
          "repository",
          "source",
          "source_base_image",
          "tag",
          "updated_at",
          "uuid",
          "warning"
        ]
      },
      "models.APIDetectionCount": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "count"
        ]
      },
      "models.APIDetectionCountByType": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "type"
        ]
      },
      "models.APIDriftIndicators": {
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "aid": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_name": {
            "type": "string"
          },
          "command_line": {
            "type": "string"
          },
          "computer_name": {
            "type": "string"
          },
          "container_id": {
            "type": "string"
          },
          "detection_description": {
            "type": "string"
          },
          "detection_id": {
            "type": "string"
          },
          "detection_name": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "indicator_process_id": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "occurred_at": {
            "type": "string"
          },
          "parent_process_id": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_name": {
            "type": "string"
          },
          "prevented": {
            "type": "boolean"
          },
          "prevention_status": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "prevention_status_string": {
            "type": "string"
          },
          "scheduler_name": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "aid",
          "cid",
          "cloud_name",
          "command_line",
          "computer_name",
          "container_id",
          "detection_description",
          "detection_id",
          "detection_name",
          "file_name",
          "host_id",
          "indicator_process_id",
          "namespace",
          "occurred_at",
          "parent_process_id",
          "pod_id",
          "pod_name",
          "prevented",
          "prevention_status",
          "prevention_status_string",
          "scheduler_name",
          "severity",
          "sha256",
          "timestamp"
        ]
      },
      "models.APIFilterLabel": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "label"
        ]
      },
      "models.APIFilterResponse": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterLabel"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "models.APIImageAssessment": {
        "properties": {
          "assessed": {
            "format": "int64",
            "type": "integer"
          },
          "error_image_pull": {
            "format": "int64",
            "type": "integer"
          },
          "error_image_push": {
            "format": "int64",
            "type": "integer"
          },
          "error_missing_config": {
            "format": "int64",
            "type": "integer"
          },
          "error_unsupported_schema_version": {
            "format": "int64",
            "type": "integer"
          },
          "time_stamp": {
            "type": "string"
          }
        },
        "required": [
          "assessed",
          "error_image_pull",
          "error_image_push",
          "error_missing_config",
          "error_unsupported_schema_version",
          "time_stamp"
        ]
      },
      "models.APIImageAssessmentHistory": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/models.APIImageAssessment"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "models.APIImageByVulnerabilityCount": {
        "properties": {
          "image_id": {
            "type": "string"
          },
          "registry": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "vulnerability_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "image_id",
          "registry",
          "repository",
          "tag",
          "vulnerability_count"
        ]
      },
      "models.APIImageCombinedExport": {
        "properties": {
          "ai_related": {
            "type": "boolean"
          },
          "architecture": {
            "type": "string"
          },
          "base_os": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cve_id": {
            "type": "string"
          },
          "cvss_score": {
            "type": "string"
          },
          "detection_name": {
            "type": "string"
          },
          "detection_severity": {
            "type": "string"
          },
          "detection_type": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "image_digest": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "is_base_image": {
            "type": "boolean"
          },
          "last_seen": {
            "type": "string"
          },
          "packages_impacted": {
            "format": "int32",
            "type": "integer"
          },
          "registry": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "started_containers": {
            "format": "int64",
            "type": "integer"
          },
          "stopped_containers": {
            "format": "int64",
            "type": "integer"
          },
          "tag": {
            "type": "string"
          },
          "vulnerability_cps_rating": {
            "type": "string"
          },
          "vulnerability_description": {
            "type": "string"
          },
          "vulnerability_severity": {
            "type": "string"
          }
        },
        "required": [
          "ai_related",
          "architecture",
          "base_os",
          "cid",
          "cve_id",
          "cvss_score",
          "detection_name",
          "detection_severity",
          "detection_type",
          "first_seen",
          "image_digest",
          "image_id",
          "is_base_image",
          "last_seen",
          "packages_impacted",
          "registry",
          "repository",
          "source",
          "started_containers",
          "stopped_containers",
          "tag",
          "vulnerability_cps_rating",
          "vulnerability_description",
          "vulnerability_severity"
        ]
      },
      "models.APIImageCount": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "count"
        ]
      },
      "models.APIImageIssuesSummary": {
        "properties": {
          "image_container_info": {
            "$ref": "#/components/schemas/models.IssuesSummaryContainerInfo"
          },
          "image_detections": {
            "items": {
              "$ref": "#/components/schemas/models.APIDetectionCountByType"
            },
            "type": "array"
          },
          "is_dca_run": {
            "type": "boolean"
          },
          "known_issues": {
            "format": "int64",
            "type": "integer"
          },
          "packages_info": {
            "$ref": "#/components/schemas/models.ImageSummaryPackagesInfo"
          },
          "policies_summary": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyCountByAction"
            },
            "type": "array"
          },
          "runtime_detections": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterLabel"
            },
            "type": "array"
          },
          "vulnerabilities_summary": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnCountBySeverity"
            },
            "type": "array"
          },
          "zero_day_impacted": {
            "type": "boolean"
          }
        },
        "required": [
          "image_container_info",
          "image_detections",
          "is_dca_run",
          "known_issues",
          "packages_info",
          "policies_summary",
          "runtime_detections",
          "vulnerabilities_summary",
          "zero_day_impacted"
        ]
      },
      "models.APIImageVulnerabilitiesSummary": {
        "properties": {
          "app_packages_with_vulnerabilities": {
            "format": "int32",
            "type": "integer"
          },
          "app_vuln_by_severity": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnCountBySeverity"
            },
            "type": "array"
          },
          "image_vuln_by_severity": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnCountBySeverity"
            },
            "type": "array"
          },
          "layers_with_vulnerabilities": {
            "format": "int32",
            "type": "integer"
          },
          "os_packages_with_vulnerabilities": {
            "format": "int32",
            "type": "integer"
          },
          "os_vuln_by_severity": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnCountBySeverity"
            },
            "type": "array"
          },
          "total_app_packages": {
            "format": "int32",
            "type": "integer"
          },
          "total_os_packages": {
            "format": "int32",
            "type": "integer"
          },
          "total_vulnerabilities": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "app_packages_with_vulnerabilities",
          "app_vuln_by_severity",
          "image_vuln_by_severity",
          "layers_with_vulnerabilities",
          "os_packages_with_vulnerabilities",
          "os_vuln_by_severity",
          "total_app_packages",
          "total_os_packages",
          "total_vulnerabilities"
        ]
      },
      "models.APIKubernetesIOM": {
        "properties": {
          "admission_review_action": {
            "type": "string"
          },
          "admission_review_id": {
            "type": "string"
          },
          "admission_review_msg": {
            "type": "string"
          },
          "admission_review_operation": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cis_id": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "containers_impacted_count": {
            "type": "string"
          },
          "containers_impacted_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "detect_timestamp": {
            "type": "string"
          },
          "detection_id": {
            "type": "string"
          },
          "detection_name": {
            "type": "string"
          },
          "detection_type": {
            "type": "string"
          },
          "image_assessment_matched_cves": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "image_assessment_policy_description": {
            "type": "string"
          },
          "image_assessment_policy_id": {
            "type": "string"
          },
          "image_assessment_policy_name": {
            "type": "string"
          },
          "image_digest": {
            "type": "string"
          },
          "image_has_been_assessed": {
            "type": "boolean"
          },
          "image_id": {
            "type": "string"
          },
          "image_registry": {
            "type": "string"
          },
          "image_repository": {
            "type": "string"
          },
          "image_tag": {
            "type": "string"
          },
          "last_seen_timestamp": {
            "type": "string"
          },
          "mitigation_id": {
            "type": "string"
          },
          "mitigation_name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "nist_id": {
            "type": "string"
          },
          "pod_label": {
            "type": "string"
          },
          "pods_impacted_count": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "policy_name": {
            "type": "string"
          },
          "ports": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "prevented": {
            "type": "string"
          },
          "remediation": {
            "type": "string"
          },
          "resource_creation_timestamp": {
            "type": "string"
          },
          "resource_group_name": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_name": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "sensitive_env_vars": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "service_type": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "tactic_id": {
            "type": "string"
          },
          "tactic_name": {
            "type": "string"
          },
          "technique_id": {
            "type": "string"
          },
          "technique_name": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "cis_id",
          "cluster_id",
          "cluster_name",
          "containers_impacted_count",
          "containers_impacted_ids",
          "description",
          "detect_timestamp",
          "detection_id",
          "detection_name",
          "detection_type",
          "namespace",
          "prevented",
          "remediation",
          "resource_creation_timestamp",
          "resource_id",
          "resource_name",
          "resource_type",
          "sensitive_env_vars",
          "severity",
          "tactic_id",
          "tactic_name",
          "technique_id",
          "technique_name"
        ]
      },
      "models.APIPackageCombined": {
        "properties": {
          "ai_related": {
            "type": "boolean"
          },
          "all_images": {
            "format": "int64",
            "type": "integer"
          },
          "cid": {
            "type": "string"
          },
          "license": {
            "type": "string"
          },
          "package_name_version": {
            "type": "string"
          },
          "running_images": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "vulnerabilities": {
            "items": {
              "$ref": "#/components/schemas/models.APIPackageVulnerability"
            },
            "type": "array"
          },
          "vulnerability_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "ai_related",
          "all_images",
          "cid",
          "license",
          "package_name_version",
          "running_images",
          "type",
          "vulnerabilities",
          "vulnerability_count"
        ]
      },
      "models.APIPackageCombinedV2": {
        "properties": {
          "ai_related": {
            "type": "boolean"
          },
          "all_images": {
            "format": "int64",
            "type": "integer"
          },
          "cid": {
            "type": "string"
          },
          "cveid": {
            "type": "string"
          },
          "fix_resolution": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "license": {
            "type": "string"
          },
          "package_name_version": {
            "type": "string"
          },
          "running_images": {
            "format": "int64",
            "type": "integer"
          },
          "severity": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vulnerability_description": {
            "type": "string"
          }
        },
        "required": [
          "ai_related",
          "all_images",
          "cid",
          "cveid",
          "fix_resolution",
          "license",
          "package_name_version",
          "running_images",
          "severity",
          "type",
          "vulnerability_description"
        ]
      },
      "models.APIPackageVulnerability": {
        "properties": {
          "cveid": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fix_resolution": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "cveid",
          "description",
          "fix_resolution",
          "severity"
        ]
      },
      "models.APIPackagesByVulnCount": {
        "properties": {
          "images": {
            "format": "int64",
            "type": "integer"
          },
          "package": {
            "type": "string"
          },
          "packages_type": {
            "type": "string"
          },
          "running_images": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "type": "string"
          },
          "vulnerabilities": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "images",
          "package",
          "packages_type",
          "running_images",
          "version",
          "vulnerabilities"
        ]
      },
      "models.APIPolicyCountByAction": {
        "properties": {
          "action": {
            "type": "string"
          },
          "count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "action",
          "count"
        ]
      },
      "models.APIPolicyData": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyGroup"
            },
            "type": "array"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyRule"
            },
            "type": "array"
          }
        },
        "required": [
          "groups",
          "rules"
        ]
      },
      "models.APIPolicyEntity": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "policy_data": {
            "$ref": "#/components/schemas/models.APIPolicyData"
          },
          "policy_id": {
            "type": "string"
          },
          "precedence": {
            "format": "int32",
            "type": "integer"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "description",
          "is_enabled",
          "name",
          "policy_id",
          "precedence",
          "updated_at"
        ]
      },
      "models.APIPolicyExclusion": {
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/models.ExclusionCondition"
            },
            "type": "array"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_type_uuid": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "conditions",
          "description",
          "name",
          "policy_type_uuid"
        ]
      },
      "models.APIPolicyGroup": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_group_data": {
            "$ref": "#/components/schemas/models.APIPolicyGroupData"
          },
          "policy_uuid": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "description",
          "name",
          "updated_at",
          "uuid"
        ]
      },
      "models.APIPolicyGroupData": {
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyGroupData.conditions"
            },
            "type": "array"
          }
        },
        "required": [
          "conditions"
        ]
      },
      "models.APIPolicyGroupData.conditions": {
        "type": "object"
      },
      "models.APIPolicyRule": {
        "properties": {
          "action": {
            "type": "string"
          },
          "policy_rules_data": {
            "$ref": "#/components/schemas/models.APIPolicyRulesData"
          }
        },
        "required": [
          "action"
        ]
      },
      "models.APIPolicyRulesData": {
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyRulesData.conditions"
            },
            "type": "array"
          }
        },
        "required": [
          "conditions"
        ]
      },
      "models.APIPolicyRulesData.conditions": {
        "type": "object"
      },
      "models.APIPrecedenceRequest": {
        "properties": {
          "precedence": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "precedence"
        ]
      },
      "models.APIRuntimeDetection": {
        "properties": {
          "action_taken": {
            "type": "string"
          },
          "agent_type": {
            "type": "string"
          },
          "aid": {
            "type": "string"
          },
          "assigned_to": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_id": {
            "type": "string"
          },
          "cloud_instance_id": {
            "type": "string"
          },
          "cloud_name": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "command_line": {
            "type": "string"
          },
          "computer_name": {
            "type": "string"
          },
          "container_devices": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "container_id": {
            "type": "string"
          },
          "container_interactive_mode": {
            "type": "string"
          },
          "container_name": {
            "type": "string"
          },
          "container_network_ip_address": {
            "type": "string"
          },
          "container_privileged": {
            "type": "string"
          },
          "container_read_only_root_fs": {
            "type": "string"
          },
          "container_user_info": {
            "type": "string"
          },
          "containers_impacted_count": {
            "type": "string"
          },
          "detect_timestamp": {
            "type": "string"
          },
          "detection_description": {
            "type": "string"
          },
          "detection_id": {
            "type": "string"
          },
          "detection_name": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "executable_sha_256": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "host_containers_count": {
            "type": "string"
          },
          "host_detections_count": {
            "type": "string"
          },
          "host_detections_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host_id": {
            "type": "string"
          },
          "host_last_seen_timestamp": {
            "type": "string"
          },
          "host_type": {
            "type": "string"
          },
          "image_digest": {
            "type": "string"
          },
          "image_first_seen_timestamp": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "image_label": {
            "type": "string"
          },
          "image_last_seen_timestamp": {
            "type": "string"
          },
          "image_maintainer": {
            "type": "string"
          },
          "image_name": {
            "type": "string"
          },
          "images_container_count": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "network_ip_address": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_name": {
            "type": "string"
          },
          "pod_namespace": {
            "type": "string"
          },
          "sensor_version": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "tactic_and_technique": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vulnerabilities_count": {
            "type": "string"
          }
        },
        "required": [
          "action_taken",
          "agent_type",
          "aid",
          "assigned_to",
          "cid",
          "cloud",
          "cloud_account_id",
          "cloud_id",
          "cloud_instance_id",
          "cloud_name",
          "cluster_name",
          "command_line",
          "computer_name",
          "container_devices",
          "container_id",
          "container_interactive_mode",
          "container_name",
          "container_network_ip_address",
          "container_privileged",
          "container_read_only_root_fs",
          "container_user_info",
          "containers_impacted_count",
          "detect_timestamp",
          "detection_description",
          "detection_id",
          "detection_name",
          "executable_sha_256",
          "file_name",
          "file_path",
          "host_containers_count",
          "host_detections_count",
          "host_detections_ids",
          "host_id",
          "host_last_seen_timestamp",
          "host_type",
          "image_digest",
          "image_first_seen_timestamp",
          "image_id",
          "image_label",
          "image_last_seen_timestamp",
          "image_maintainer",
          "image_name",
          "images_container_count",
          "namespace",
          "network_ip_address",
          "os_version",
          "pod_id",
          "pod_name",
          "pod_namespace",
          "sensor_version",
          "severity",
          "tactic_and_technique",
          "type",
          "vulnerabilities_count"
        ]
      },
      "models.APIUnidentifiedContainer": {
        "properties": {
          "assessed_images": {
            "items": {
              "$ref": "#/components/schemas/models.ImageInformation"
            },
            "type": "array"
          },
          "assessed_images_count": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "containers_impacted": {
            "items": {
              "$ref": "#/components/schemas/models.ContainerInformation"
            },
            "type": "array"
          },
          "containers_impacted_count": {
            "type": "string"
          },
          "detect_timestamp": {
            "type": "string"
          },
          "detections_count": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "image_assessment_detections_count": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_name": {
            "type": "string"
          },
          "runtime_detections_count": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "unassessed_images": {
            "items": {
              "$ref": "#/components/schemas/models.ImageInformation"
            },
            "type": "array"
          },
          "unassessed_images_count": {
            "type": "string"
          },
          "visible_to_k8s": {
            "type": "string"
          }
        },
        "required": [
          "assessed_images",
          "assessed_images_count",
          "cid",
          "cluster_name",
          "containers_impacted",
          "containers_impacted_count",
          "detect_timestamp",
          "detections_count",
          "first_seen",
          "host_id",
          "image_assessment_detections_count",
          "last_seen",
          "namespace",
          "node_name",
          "pod_id",
          "pod_name",
          "runtime_detections_count",
          "severity",
          "unassessed_images",
          "unassessed_images_count",
          "visible_to_k8s"
        ]
      },
      "models.APIVulnByImageCount": {
        "properties": {
          "cve_id": {
            "type": "string"
          },
          "images_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "product": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "cve_id",
          "images_impacted",
          "product",
          "severity"
        ]
      },
      "models.APIVulnByPublicationDate": {
        "properties": {
          "containers_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "cve_id": {
            "type": "string"
          },
          "cvss_score": {
            "format": "float",
            "type": "number"
          },
          "images_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "published_date": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "containers_impacted",
          "cve_id",
          "cvss_score",
          "images_impacted",
          "published_date",
          "severity"
        ]
      },
      "models.APIVulnCount": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "count"
        ]
      },
      "models.APIVulnCountBySeverity": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "severity"
        ]
      },
      "models.APIVulnerabilityCombined": {
        "properties": {
          "ai_related": {
            "type": "boolean"
          },
          "containers_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "cps_current_rating": {
            "type": "string"
          },
          "cve_id": {
            "type": "string"
          },
          "cvss_score": {
            "format": "float",
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "exploit_found": {
            "type": "boolean"
          },
          "exploited_status": {
            "format": "int32",
            "type": "integer"
          },
          "exploited_status_string": {
            "type": "string"
          },
          "images_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "packages_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "published_date": {
            "type": "string"
          },
          "remediation_available": {
            "type": "boolean"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "ai_related",
          "containers_impacted",
          "cps_current_rating",
          "cve_id",
          "cvss_score",
          "description",
          "exploit_found",
          "exploited_status",
          "exploited_status_string",
          "images_impacted",
          "packages_impacted",
          "published_date",
          "remediation_available",
          "severity"
        ]
      },
      "models.APIVulnerabilityDetails": {
        "properties": {
          "cps_current_rating": {
            "type": "string"
          },
          "cve_id": {
            "type": "string"
          },
          "cvss_score": {
            "type": "string"
          },
          "exploited_status": {
            "format": "int32",
            "type": "integer"
          },
          "layer_command": {
            "type": "string"
          },
          "layer_index": {
            "format": "int32",
            "type": "integer"
          },
          "package_name_version": {
            "type": "string"
          },
          "package_path": {
            "type": "string"
          },
          "remediation_available": {
            "type": "boolean"
          },
          "severity": {
            "type": "string"
          }
        },
        "required": [
          "cps_current_rating",
          "cve_id",
          "cvss_score",
          "exploited_status",
          "layer_command",
          "layer_index",
          "package_name_version",
          "package_path",
          "remediation_available",
          "severity"
        ]
      },
      "models.APIVulnerabilityInfo": {
        "properties": {
          "cps_current_rating": {
            "type": "string"
          },
          "cve_id": {
            "type": "string"
          },
          "cvss_score": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "exploit_found": {
            "type": "string"
          },
          "exploited_status_string": {
            "type": "string"
          },
          "images_impacted": {
            "format": "int64",
            "type": "integer"
          },
          "packages": {
            "items": {
              "$ref": "#/components/schemas/models.PackageNameVersionType"
            },
            "type": "array"
          },
          "published_date": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "threat_actors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cps_current_rating",
          "cve_id",
          "cvss_score",
          "description",
          "exploit_found",
          "exploited_status_string",
          "images_impacted",
          "packages",
          "published_date",
          "severity",
          "threat_actors"
        ]
      },
      "models.AWSAccountRequestV1": {
        "properties": {
          "cloudtrail_bucket_owner_id": {
            "description": "The 12 digit AWS account which is hosting the S3 bucket containing cloudtrail logs for this account. If this field is set, it takes precedence of the settings level field.",
            "type": "string"
          },
          "cloudtrail_bucket_region": {
            "description": "Region where the S3 bucket containing cloudtrail logs resides.",
            "type": "string"
          },
          "external_id": {
            "description": "ID assigned for use with cross account IAM role access.",
            "type": "string"
          },
          "iam_role_arn": {
            "description": "The full arn of the IAM role created in this account to control access.",
            "type": "string"
          },
          "id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          },
          "rate_limit_reqs": {
            "description": "Rate limiting setting to control the maximum number of requests that can be made within the rate_limit_time threshold.",
            "format": "integer",
            "type": "integer"
          },
          "rate_limit_time": {
            "description": "Rate limiting setting to control the number of seconds for which rate_limit_reqs applies.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "models.AWSAccountV1": {
        "properties": {
          "access_health": {
            "$ref": "#/components/schemas/models.awsAccountAccessHealth"
          },
          "alias": {
            "description": "Alias/Name associated with the account. This is only updated once the account is in a registered state.",
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloudformation_stack_id": {
            "description": "Unique identifier for the cloudformation stack id used for provisioning.",
            "type": "string"
          },
          "cloudformation_url": {
            "description": "URL of the CloudFormation template to execute. This is returned when mode is to set 'cloudformation' when provisioning.",
            "type": "string"
          },
          "cloudtrail_bucket_owner_id": {
            "description": "The 12 digit AWS account which is hosting the S3 bucket containing cloudtrail logs for this account. If this field is set, it takes precedence of the settings level field.",
            "type": "string"
          },
          "cloudtrail_bucket_region": {
            "description": "Region where the S3 bucket containing cloudtrail logs resides. This is only set if using cloudformation to provision and create the trail.",
            "type": "string"
          },
          "created_timestamp": {
            "description": "Timestamp of when the account was first provisioned within CrowdStrike's system.'",
            "type": "string"
          },
          "external_id": {
            "description": "ID assigned for use with cross account IAM role access.",
            "type": "string"
          },
          "iam_role_arn": {
            "description": "The full arn of the IAM role created in this account to control access.",
            "type": "string"
          },
          "id": {
            "description": "12 digit AWS provided unique identifier for the account.",
            "type": "string"
          },
          "last_modified_timestamp": {
            "description": "Timestamp of when the account was last modified.",
            "type": "string"
          },
          "last_scanned_timestamp": {
            "description": "Timestamp of when the account was scanned.",
            "type": "string"
          },
          "policy_version": {
            "description": "Current version of permissions associated with IAM role and granted access.",
            "type": "string"
          },
          "provisioning_state": {
            "description": "Provisioning state of the account. Values can be; initiated, registered, unregistered.",
            "type": "string"
          },
          "rate_limit_reqs": {
            "description": "Rate limiting setting to control the maximum number of requests that can be made within the rate_limit_time duration.",
            "format": "integer",
            "type": "integer"
          },
          "rate_limit_time": {
            "description": "Rate limiting setting to control the number of seconds for which rate_limit_reqs applies.",
            "format": "int64",
            "type": "integer"
          },
          "template_version": {
            "description": "Current version of cloudformation template used to manage access.",
            "type": "string"
          }
        }
      },
      "models.AWSAccountsV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.AWSAccountV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "models.AWSCustomerSettingsRequestV1": {
        "properties": {
          "cloudtrail_bucket_owner_id": {
            "description": "The 12 digit AWS account which is hosting the centralized S3 bucket of containing cloudtrail logs from multiple accounts.",
            "type": "string"
          },
          "static_external_id": {
            "description": "By setting this value, all subsequent accounts that are provisioned will default to using this value as their external ID.",
            "type": "string"
          }
        }
      },
      "models.AccountEntitiesInput": {
        "properties": {
          "aws_accounts": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSAccountInput"
            },
            "type": "array"
          }
        },
        "required": [
          "aws_accounts"
        ]
      },
      "models.AccountStatusResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.SnapshotAccountStatus"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.AggregateValuesByFieldResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.ApplicationLibrary": {
        "properties": {
          "Hash": {
            "type": "string"
          },
          "LayerHash": {
            "type": "string"
          },
          "LayerIndex": {
            "format": "int32",
            "type": "integer"
          },
          "License": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "ai_related": {
            "type": "boolean"
          }
        }
      },
      "models.ApplicationPackageInfoType": {
        "properties": {
          "libraries": {
            "items": {
              "$ref": "#/components/schemas/models.ApplicationLibrary"
            },
            "type": "array"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "libraries",
          "type"
        ]
      },
      "models.BaseImageRequest": {
        "properties": {
          "image_digest": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "registry": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "models.BaseResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "models.Cluster": {
        "properties": {
          "access": {
            "type": "string"
          },
          "agent_status": {
            "type": "string"
          },
          "agents": {
            "items": {
              "$ref": "#/components/schemas/models.Cluster.agents"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_name": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "cloud_service": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "cluster_security_group": {
            "type": "string"
          },
          "cluster_status": {
            "type": "string"
          },
          "container_count": {
            "format": "int32",
            "type": "integer"
          },
          "first_seen": {
            "type": "string"
          },
          "iar_coverage": {
            "type": "boolean"
          },
          "kac_agent_id": {
            "type": "string"
          },
          "kubernetes_version": {
            "type": "string"
          },
          "labels_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_seen": {
            "type": "string"
          },
          "management_status": {
            "type": "string"
          },
          "node_count": {
            "format": "int32",
            "type": "integer"
          },
          "pod_count": {
            "format": "int32",
            "type": "integer"
          },
          "security_group": {
            "type": "string"
          },
          "tags": {
            "type": "object"
          },
          "virtual_network": {
            "type": "string"
          }
        },
        "required": [
          "access",
          "agent_status",
          "agents",
          "cid",
          "cloud_account_id",
          "cloud_name",
          "cloud_region",
          "cloud_service",
          "cluster_id",
          "cluster_name",
          "cluster_security_group",
          "cluster_status",
          "container_count",
          "first_seen",
          "iar_coverage",
          "kac_agent_id",
          "kubernetes_version",
          "labels_list",
          "last_seen",
          "management_status",
          "node_count",
          "pod_count",
          "security_group",
          "tags",
          "virtual_network"
        ]
      },
      "models.Cluster.agents": {
        "type": "object"
      },
      "models.ClusterEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Cluster"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.ClusterInfo": {
        "properties": {
          "cloud": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "cloud_service": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          }
        }
      },
      "models.ClusterWithFailedRules": {
        "properties": {
          "1": {
            "format": "int64",
            "type": "integer"
          },
          "2": {
            "format": "int64",
            "type": "integer"
          },
          "3": {
            "format": "int64",
            "type": "integer"
          },
          "4": {
            "format": "int64",
            "type": "integer"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          }
        },
        "required": [
          "1",
          "2",
          "3",
          "4",
          "cluster_id",
          "cluster_name"
        ]
      },
      "models.ComplianceByRules": {
        "properties": {
          "not_applicable_filters": {
            "type": "string"
          },
          "percentage_of_passed_rules": {
            "format": "double",
            "type": "number"
          },
          "rule_status_list": {
            "items": {
              "$ref": "#/components/schemas/models.RuleStatus"
            },
            "type": "array"
          }
        },
        "required": [
          "not_applicable_filters",
          "percentage_of_passed_rules",
          "rule_status_list"
        ]
      },
      "models.ComplianceExportGroupedByClustersReport": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_provider": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "failed_critical_rules": {
            "format": "int64",
            "type": "integer"
          },
          "failed_high_rules": {
            "format": "int64",
            "type": "integer"
          },
          "failed_rules": {
            "format": "int64",
            "type": "integer"
          },
          "failed_rules_list": {
            "type": "string"
          },
          "non_compliant_containers": {
            "format": "int64",
            "type": "integer"
          },
          "non_compliant_images": {
            "format": "int64",
            "type": "integer"
          },
          "passed_rules": {
            "format": "int64",
            "type": "integer"
          },
          "percentage_of_compliant_assets": {
            "format": "double",
            "type": "number"
          },
          "total_containers": {
            "format": "int64",
            "type": "integer"
          },
          "total_images": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "cid",
          "cloud_account_id",
          "cloud_provider",
          "cloud_region",
          "cluster_name",
          "failed_critical_rules",
          "failed_high_rules",
          "failed_rules",
          "failed_rules_list",
          "non_compliant_containers",
          "non_compliant_images",
          "passed_rules",
          "percentage_of_compliant_assets",
          "total_containers",
          "total_images"
        ]
      },
      "models.ComplianceExportGroupedByImagesReport": {
        "properties": {
          "authority": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "framework": {
            "type": "string"
          },
          "framework_name_version": {
            "type": "string"
          },
          "framework_version": {
            "type": "string"
          },
          "image_digest": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "image_registry": {
            "type": "string"
          },
          "image_repository": {
            "type": "string"
          },
          "image_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "recommendation_id": {
            "type": "string"
          },
          "severity": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "authority",
          "cid",
          "image_digest",
          "image_id",
          "image_registry",
          "image_repository",
          "image_tag",
          "name",
          "recommendation_id",
          "severity",
          "status"
        ]
      },
      "models.ComplianceExportGroupedByRulesReport": {
        "properties": {
          "asset_type": {
            "type": "string"
          },
          "authority": {
            "type": "string"
          },
          "clusters": {
            "format": "int64",
            "type": "integer"
          },
          "clusters_list": {
            "type": "string"
          },
          "failed_containers": {
            "format": "int64",
            "type": "integer"
          },
          "failed_images": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "passed_containers": {
            "format": "int64",
            "type": "integer"
          },
          "passed_images": {
            "format": "int64",
            "type": "integer"
          },
          "rule_id": {
            "type": "string"
          },
          "severity": {
            "format": "double",
            "type": "number"
          },
          "total_containers": {
            "format": "int64",
            "type": "integer"
          },
          "total_images": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "asset_type",
          "authority",
          "clusters",
          "clusters_list",
          "failed_containers",
          "failed_images",
          "name",
          "passed_containers",
          "passed_images",
          "rule_id",
          "severity",
          "total_containers",
          "total_images"
        ]
      },
      "models.Container": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/models.Container.agents"
            },
            "type": "array"
          },
          "allow_privilege_escalation": {
            "type": "boolean"
          },
          "cid": {
            "type": "string"
          },
          "cloud": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "config_labels": {
            "type": "string"
          },
          "config_user": {
            "type": "string"
          },
          "container_image_id": {
            "type": "string"
          },
          "created_at": {
            "format": "int64",
            "type": "integer"
          },
          "cve_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "first_seen": {
            "format": "int64",
            "type": "integer"
          },
          "host_config_devices": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image_application_package_count": {
            "format": "int32",
            "type": "integer"
          },
          "image_assessed_at": {
            "format": "int64",
            "type": "integer"
          },
          "image_detection_count": {
            "format": "int32",
            "type": "integer"
          },
          "image_detection_id_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "image_detection_name_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "image_detection_severity_by_type": {
            "type": "object"
          },
          "image_digest": {
            "type": "string"
          },
          "image_has_been_assessed": {
            "type": "boolean"
          },
          "image_highest_severity_vulnerability": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "image_package_count": {
            "format": "int32",
            "type": "integer"
          },
          "image_registry": {
            "type": "string"
          },
          "image_repo": {
            "type": "string"
          },
          "image_tag": {
            "type": "string"
          },
          "image_vulnerability_count": {
            "format": "int32",
            "type": "integer"
          },
          "image_vulnerability_severity_by_type": {
            "type": "object"
          },
          "insecure_mount_source": {
            "type": "string"
          },
          "insecure_mount_type": {
            "type": "string"
          },
          "insecure_propagation_mode": {
            "type": "boolean"
          },
          "interactive_mode": {
            "type": "boolean"
          },
          "ipv4": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "kpa_coverage": {
            "type": "boolean"
          },
          "labels": {
            "type": "object"
          },
          "labels_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_seen": {
            "format": "int64",
            "type": "integer"
          },
          "linux_sensor_aid": {
            "type": "string"
          },
          "linux_sensor_config_build": {
            "type": "string"
          },
          "linux_sensor_coverage": {
            "type": "boolean"
          },
          "lumos_sensor_aid": {
            "type": "string"
          },
          "lumos_sensor_config_build": {
            "type": "string"
          },
          "lumos_sensor_coverage": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_name": {
            "type": "string"
          },
          "port_list": {
            "items": {
              "$ref": "#/components/schemas/models.Container.port_list"
            },
            "type": "array"
          },
          "privileged": {
            "type": "boolean"
          },
          "root_write_access": {
            "type": "boolean"
          },
          "rpd": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "run_as_root_group": {
            "type": "boolean"
          },
          "run_as_root_user": {
            "type": "boolean"
          },
          "running_status": {
            "type": "boolean"
          },
          "snapshot_coverage": {
            "type": "boolean"
          },
          "unidentified": {
            "type": "boolean"
          },
          "volume_mounts": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "id"
        ]
      },
      "models.Container.agents": {
        "type": "object"
      },
      "models.Container.port_list": {
        "type": "object"
      },
      "models.ContainerCoverage": {
        "properties": {
          "managed": {
            "format": "int64",
            "type": "integer"
          },
          "unmanaged": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "managed",
          "unmanaged"
        ]
      },
      "models.ContainerCoverageResponseEntity": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ContainerCoverage"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.ContainerEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Container"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.ContainerImage": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cluster_info": {
            "items": {
              "$ref": "#/components/schemas/models.ClusterInfo"
            },
            "type": "array"
          },
          "container_count": {
            "format": "int32",
            "type": "integer"
          },
          "containers_running_status": {
            "type": "object"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "image_detection_count": {
            "format": "int32",
            "type": "integer"
          },
          "image_digest": {
            "type": "string"
          },
          "image_has_been_assessed": {
            "type": "boolean"
          },
          "image_id": {
            "type": "string"
          },
          "image_name": {
            "type": "string"
          },
          "image_registry": {
            "type": "string"
          },
          "image_repository": {
            "type": "string"
          },
          "image_tag": {
            "type": "string"
          },
          "image_vulnerability_count": {
            "format": "int32",
            "type": "integer"
          },
          "last_seen": {
            "type": "string"
          },
          "running_container_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cid",
          "cluster_info",
          "container_count",
          "containers_running_status",
          "hosts",
          "id",
          "image_detection_count",
          "image_digest",
          "image_has_been_assessed",
          "image_id",
          "image_name",
          "image_registry",
          "image_repository",
          "image_tag",
          "image_vulnerability_count",
          "last_seen",
          "running_container_count"
        ]
      },
      "models.ContainerInformation": {
        "properties": {
          "container_detection_count": {
            "type": "string"
          },
          "container_id": {
            "type": "string"
          }
        },
        "required": [
          "container_detection_count",
          "container_id"
        ]
      },
      "models.ContainerRuntimePivot": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "cloud_name": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "container_runtime_version": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "pod_name": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "cloud_name",
          "cluster_name",
          "container_runtime_version",
          "created_at",
          "first_seen",
          "last_seen",
          "node_name",
          "pod_name"
        ]
      },
      "models.ContainerRuntimePivotResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ContainerRuntimePivot"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.CreateAWSAccountsV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.AWSAccountRequestV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "models.CreateBaseImagesRequest": {
        "properties": {
          "base_images": {
            "items": {
              "$ref": "#/components/schemas/models.BaseImageRequest"
            },
            "type": "array"
          }
        },
        "required": [
          "base_images"
        ]
      },
      "models.CreateDeploymentInput": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.DeploymentResource"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "models.CreateImageGroupRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_group_data": {
            "$ref": "#/components/schemas/models.APIPolicyGroupData"
          },
          "policy_id": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "models.CreatePolicyRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "models.Credentials": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "models.CustomerConfigurationsV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSConfiguration"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "models.DefinitionCreateRequestV2": {
        "properties": {
          "Definition": {
            "$ref": "#/components/schemas/v2.Definition"
          },
          "enabled": {
            "description": "Specifies whether a new definition should be enabled when created, always set to false if it's imported'",
            "type": "boolean"
          },
          "flight_control": {
            "$ref": "#/components/schemas/definitions.FlightControlRequest"
          }
        },
        "required": [
          "Definition",
          "enabled"
        ]
      },
      "models.DefinitionUpdateRequestV2": {
        "properties": {
          "Definition": {
            "$ref": "#/components/schemas/v2.Definition"
          },
          "change_log": {
            "description": "Optional user provided description to outline the changes made as part of the update. Maximum of 500 characters.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether a new definition should be enabled when created, always set to false if it's imported'",
            "type": "boolean"
          },
          "flight_control": {
            "$ref": "#/components/schemas/definitions.FlightControlRequest"
          },
          "id": {
            "description": "Used to identify documents across versions",
            "type": "string"
          }
        },
        "required": [
          "Definition",
          "enabled",
          "id"
        ]
      },
      "models.DeliverySettings": {
        "properties": {
          "api_created_by": {
            "type": "string"
          },
          "api_updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "api_updated_by": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_by": {
            "type": "string"
          },
          "delivery_cadence": {
            "type": "string"
          },
          "delivery_type": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "created_at",
          "created_by",
          "delivery_cadence",
          "delivery_type",
          "uuid"
        ]
      },
      "models.DeliverySettingsEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.DeliverySettings"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.DeliverySettingsInput": {
        "properties": {
          "delivery_cadence": {
            "type": "string"
          },
          "delivery_type": {
            "type": "string"
          }
        },
        "required": [
          "delivery_cadence",
          "delivery_type"
        ]
      },
      "models.DeliverySettingsRequest": {
        "properties": {
          "delivery_settings": {
            "items": {
              "$ref": "#/components/schemas/models.DeliverySettingsInput"
            },
            "type": "array"
          }
        },
        "required": [
          "delivery_settings"
        ]
      },
      "models.Deployment": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "asset_identifier": {
            "type": "string"
          },
          "cloud_provider": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "instance_type": {
            "type": "string"
          },
          "last_updated_timestamp": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_detail": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "asset_identifier",
          "cloud_provider",
          "id",
          "instance_type",
          "last_updated_timestamp",
          "region",
          "status",
          "status_detail"
        ]
      },
      "models.DeploymentEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Deployment"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.DeploymentResource": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "asset_identifier": {
            "type": "string"
          },
          "cloud_provider": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "asset_identifier",
          "cloud_provider",
          "region"
        ]
      },
      "models.Detection": {
        "properties": {
          "description": {
            "type": "string"
          },
          "details": {
            "type": "object"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "remediation": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "description",
          "details",
          "hash",
          "id",
          "name",
          "path",
          "remediation",
          "severity",
          "title",
          "type"
        ]
      },
      "models.DetectionEngineInfoType": {
        "properties": {
          "ApkStaticVersion": {
            "type": "string"
          },
          "EngineVersion": {
            "type": "string"
          },
          "PerformedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "ApkStaticVersion",
          "EngineVersion",
          "PerformedAt"
        ]
      },
      "models.DetectionInfoType": {
        "properties": {
          "Detection": {
            "$ref": "#/components/schemas/models.Detection"
          }
        },
        "required": [
          "Detection"
        ]
      },
      "models.ELFBinary": {
        "properties": {
          "hash": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "hash",
          "path",
          "permissions",
          "size"
        ]
      },
      "models.ExclusionCondition": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "prop": {
            "type": "string"
          },
          "ttl": {
            "format": "double",
            "type": "number"
          },
          "updated_at": {
            "type": "string"
          },
          "value": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "description",
          "op",
          "prop",
          "value"
        ]
      },
      "models.ExclusionConditionRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "prop": {
            "type": "string"
          },
          "ttl": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "prop",
          "value"
        ]
      },
      "models.ExtAPIImageCombined": {
        "properties": {
          "ai_related": {
            "type": "boolean"
          },
          "architecture": {
            "type": "string"
          },
          "base_os": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "containers": {
            "format": "int64",
            "type": "integer"
          },
          "detections": {
            "format": "int32",
            "type": "integer"
          },
          "first_seen": {
            "type": "string"
          },
          "highest_detection_severity": {
            "type": "string"
          },
          "highest_vulnerability_severity": {
            "type": "string"
          },
          "image_digest": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "layers_with_vulnerabilities": {
            "format": "int32",
            "type": "integer"
          },
          "packages": {
            "format": "int32",
            "type": "integer"
          },
          "registry": {
            "type": "string"
          },
          "report_url_by_id_and_digest": {
            "type": "string"
          },
          "report_url_by_repo_and_tag": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "vulnerabilities": {
            "format": "int32",
            "type": "integer"
          },
          "warning": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "ai_related",
          "architecture",
          "base_os",
          "cid",
          "containers",
          "detections",
          "first_seen",
          "highest_detection_severity",
          "highest_vulnerability_severity",
          "image_digest",
          "image_id",
          "last_seen",
          "layers_with_vulnerabilities",
          "packages",
          "registry",
          "report_url_by_id_and_digest",
          "report_url_by_repo_and_tag",
          "repository",
          "tag",
          "vulnerabilities",
          "warning"
        ]
      },
      "models.ImageDetails": {
        "properties": {
          "digest": {
            "type": "string"
          },
          "registry": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        },
        "required": [
          "digest",
          "registry",
          "repository",
          "tag"
        ]
      },
      "models.ImageInformation": {
        "properties": {
          "image_digest": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "image_name": {
            "type": "string"
          }
        },
        "required": [
          "image_digest",
          "image_id",
          "image_name"
        ]
      },
      "models.ImageSummaryPackagesInfo": {
        "properties": {
          "count_with_vulnerabilities": {
            "format": "int32",
            "type": "integer"
          },
          "total_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count_with_vulnerabilities",
          "total_count"
        ]
      },
      "models.ImageWithRulesFailed": {
        "properties": {
          "1": {
            "format": "int64",
            "type": "integer"
          },
          "2": {
            "format": "int64",
            "type": "integer"
          },
          "3": {
            "format": "int64",
            "type": "integer"
          },
          "4": {
            "format": "int64",
            "type": "integer"
          },
          "image_digest": {
            "type": "string"
          },
          "image_registry": {
            "type": "string"
          },
          "image_repository": {
            "type": "string"
          },
          "image_tag": {
            "type": "string"
          }
        },
        "required": [
          "1",
          "2",
          "3",
          "4",
          "image_digest",
          "image_registry",
          "image_repository",
          "image_tag"
        ]
      },
      "models.ImagesWithRulesFailed": {
        "properties": {
          "images": {
            "items": {
              "$ref": "#/components/schemas/models.ImageWithRulesFailed"
            },
            "type": "array"
          },
          "not_applicable_filters": {
            "type": "string"
          }
        },
        "required": [
          "images",
          "not_applicable_filters"
        ]
      },
      "models.IssuesSummaryContainerInfo": {
        "properties": {
          "first_seen": {
            "format": "int64",
            "type": "integer"
          },
          "last_seen": {
            "format": "int64",
            "type": "integer"
          },
          "running_containers": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "first_seen",
          "last_seen",
          "running_containers"
        ]
      },
      "models.JobMetaData": {
        "properties": {
          "cloud_provider": {
            "format": "int32",
            "type": "integer"
          },
          "instance_id": {
            "type": "string"
          },
          "job_end_time": {
            "format": "date-time",
            "type": "string"
          },
          "job_id": {
            "type": "string"
          },
          "job_start_time": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "scanner_version": {
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "cloud_provider",
          "instance_id",
          "job_end_time",
          "job_id",
          "job_start_time",
          "message",
          "scanner_version",
          "status"
        ]
      },
      "models.LightWeightConfig": {
        "properties": {
          "architecture": {
            "type": "string"
          },
          "cmd": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "entry_point": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "env": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exposed_ports": {
            "type": "object"
          },
          "labels": {
            "type": "object"
          },
          "user": {
            "type": "string"
          },
          "working_dir": {
            "type": "string"
          }
        },
        "required": [
          "architecture",
          "cmd",
          "entry_point",
          "env",
          "exposed_ports",
          "labels",
          "user",
          "working_dir"
        ]
      },
      "models.LightWeightConfig.exposed_ports": {},
      "models.Message": {
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "models.MockExecutionCreateRequestV1": {
        "properties": {
          "definition": {
            "$ref": "#/components/schemas/models.DefinitionCreateRequestV2"
          },
          "mocks": {
            "description": "Mock activity data and trigger data for non-on-demand executions, keyed by node ID, may include trigger and/or activity nodes",
            "type": "string"
          },
          "on_demand_trigger": {
            "description": "Trigger data for on-demand executions",
            "type": "string"
          }
        },
        "required": [
          "mocks"
        ]
      },
      "models.ModifyAWSCustomerSettingsV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.AWSCustomerSettingsRequestV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "models.Node": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/models.Node.agents"
            },
            "type": "array"
          },
          "annotations_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "architecture": {
            "type": "string"
          },
          "base_image": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_instance_id": {
            "type": "string"
          },
          "cloud_instance_type": {
            "type": "string"
          },
          "cloud_name": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "cloud_service": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "container_count": {
            "format": "int32",
            "type": "integer"
          },
          "container_runtime_version": {
            "type": "string"
          },
          "cpu": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string"
          },
          "external_ip": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "ipv4": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "kac_agent_id": {
            "type": "string"
          },
          "kernel_version": {
            "type": "string"
          },
          "kubernetes_version": {
            "type": "string"
          },
          "labels": {
            "type": "object"
          },
          "labels_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_seen": {
            "type": "string"
          },
          "linux_sensor_coverage": {
            "type": "boolean"
          },
          "memory": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "pod_cidr": {
            "type": "string"
          },
          "pod_count": {
            "format": "int32",
            "type": "integer"
          },
          "provider_id": {
            "type": "string"
          },
          "resource_status": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "required": [
          "agents",
          "annotations_list",
          "architecture",
          "base_image",
          "cid",
          "cloud_account_id",
          "cloud_instance_id",
          "cloud_instance_type",
          "cloud_name",
          "cloud_region",
          "cloud_service",
          "cluster_id",
          "cluster_name",
          "container_count",
          "container_runtime_version",
          "cpu",
          "created_at",
          "external_ip",
          "first_seen",
          "ipv4",
          "ipv6",
          "kac_agent_id",
          "kernel_version",
          "kubernetes_version",
          "labels",
          "labels_list",
          "last_seen",
          "linux_sensor_coverage",
          "memory",
          "node_id",
          "node_name",
          "os",
          "pod_cidr",
          "pod_count",
          "provider_id",
          "resource_status",
          "storage",
          "uid"
        ]
      },
      "models.Node.agents": {
        "type": "object"
      },
      "models.NodeEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Node"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.NonCompliantAssetsBySeverity": {
        "properties": {
          "1": {
            "format": "int64",
            "type": "integer"
          },
          "2": {
            "format": "int64",
            "type": "integer"
          },
          "3": {
            "format": "int64",
            "type": "integer"
          },
          "4": {
            "format": "int64",
            "type": "integer"
          },
          "not_applicable_filters": {
            "type": "string"
          }
        },
        "required": [
          "1",
          "2",
          "3",
          "4",
          "not_applicable_filters"
        ]
      },
      "models.OSInfoType": {
        "properties": {
          "Name": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "required": [
          "Name",
          "Version"
        ]
      },
      "models.PackageInfoType": {
        "properties": {
          "LayerHash": {
            "type": "string"
          },
          "LayerIndex": {
            "format": "int32",
            "type": "integer"
          },
          "MajorVersion": {
            "type": "string"
          },
          "PackageHash": {
            "type": "string"
          },
          "PackageProvider": {
            "type": "string"
          },
          "PackageSource": {
            "type": "string"
          },
          "Product": {
            "type": "string"
          },
          "SoftwareArchitecture": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Vendor": {
            "type": "string"
          }
        }
      },
      "models.PackageNameVersionType": {
        "properties": {
          "package_fixed_version": {
            "type": "string"
          },
          "package_name_version": {
            "type": "string"
          },
          "package_os_version": {
            "type": "string"
          },
          "package_remediation": {
            "type": "string"
          },
          "package_type": {
            "type": "string"
          }
        },
        "required": [
          "package_fixed_version",
          "package_name_version",
          "package_os_version",
          "package_remediation",
          "package_type"
        ]
      },
      "models.PackageVulnerabilityType": {
        "properties": {
          "Vulnerability": {
            "$ref": "#/components/schemas/models.VulnerabilityType"
          }
        },
        "required": [
          "Vulnerability"
        ]
      },
      "models.PartialFingerprints": {
        "properties": {
          "identifier/v1": {
            "type": "string"
          }
        },
        "required": [
          "identifier/v1"
        ]
      },
      "models.PatchImageGroupRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_group_data": {
            "$ref": "#/components/schemas/models.APIPolicyGroupData"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "models.PatchPolicyRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "policy_data": {
            "$ref": "#/components/schemas/models.RequestAPIPolicyData"
          }
        },
        "required": [
          "description",
          "is_enabled",
          "name"
        ]
      },
      "models.Pod": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/models.Pod.agents"
            },
            "type": "array"
          },
          "allow_privilege_escalation": {
            "type": "boolean"
          },
          "annotations_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "app_name": {
            "type": "string"
          },
          "automount_service_token": {
            "type": "boolean"
          },
          "cid": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "cloud_name": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "cloud_service": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "container_count": {
            "format": "int32",
            "type": "integer"
          },
          "containers": {
            "items": {
              "$ref": "#/components/schemas/models.Pod.containers"
            },
            "type": "array"
          },
          "created_at": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "host_ipc": {
            "type": "boolean"
          },
          "host_network": {
            "type": "boolean"
          },
          "host_pid": {
            "type": "boolean"
          },
          "image_pull_secrets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipv4": {
            "type": "string"
          },
          "ipv6": {
            "type": "string"
          },
          "kac_agent_id": {
            "type": "string"
          },
          "labels": {
            "type": "object"
          },
          "labels_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "last_seen": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "node_ipv4": {
            "type": "string"
          },
          "node_name": {
            "type": "string"
          },
          "node_selector": {
            "type": "string"
          },
          "node_uid": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "owner_type": {
            "type": "string"
          },
          "pod_external_id": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          },
          "pod_name": {
            "type": "string"
          },
          "ports": {
            "items": {
              "$ref": "#/components/schemas/models.Pod.ports"
            },
            "type": "array"
          },
          "privileged": {
            "type": "boolean"
          },
          "resource_status": {
            "type": "string"
          },
          "root_write_access": {
            "type": "boolean"
          },
          "run_as_root_group": {
            "type": "boolean"
          },
          "run_as_root_user": {
            "type": "boolean"
          },
          "scheduler_name": {
            "type": "string"
          },
          "service_account_name": {
            "type": "string"
          },
          "share_process_namespace": {
            "type": "boolean"
          },
          "volume_mounts": {
            "type": "string"
          }
        },
        "required": [
          "agents",
          "allow_privilege_escalation",
          "annotations_list",
          "app_name",
          "automount_service_token",
          "cid",
          "cloud_account_id",
          "cloud_name",
          "cloud_region",
          "cloud_service",
          "cluster_id",
          "cluster_name",
          "container_count",
          "containers",
          "created_at",
          "first_seen",
          "host_ipc",
          "host_network",
          "host_pid",
          "image_pull_secrets",
          "ipv4",
          "ipv6",
          "kac_agent_id",
          "labels",
          "labels_list",
          "last_seen",
          "namespace",
          "node_ipv4",
          "node_name",
          "node_selector",
          "node_uid",
          "owner_id",
          "owner_type",
          "pod_external_id",
          "pod_id",
          "pod_name",
          "ports",
          "privileged",
          "resource_status",
          "root_write_access",
          "run_as_root_group",
          "run_as_root_user",
          "scheduler_name",
          "service_account_name",
          "share_process_namespace",
          "volume_mounts"
        ]
      },
      "models.Pod.agents": {
        "type": "object"
      },
      "models.Pod.containers": {
        "type": "object"
      },
      "models.Pod.ports": {
        "type": "object"
      },
      "models.PodEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Pod"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.PolicyEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyEntity"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.PolicyExclusionEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyExclusion"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.PolicyGroupEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "models.RegistryCredentialsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.Credentials"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "models.RequestAPIPolicyData": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/models.APIPolicyRule"
            },
            "type": "array"
          }
        },
        "required": [
          "rules"
        ]
      },
      "models.Result": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "locations": {
            "items": {
              "$ref": "#/components/schemas/models.ResultLocation"
            },
            "type": "array"
          },
          "message": {
            "$ref": "#/components/schemas/models.Message"
          },
          "partialFingerprints": {
            "$ref": "#/components/schemas/models.PartialFingerprints"
          },
          "properties": {
            "$ref": "#/components/schemas/models.ResultProperties"
          },
          "ruleId": {
            "type": "string"
          },
          "ruleIndex": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "kind",
          "level",
          "locations",
          "message",
          "partialFingerprints",
          "properties",
          "ruleId",
          "ruleIndex"
        ]
      },
      "models.ResultLocation": {
        "properties": {
          "physicalLocation": {
            "$ref": "#/components/schemas/models.ResultPhysicalLocation"
          },
          "properties": {
            "$ref": "#/components/schemas/models.ResultLocationProperties"
          }
        },
        "required": [
          "physicalLocation",
          "properties"
        ]
      },
      "models.ResultLocationProperties": {
        "properties": {
          "layer": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "layer",
          "path"
        ]
      },
      "models.ResultPhysicalLocation": {
        "properties": {
          "artifactLocation": {
            "$ref": "#/components/schemas/models.ResultPhysicalLocationArtifactLocation"
          },
          "region": {
            "$ref": "#/components/schemas/models.ResultPhysicalLocationRegion"
          }
        },
        "required": [
          "artifactLocation",
          "region"
        ]
      },
      "models.ResultPhysicalLocationArtifactLocation": {
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ]
      },
      "models.ResultPhysicalLocationRegion": {
        "properties": {
          "startLine": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "startLine"
        ]
      },
      "models.ResultProperties": {
        "properties": {
          "assetID": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetType": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloudAccountID": {
            "type": "string"
          },
          "cloudAccountName": {
            "type": "string"
          },
          "cloudProvider": {
            "type": "string"
          },
          "functionType": {
            "type": "string"
          },
          "isSupported": {
            "type": "boolean"
          },
          "last_analyzed_at": {
            "format": "int64",
            "type": "integer"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "assetID",
          "assetName",
          "assetType",
          "cid",
          "cloudAccountID",
          "cloudAccountName",
          "cloudProvider",
          "functionType",
          "isSupported",
          "last_analyzed_at",
          "region"
        ]
      },
      "models.Rule": {
        "properties": {
          "defaultConfiguration": {
            "$ref": "#/components/schemas/models.RuleDefaultConfiguration"
          },
          "fullDescription": {
            "$ref": "#/components/schemas/models.Message"
          },
          "help": {
            "$ref": "#/components/schemas/.help"
          },
          "helpUri": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/models.RuleProperties"
          },
          "shortDescription": {
            "$ref": "#/components/schemas/models.Message"
          }
        },
        "required": [
          "defaultConfiguration",
          "fullDescription",
          "help",
          "helpUri",
          "id",
          "name",
          "properties",
          "shortDescription"
        ]
      },
      "models.RuleDefaultConfiguration": {
        "properties": {
          "level": {
            "type": "string"
          }
        },
        "required": [
          "level"
        ]
      },
      "models.RuleProperties": {
        "properties": {
          "cvssAttackComplexity": {
            "type": "string"
          },
          "cvssAttackVector": {
            "type": "string"
          },
          "cvssAvailabilityImpact": {
            "type": "string"
          },
          "cvssBaseScore": {
            "format": "double",
            "type": "number"
          },
          "cvssConfidentialityImpact": {
            "type": "string"
          },
          "cvssExploitabilityScore": {
            "format": "double",
            "type": "number"
          },
          "cvssImpactScore": {
            "format": "double",
            "type": "number"
          },
          "cvssIntegrityImpact": {
            "type": "string"
          },
          "cvssPrivilegesRequired": {
            "type": "string"
          },
          "cvssScope": {
            "type": "string"
          },
          "cvssSource": {
            "type": "string"
          },
          "cvssUserInteraction": {
            "type": "string"
          },
          "cvssVector": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "exploitDateRecordedTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "exploitSources": {
            "items": {
              "$ref": "#/components/schemas/ingestion.CVEExploitSource"
            },
            "type": "array"
          },
          "exploitStatus": {
            "type": "string"
          },
          "exploitUpdatedTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "exprtRating": {
            "type": "string"
          },
          "exprtRatingDateRecordedTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "exprtRatingHighest": {
            "type": "string"
          },
          "exprtRatingHighestRecordedTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "firstSeenTimestamp": {
            "format": "int64",
            "type": "integer"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/ingestion.Reference"
            },
            "type": "array"
          },
          "remediationCount": {
            "format": "int32",
            "type": "integer"
          },
          "remediationSources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remediations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runtime": {
            "type": "string"
          },
          "scannerVersion": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "topExprtRatingFactors": {
            "items": {
              "$ref": "#/components/schemas/ingestion.ExPRTRatingFactors"
            },
            "type": "array"
          }
        },
        "required": [
          "cvssAttackComplexity",
          "cvssAttackVector",
          "cvssAvailabilityImpact",
          "cvssBaseScore",
          "cvssConfidentialityImpact",
          "cvssExploitabilityScore",
          "cvssImpactScore",
          "cvssIntegrityImpact",
          "cvssPrivilegesRequired",
          "cvssScope",
          "cvssSource",
          "cvssUserInteraction",
          "cvssVector",
          "description",
          "exploitDateRecordedTimestamp",
          "exploitSources",
          "exploitStatus",
          "exploitUpdatedTimestamp",
          "exprtRating",
          "exprtRatingDateRecordedTimestamp",
          "exprtRatingHighest",
          "exprtRatingHighestRecordedTimestamp",
          "firstSeenTimestamp",
          "references",
          "remediationCount",
          "remediationSources",
          "remediations",
          "runtime",
          "scannerVersion",
          "severity",
          "topExprtRatingFactors"
        ]
      },
      "models.RuleStatus": {
        "properties": {
          "name": {
            "type": "string"
          },
          "recommendation_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "recommendation_id",
          "status"
        ]
      },
      "models.RuleWithNonCompliantAssets": {
        "properties": {
          "asset_count": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "recommendation_id": {
            "type": "string"
          },
          "severity": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "asset_count",
          "name",
          "recommendation_id",
          "severity"
        ]
      },
      "models.RulesFailedBySeverity": {
        "properties": {
          "1": {
            "format": "int64",
            "type": "integer"
          },
          "2": {
            "format": "int64",
            "type": "integer"
          },
          "3": {
            "format": "int64",
            "type": "integer"
          },
          "4": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      "models.RulesWithNonCompliantAssets": {
        "properties": {
          "not_applicable_filters": {
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/models.RuleWithNonCompliantAssets"
            },
            "type": "array"
          }
        },
        "required": [
          "not_applicable_filters",
          "rules"
        ]
      },
      "models.Run": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/models.Result"
            },
            "type": "array"
          },
          "tool": {
            "$ref": "#/components/schemas/models.RunTool"
          }
        },
        "required": [
          "results",
          "tool"
        ]
      },
      "models.RunTool": {
        "properties": {
          "driver": {
            "$ref": "#/components/schemas/models.RunToolDriver"
          }
        },
        "required": [
          "driver"
        ]
      },
      "models.RunToolDriver": {
        "properties": {
          "informationUri": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/models.Rule"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "informationUri",
          "name",
          "rules",
          "version"
        ]
      },
      "models.ScanReportType": {
        "properties": {
          "ApplicationPackages": {
            "items": {
              "$ref": "#/components/schemas/models.ApplicationPackageInfoType"
            },
            "type": "array"
          },
          "DetectionEngineInfo": {
            "$ref": "#/components/schemas/models.DetectionEngineInfoType"
          },
          "Detections": {
            "items": {
              "$ref": "#/components/schemas/models.DetectionInfoType"
            },
            "type": "array"
          },
          "Vulnerabilities": {
            "items": {
              "$ref": "#/components/schemas/models.PackageVulnerabilityType"
            },
            "type": "array"
          },
          "VulnerabilitiesTruncated": {
            "$ref": "#/components/schemas/models.VulnerabilitiesType"
          },
          "job_metadata": {
            "$ref": "#/components/schemas/models.JobMetaData"
          },
          "os_info": {
            "$ref": "#/components/schemas/models.OSInfoType"
          },
          "results": {
            "$ref": "#/components/schemas/models.ScanResults"
          }
        },
        "required": [
          "DetectionEngineInfo",
          "Detections",
          "Vulnerabilities",
          "job_metadata",
          "os_info",
          "results"
        ]
      },
      "models.ScanResults": {
        "properties": {
          "applications": {
            "items": {
              "$ref": "#/components/schemas/models.SnapshotInventoryApplication"
            },
            "type": "array"
          },
          "containers": {
            "items": {
              "$ref": "#/components/schemas/models.Container"
            },
            "type": "array"
          },
          "elf_binaries": {
            "items": {
              "$ref": "#/components/schemas/models.ELFBinary"
            },
            "type": "array"
          },
          "os_version": {
            "type": "string"
          }
        },
        "required": [
          "applications",
          "containers",
          "elf_binaries",
          "os_version"
        ]
      },
      "models.SnapshotAccountStatus": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_status": {
            "type": "string"
          },
          "batch_regions": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSBatchClusterRegion"
            },
            "type": "array"
          },
          "cloud_provider": {
            "format": "int32",
            "type": "integer"
          },
          "iam_external_id": {
            "type": "string"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "processing_account": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "account_id",
          "account_status",
          "batch_regions",
          "cloud_provider",
          "iam_external_id",
          "iam_role_arn",
          "processing_account",
          "regions"
        ]
      },
      "models.SnapshotInventoryApplication": {
        "properties": {
          "major_version": {
            "type": "string"
          },
          "package_hash": {
            "type": "string"
          },
          "package_provider": {
            "type": "string"
          },
          "package_source": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "software_architecture": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "major_version",
          "package_hash",
          "package_provider",
          "package_source",
          "path",
          "product",
          "software_architecture",
          "type",
          "vendor"
        ]
      },
      "models.UpdateAWSAccountsV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.AWSAccountRequestV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "models.UpdateExclusionsRequest": {
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/models.ExclusionConditionRequest"
            },
            "type": "array"
          }
        },
        "required": [
          "conditions"
        ]
      },
      "models.VerifyAccessResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.AccountAccessResult"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "models.VulnerabilitiesType": {
        "properties": {
          "CVEMapping": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "CVEMapping"
        ]
      },
      "models.VulnerabilityProduct": {
        "properties": {
          "MajorVersion": {
            "type": "string"
          },
          "PackageHash": {
            "type": "string"
          },
          "PackageProvider": {
            "type": "string"
          },
          "PackageSource": {
            "type": "string"
          },
          "PackageType": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "PlatformType": {
            "type": "string"
          },
          "Product": {
            "type": "string"
          },
          "ProductNormalized": {
            "type": "string"
          },
          "SoftwareArchitecture": {
            "type": "string"
          },
          "Vendor": {
            "type": "string"
          }
        },
        "required": [
          "MajorVersion",
          "PackageSource",
          "Product",
          "SoftwareArchitecture"
        ]
      },
      "models.VulnerabilitySARIF": {
        "properties": {
          "$schema": {
            "type": "string"
          },
          "runs": {
            "items": {
              "$ref": "#/components/schemas/models.Run"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "$schema",
          "runs",
          "version"
        ]
      },
      "models.VulnerabilityType": {
        "properties": {
          "CVEID": {
            "type": "string"
          },
          "ContentDataHash": {
            "format": "integer",
            "type": "integer"
          },
          "Details": {
            "$ref": "#/components/schemas/domain.CVE"
          },
          "ExploitDetails": {
            "$ref": "#/components/schemas/vulncheck.ExploitDetails"
          },
          "FixedVersions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Product": {
            "$ref": "#/components/schemas/models.VulnerabilityProduct"
          },
          "Remediation": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "CVEID",
          "ContentDataHash",
          "Details",
          "Product",
          "Remediation"
        ]
      },
      "models.accessHealthDetails": {
        "properties": {
          "last_checked": {
            "description": "Timestamp of the when access was last verified.",
            "type": "string"
          },
          "reason": {
            "description": "If valid is false, the reported reason why access is failing.",
            "type": "string"
          },
          "valid": {
            "description": "A true or false value indicating whether access was successful based on last_checked.",
            "type": "boolean"
          }
        },
        "required": [
          "valid"
        ]
      },
      "models.awsAccountAccessHealth": {
        "properties": {
          "api": {
            "$ref": "#/components/schemas/models.accessHealthDetails"
          }
        }
      },
      "msa.APIError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "msa.AffectedEntity": {
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "path"
        ]
      },
      "msa.AggregateQueryRequest": {
        "properties": {
          "date_ranges": {
            "items": {
              "$ref": "#/components/schemas/msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "type": "string"
          },
          "extended_bounds": {
            "$ref": "#/components/schemas/msa.ExtendedBoundsSpec"
          },
          "field": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "max_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregateQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "msa.AggregatesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResult"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.AggregationResult": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResultItem"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "msa.AggregationResultItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/msa.AggregationResultItem.label"
          },
          "string_from": {
            "type": "string"
          },
          "string_to": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "msa.AggregationResultItem.label": {},
      "msa.BaseEntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "msa.DateRangeSpec": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "msa.EntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/msa.EntitiesResponse.resources"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.EntitiesResponse.resources": {},
      "msa.EntityActionRequest": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          }
        }
      },
      "msa.EntityActionRequestV2": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "msa.EntityActionRequestV3": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          },
          "filter": {
            "type": "string"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "filter",
          "ids"
        ]
      },
      "msa.ErrorsOnly": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "msa.ExtendedBoundsSpec": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          }
        },
        "required": [
          "max",
          "min"
        ]
      },
      "msa.Facet": {
        "properties": {
          "by": {
            "items": {
              "$ref": "#/components/schemas/msa.Facet"
            },
            "type": "array"
          },
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "facet": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "term": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "term"
        ]
      },
      "msa.FacetsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/msa.Facet"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.IdsRequest": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "msa.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msa.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msa.Resources"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "msa.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "msa.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.RangeSpec": {
        "properties": {
          "From": {
            "format": "double",
            "type": "number"
          },
          "To": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "From",
          "To"
        ]
      },
      "msa.ReplyAffectedEntities": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/msa.AffectedEntity"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.ReplyMetaOnly": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msa.APIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msa.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "msa.Resources": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "resources_affected"
        ]
      },
      "msaspec.ActionParameter": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "msaspec.Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "msaspec.IdsRequest": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "msaspec.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "msaspec.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "msaspec.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "msaspec.ResponseFields": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "msaspec.Writes": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "resources_affected"
        ]
      },
      "packages.apiCombinedPackage": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPackageCombined"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "packages.apiCombinedPackageExport": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPackageCombined"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "packages.apiCombinedPackageV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPackageCombinedV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "packages.apiPackagesByImageCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "packages.apiPackagesByVulnCount": {
        "properties": {
          "Resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIPackagesByVulnCount"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "Resources",
          "meta"
        ]
      },
      "parameter.ActivityConfigParameterValue": {
        "properties": {
          "default_value": {
            "$ref": "#/components/schemas/parameter.ActivityConfigParameterValue.default_value"
          },
          "deny_override": {
            "description": "Specifies whether the given activity configuration property can be overridden at provisioning time.",
            "type": "boolean"
          },
          "helperText": {
            "description": "Optional text/description which can be used to provide differentiation for parameterized fields during app installation.",
            "type": "string"
          },
          "required": {
            "description": "Indication of whether the property must be specified as a parameter during template provisioning.",
            "type": "boolean"
          }
        },
        "required": [
          "required"
        ]
      },
      "parameter.ActivityConfigParameterValue.default_value": {},
      "parameter.ActivityConfigProvisionParameter": {
        "properties": {
          "node_id": {
            "description": "The node_id of the activity in the model that is to be configured.",
            "type": "string"
          },
          "properties": {
            "description": "The configurable properties of the activity and their accompanying metadata.",
            "type": "object"
          }
        },
        "required": [
          "node_id",
          "properties"
        ]
      },
      "parameter.ActivityProvisionParameters": {
        "properties": {
          "configuration": {
            "description": "provisioning parameterization of activity configuration.",
            "items": {
              "$ref": "#/components/schemas/parameter.ActivityConfigProvisionParameter"
            },
            "type": "array"
          },
          "selection": {
            "description": "provisioning parameterization of activity selection.",
            "items": {
              "$ref": "#/components/schemas/parameter.ActivitySelectionParameter"
            },
            "type": "array"
          }
        }
      },
      "parameter.ActivitySelectionParameter": {
        "properties": {
          "id": {
            "description": "A static activity ID that is a suitable candidate for specifying at provisioning time.",
            "type": "string"
          },
          "properties": {
            "description": "Statically defines properties that will be applied to the referenced activity.",
            "type": "object"
          },
          "source": {
            "description": "The ID of the node in the model the activity should be bound to at provisioning time. The activity will be generated along with a flow node that connects it to this source node.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "properties",
          "source"
        ]
      },
      "parameter.ConditionFieldParameter": {
        "properties": {
          "default_operator": {
            "description": "Optional default operator to be used as part of the condition",
            "type": "string"
          },
          "default_value": {
            "$ref": "#/components/schemas/parameter.ConditionFieldParameter.default_value"
          },
          "helperText": {
            "description": "Optional text/description which can be used to provide differentiation for parameterized fields during app installation.",
            "type": "string"
          },
          "multiple": {
            "description": "Whether the field can be specified multiple times as provisioning parameter. When true, all values or combined via an OR operator.",
            "type": "boolean"
          },
          "operator": {
            "description": "The default operator that should be applied for this field.",
            "type": "string"
          },
          "required": {
            "description": "Indicates whether the field must be specified as a parameter at provision time.",
            "type": "boolean"
          }
        },
        "required": [
          "multiple",
          "required"
        ]
      },
      "parameter.ConditionFieldParameter.default_value": {},
      "parameter.ConditionFieldProvisionParameter": {
        "properties": {
          "condition_group_id": {
            "description": "specifies the conditin group id inside the flow node. This is needed since with or support now we can have multiple instances of the same variable",
            "type": "string"
          },
          "name": {
            "description": "Fully qualified name of the field",
            "type": "string"
          },
          "operator": {
            "description": "Optional operator to be used as part of the condition. It not supplied the default in the template will be used.",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/parameter.ConditionFieldProvisionParameter.value"
          }
        },
        "required": [
          "condition_group_id",
          "name",
          "operator",
          "value"
        ]
      },
      "parameter.ConditionFieldProvisionParameter.value": {},
      "parameter.ConditionProvisionParameter": {
        "properties": {
          "fields": {
            "description": "details for the condition fields to be set when provisioning.",
            "items": {
              "$ref": "#/components/schemas/parameter.ConditionFieldProvisionParameter"
            },
            "type": "array"
          },
          "node_id": {
            "description": "The flow node_id in the model this condition is associated with.",
            "type": "string"
          }
        },
        "required": [
          "fields",
          "node_id"
        ]
      },
      "parameter.TemplateProvisionParameters": {
        "properties": {
          "activities": {
            "$ref": "#/components/schemas/parameter.ActivityProvisionParameters"
          },
          "conditions": {
            "description": "set of parameters for provisioning of conditions within the associated template.",
            "items": {
              "$ref": "#/components/schemas/parameter.ConditionProvisionParameter"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/parameter.TriggerProvisionParameter"
          }
        }
      },
      "parameter.TriggerFieldParameter": {
        "properties": {
          "default_value": {
            "$ref": "#/components/schemas/parameter.TriggerFieldParameter.default_value"
          },
          "properties": {
            "description": "Values associated with trigger property received during provisioning call.",
            "type": "object"
          },
          "required": {
            "description": "Indicates whether the field must be specified as a parameter at provision time.",
            "type": "boolean"
          }
        },
        "required": [
          "required"
        ]
      },
      "parameter.TriggerFieldParameter.default_value": {},
      "parameter.TriggerParameter": {
        "properties": {
          "fields": {
            "description": "Contains a mapping of each parameterized trigger field with default values.",
            "type": "object"
          },
          "node_id": {
            "description": "The graph node ID for where these conditions reside.",
            "type": "string"
          }
        },
        "required": [
          "fields",
          "node_id"
        ]
      },
      "parameter.TriggerProvisionParameter": {
        "properties": {
          "fields": {
            "description": "Contains a mapping of each parameterized trigger field with default values.",
            "type": "object"
          },
          "node_id": {
            "description": "The flow node_id in the model this condition is associated with.",
            "type": "string"
          }
        },
        "required": [
          "fields",
          "node_id"
        ]
      },
      "patterndisposition.PatternDisposition": {
        "properties": {
          "blocking_unsupported_or_disabled": {
            "type": "boolean"
          },
          "bootup_safeguard_enabled": {
            "type": "boolean"
          },
          "containment_file_system": {
            "type": "boolean"
          },
          "critical_process_disabled": {
            "type": "boolean"
          },
          "detect": {
            "type": "boolean"
          },
          "fs_operation_blocked": {
            "type": "boolean"
          },
          "handle_operation_downgraded": {
            "type": "boolean"
          },
          "inddet_mask": {
            "type": "boolean"
          },
          "indicator": {
            "type": "boolean"
          },
          "kill_action_failed": {
            "type": "boolean"
          },
          "kill_parent": {
            "type": "boolean"
          },
          "kill_process": {
            "type": "boolean"
          },
          "kill_subprocess": {
            "type": "boolean"
          },
          "mfa_required": {
            "type": "boolean"
          },
          "operation_blocked": {
            "type": "boolean"
          },
          "policy_disabled": {
            "type": "boolean"
          },
          "prevention_provisioning_enabled": {
            "type": "boolean"
          },
          "process_blocked": {
            "type": "boolean"
          },
          "quarantine_file": {
            "type": "boolean"
          },
          "quarantine_machine": {
            "type": "boolean"
          },
          "registry_operation_blocked": {
            "type": "boolean"
          },
          "response_action_already_applied": {
            "type": "boolean"
          },
          "response_action_failed": {
            "type": "boolean"
          },
          "response_action_triggered": {
            "type": "boolean"
          },
          "rooting": {
            "type": "boolean"
          },
          "sensor_only": {
            "type": "boolean"
          },
          "suspend_parent": {
            "type": "boolean"
          },
          "suspend_process": {
            "type": "boolean"
          }
        },
        "required": [
          "blocking_unsupported_or_disabled",
          "bootup_safeguard_enabled",
          "containment_file_system",
          "critical_process_disabled",
          "detect",
          "fs_operation_blocked",
          "handle_operation_downgraded",
          "inddet_mask",
          "indicator",
          "kill_action_failed",
          "kill_parent",
          "kill_process",
          "kill_subprocess",
          "mfa_required",
          "operation_blocked",
          "policy_disabled",
          "prevention_provisioning_enabled",
          "process_blocked",
          "quarantine_file",
          "quarantine_machine",
          "registry_operation_blocked",
          "response_action_already_applied",
          "response_action_failed",
          "response_action_triggered",
          "rooting",
          "sensor_only",
          "suspend_parent",
          "suspend_process"
        ]
      },
      "policies.AssignedHostGroup": {
        "properties": {
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "href",
          "id"
        ]
      },
      "policies.AssignedRuleGroup": {
        "properties": {
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "href",
          "id"
        ]
      },
      "policies.CreateRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "policies.DeleteResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "policies.Policy": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "host_groups": {
            "items": {
              "$ref": "#/components/schemas/policies.AssignedHostGroup"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "precedence": {
            "format": "int32",
            "type": "integer"
          },
          "rule_groups": {
            "items": {
              "$ref": "#/components/schemas/policies.AssignedRuleGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "created_timestamp",
          "enabled",
          "id",
          "modified_by",
          "modified_timestamp"
        ]
      },
      "policies.PrecedenceResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "policies.Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/policies.Policy"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "policies.UpdateRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "policy.SensorUpdateSchedule": {
        "properties": {
          "days": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "end": {
            "type": "string"
          },
          "start": {
            "type": "string"
          }
        },
        "required": [
          "days",
          "end",
          "start"
        ]
      },
      "policy.SensorUpdateScheduler": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/policy.SensorUpdateSchedule"
            },
            "type": "array"
          },
          "timezone": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "schedules",
          "timezone"
        ]
      },
      "policyframework.Benchmark": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "policyframework.Control": {
        "properties": {
          "benchmarks": {
            "items": {
              "$ref": "#/components/schemas/policyframework.Benchmark"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "framework": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "prevention.CategoryRespV1": {
        "description": "A prevention policy category",
        "properties": {
          "name": {
            "description": "The name of the category",
            "type": "string"
          },
          "settings": {
            "description": "A collection of prevention policy settings",
            "items": {
              "$ref": "#/components/schemas/prevention.SettingRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "settings"
        ]
      },
      "prevention.CreatePoliciesReqV1": {
        "description": "A request to create prevention policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to create",
            "items": {
              "$ref": "#/components/schemas/prevention.CreatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "prevention.CreatePolicyReqV1": {
        "properties": {
          "clone_id": {
            "description": "If specified the settings of the prevention policy identified by the id will be used",
            "type": "string"
          },
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "description": "The settings to create the policy with",
            "items": {
              "$ref": "#/components/schemas/prevention.SettingReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "platform_name"
        ]
      },
      "prevention.PolicyV1": {
        "description": "A fully formed prevention policy",
        "properties": {
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "ioa_rule_groups": {
            "description": "The IOA rule groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/ioa_rule_groups.RuleGroupV1"
            },
            "type": "array"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "prevention_settings": {
            "description": "A category of settings in a prevention policy",
            "items": {
              "$ref": "#/components/schemas/prevention.CategoryRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "ioa_rule_groups",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "prevention_settings"
        ]
      },
      "prevention.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/prevention.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "prevention.SettingReqV1": {
        "description": "A specific setting to update",
        "properties": {
          "id": {
            "description": "The id of the setting to update",
            "type": "string"
          },
          "value": {
            "description": "The new value for the setting. For a toggle this value will take the form {'enabled':true|false}. For an mlslider this will take the form {'detection':'DISABLED|CAUTIOUS|MODERATE|AGGRESSIVE|EXTRA_AGGRESSIVE','prevention':'DISABLED|CAUTIOUS|MODERATE|AGGRESSIVE|EXTRA_AGGRESSIVE'}",
            "type": "object"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "prevention.SettingRespV1": {
        "description": "A prevention policy setting",
        "properties": {
          "description": {
            "description": "The human readable description of the setting",
            "type": "string"
          },
          "id": {
            "description": "The id of the setting",
            "type": "string"
          },
          "name": {
            "description": "The name of the setting",
            "type": "string"
          },
          "type": {
            "description": "The type of the setting which can be used as a hint when displaying in the UI",
            "enum": [
              "toggle",
              "mlslider"
            ],
            "type": "string"
          },
          "value": {
            "description": "The value for the setting. For a toggle this value will take the form {'enabled':true|false}. For an mlslider this will take the form {'detection':'DISABLED|CAUTIOUS|MODERATE|AGGRESSIVE|EXTRA_AGGRESSIVE','prevention':'DISABLED|CAUTIOUS|MODERATE|AGGRESSIVE|EXTRA_AGGRESSIVE'}",
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "value"
        ]
      },
      "prevention.UpdatePoliciesReqV1": {
        "description": "A request to update prevention policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to update",
            "items": {
              "$ref": "#/components/schemas/prevention.UpdatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "prevention.UpdatePolicyReqV1": {
        "description": "An update for a specific policy",
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          },
          "settings": {
            "description": "A collection of prevention policy settings to update",
            "items": {
              "$ref": "#/components/schemas/prevention.SettingReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "settings"
        ]
      },
      "processesapi.MsaProcessDetailResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/processesapi.ProcessDetail"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "processesapi.ProcessDetail": {
        "properties": {
          "command_line": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "process_id": {
            "type": "string"
          },
          "process_id_local": {
            "type": "string"
          },
          "start_timestamp": {
            "type": "string"
          },
          "start_timestamp_raw": {
            "type": "string"
          },
          "stop_timestamp": {
            "type": "string"
          },
          "stop_timestamp_raw": {
            "type": "string"
          }
        },
        "required": [
          "command_line",
          "device_id",
          "file_name",
          "process_id",
          "process_id_local",
          "start_timestamp",
          "start_timestamp_raw",
          "stop_timestamp",
          "stop_timestamp_raw"
        ]
      },
      "quarantine.QuarantinedFile": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "alert_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "date_created": {
            "type": "string"
          },
          "date_updated": {
            "type": "string"
          },
          "detect_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "extracted": {
            "type": "boolean"
          },
          "hostname": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_on_removable_disk": {
            "type": "boolean"
          },
          "paths": {
            "items": {
              "$ref": "#/components/schemas/quarantine.QuarantinedFilePath"
            },
            "type": "array"
          },
          "primary_module": {
            "type": "boolean"
          },
          "release_path_for_removable_media": {
            "type": "string"
          },
          "sandbox_report_id": {
            "type": "string"
          },
          "sandbox_report_state": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "quarantine.QuarantinedFilePath": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "reason": {
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "quickscanpro.DeleteFileResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "quickscanpro.FileResult": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "verdict": {
            "enum": [
              "clean",
              "suspicious",
              "malicious",
              "unknown"
            ],
            "type": "string"
          },
          "verdict_reason": {
            "type": "string"
          }
        },
        "required": [
          "sha256",
          "verdict"
        ]
      },
      "quickscanpro.FileUploadResource": {
        "properties": {
          "scan_id": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          }
        },
        "required": [
          "sha256"
        ]
      },
      "quickscanpro.FileUploadResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "quota": {
            "$ref": "#/components/schemas/quickscanpro.QuotaResource"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.FileUploadResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "quickscanpro.GetScanResultResource": {
        "properties": {
          "id": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/quickscanpro.ScanResult"
          },
          "scan": {
            "$ref": "#/components/schemas/quickscanpro.ScanMetadata"
          }
        },
        "required": [
          "id",
          "result",
          "scan"
        ]
      },
      "quickscanpro.GetScanResultResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.GetScanResultResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "quickscanpro.LaunchScanRequest": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.LaunchScanRequestResource"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "quickscanpro.LaunchScanRequestResource": {
        "properties": {
          "sha256": {
            "type": "string"
          }
        },
        "required": [
          "sha256"
        ]
      },
      "quickscanpro.LaunchScanResource": {
        "properties": {
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          }
        },
        "required": [
          "created_timestamp",
          "id",
          "sha256"
        ]
      },
      "quickscanpro.LaunchScanResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "quota": {
            "$ref": "#/components/schemas/quickscanpro.QuotaResource"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.LaunchScanResource"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "quickscanpro.MITREAttack": {
        "properties": {
          "attack_id": {
            "type": "string"
          },
          "attack_id_wiki": {
            "type": "string"
          },
          "capec_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/quickscanpro.MITREAttackParent"
          },
          "tactic": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          }
        }
      },
      "quickscanpro.MITREAttackParent": {
        "properties": {
          "attack_id": {
            "type": "string"
          },
          "attack_id_wiki": {
            "type": "string"
          },
          "technique": {
            "type": "string"
          }
        }
      },
      "quickscanpro.QueryScanResultsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "quota": {
            "$ref": "#/components/schemas/quickscanpro.QuotaResource"
          },
          "resources": {
            "description": "scan IDs",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "quickscanpro.QuotaResource": {
        "properties": {
          "in_progress": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          },
          "used": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "total",
          "used"
        ]
      },
      "quickscanpro.ScanMetadata": {
        "properties": {
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "created_timestamp",
          "sha256",
          "status",
          "updated_timestamp"
        ]
      },
      "quickscanpro.ScanResult": {
        "properties": {
          "beta_intelligence_context": {
            "type": "object"
          },
          "file_artifacts": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.FileResult"
            },
            "type": "array"
          },
          "mitre_attacks": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.MITREAttack"
            },
            "type": "array"
          },
          "url_artifacts": {
            "items": {
              "$ref": "#/components/schemas/quickscanpro.URLResult"
            },
            "type": "array"
          },
          "verdict": {
            "enum": [
              "clean",
              "suspicious",
              "malicious",
              "unknown"
            ],
            "type": "string"
          },
          "verdict_reason": {
            "type": "string"
          },
          "verdict_source": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "file_artifacts",
          "verdict",
          "verdict_reason"
        ]
      },
      "quickscanpro.URLResult": {
        "properties": {
          "url": {
            "type": "string"
          },
          "verdict": {
            "enum": [
              "clean",
              "suspicious",
              "malicious",
              "unknown"
            ],
            "type": "string"
          },
          "verdict_reason": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "verdict"
        ]
      },
      "reconmsa.APIError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/reconmsa.APIErrorDetail"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_key": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "reconmsa.APIErrorDetail": {
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_key": {
            "type": "string"
          }
        },
        "required": [
          "field",
          "message",
          "message_key"
        ]
      },
      "registration.AWSAccountConsoleURL": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "registration.AWSAccountCreateRequestD4CExtV2": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AWSAccountD4CExtV2"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.AWSAccountCreateRequestExtV2": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AWSAccountExtV2"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.AWSAccountD4CExtV2": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "cloudtrail_region": {
            "type": "string"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "cloudtrail_region",
          "iam_role_arn",
          "organization_id"
        ]
      },
      "registration.AWSAccountExtV2": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "behavior_assessment_enabled": {
            "type": "boolean"
          },
          "cloudtrail_region": {
            "type": "string"
          },
          "deployment_method": {
            "type": "string"
          },
          "dspm_enabled": {
            "type": "boolean"
          },
          "dspm_role": {
            "type": "string"
          },
          "falcon_client_id": {
            "type": "string"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          },
          "root_stack_id": {
            "type": "string"
          },
          "sensor_management_enabled": {
            "type": "boolean"
          },
          "target_ous": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "use_existing_cloudtrail": {
            "type": "boolean"
          }
        },
        "required": [
          "account_id",
          "cloudtrail_region",
          "iam_role_arn",
          "organization_id"
        ]
      },
      "registration.AWSAccountPatch": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "behavior_assessment_enabled": {
            "type": "boolean"
          },
          "cloudtrail_region": {
            "type": "string"
          },
          "deployment_method": {
            "type": "string"
          },
          "dspm_enabled": {
            "type": "boolean"
          },
          "dspm_role": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "falcon_client_id": {
            "type": "string"
          },
          "iam_role_arn": {
            "type": "string"
          },
          "remediation_region": {
            "type": "string"
          },
          "remediation_tou_accepted": {
            "format": "date-time",
            "type": "string"
          },
          "root_stack_id": {
            "type": "string"
          },
          "sensor_management_enabled": {
            "type": "boolean"
          },
          "target_ous": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "account_id",
          "iam_role_arn"
        ]
      },
      "registration.AWSAccountPatchRequest": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AWSAccountPatch"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.AWSAccountResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.AWSAccountV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.AWSAccountScript": {
        "properties": {
          "bash": {
            "type": "string"
          }
        }
      },
      "registration.AWSConsoleURLResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AWSAccountConsoleURL"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.AWSProvisionGetAccountScriptResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AWSAccountScript"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.AzureAccountCreateRequestExternalV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureAccountExternalV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.AzureAccountExternalV1": {
        "properties": {
          "account_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "default_subscription": {
            "type": "boolean"
          },
          "subscription_id": {
            "description": "Azure Subscription ID.",
            "type": "string"
          },
          "tenant_id": {
            "description": "Azure Tenant ID to use.",
            "type": "string"
          },
          "years_valid": {
            "format": "integer",
            "type": "integer"
          }
        }
      },
      "registration.AzureAccountPatch": {
        "properties": {
          "environment": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          }
        },
        "required": [
          "subscription_id"
        ]
      },
      "registration.AzureAccountPatchRequest": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureAccountPatch"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.AzureAccountResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureAccountV1Ext"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.AzureAccountV1Ext": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "azure_permissions_status": {
            "description": "Permissions status returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.Permission"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "cloud_scopes": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudScope"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "credentials_end_date": {
            "format": "date-time",
            "type": "string"
          },
          "credentials_type": {
            "type": "string"
          },
          "default_subscription_id": {
            "description": "Default Azure Subscription ID to provision shared IOA infrastructure.",
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "is_cspm_lite": {
            "description": "Is CSPM Lite enabled.",
            "type": "boolean"
          },
          "object_id": {
            "type": "string"
          },
          "parent_management_group_id": {
            "type": "string"
          },
          "parent_management_group_name": {
            "type": "string"
          },
          "public_certificate": {
            "type": "string"
          },
          "public_certificate_raw": {
            "type": "string"
          },
          "role_assignments": {
            "items": {
              "$ref": "#/components/schemas/domain.AzureRoleAssignment"
            },
            "type": "array"
          },
          "show_modal": {
            "description": "Whether to show modal on the UI instructing existing D4C Azure customer to reregister subscriptions for CSPM.",
            "type": "boolean"
          },
          "status": {
            "description": "Account registration status.",
            "type": "string"
          },
          "subscription_id": {
            "description": "Azure Subscription ID.",
            "type": "string"
          },
          "subscription_name": {
            "description": "Azure Subscription Name.",
            "type": "string"
          },
          "tenant_id": {
            "description": "Azure Tenant ID to use.",
            "type": "string"
          },
          "years_valid": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt",
          "azure_permissions_status",
          "cid",
          "show_modal"
        ]
      },
      "registration.AzureDownloadCertificateResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureKeyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.AzureKeyV1": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "public_certificate": {
            "type": "string"
          },
          "public_certificate_raw": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "required": [
          "client_id",
          "tenant_id"
        ]
      },
      "registration.AzureManagementGroupCreateRequestExternalV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureManagementGroupExternalV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.AzureManagementGroupExternalV1": {
        "properties": {
          "default_subscription_id": {
            "type": "string"
          },
          "tenant_id": {
            "description": "Azure Tenant ID to use.",
            "type": "string"
          }
        },
        "required": [
          "tenant_id"
        ]
      },
      "registration.AzureManagementGroupResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureManagementGroupV1Ext"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.AzureManagementGroupV1Ext": {
        "properties": {
          "CreatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "ID": {
            "format": "integer",
            "type": "integer"
          },
          "UpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "azure_management_group_id": {
            "description": "Azure Management Group ID.",
            "type": "string"
          },
          "azure_management_group_name": {
            "description": "Azure Management Group Name.",
            "type": "string"
          },
          "azure_permissions_status": {
            "description": "Permissions status returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.Permission"
            },
            "type": "array"
          },
          "cid": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "credentials_end_date": {
            "format": "date-time",
            "type": "string"
          },
          "credentials_type": {
            "type": "string"
          },
          "default_subscription_id": {
            "description": "Default Azure Subscription ID to provision shared IOA infrastructure.",
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "public_certificate": {
            "type": "string"
          },
          "public_certificate_raw": {
            "type": "string"
          },
          "role_assignments": {
            "items": {
              "$ref": "#/components/schemas/domain.AzureManagementGroupRoleAssignment"
            },
            "type": "array"
          },
          "status": {
            "description": "Account registration status.",
            "type": "string"
          },
          "tenant_id": {
            "description": "Azure Tenant ID to use.",
            "type": "string"
          },
          "years_valid": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "CreatedAt",
          "DeletedAt",
          "ID",
          "UpdatedAt",
          "azure_management_group_id",
          "cid",
          "tenant_id"
        ]
      },
      "registration.AzureProvisionGetUserScriptResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureUserScript"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.AzureTenantConfigurationResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.AzureClientServicePrincipalV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.AzureTenantDefaultSubscriptionIDResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/.resources"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.AzureTenantIDsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.AzureTenantIDsResponseV1.resources"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.AzureTenantIDsResponseV1.resources": {
        "properties": {
          "subscription_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tenant_id": {
            "type": "string"
          }
        },
        "required": [
          "subscription_ids",
          "tenant_id"
        ]
      },
      "registration.AzureUserScript": {
        "properties": {
          "bash": {
            "type": "string"
          },
          "service_account_public_keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "service_account_public_keys"
        ]
      },
      "registration.ExternalIOAEventResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/registration.MSAMetaInfoExtension"
          },
          "resources": {
            "$ref": "#/components/schemas/registration.ExternalIOAResources"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.ExternalIOAResources": {
        "properties": {
          "confidence": {
            "type": "string"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/registration.IOAEvent"
            },
            "type": "array"
          },
          "max_score": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "events"
        ]
      },
      "registration.ExternalIOMEventResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/registration.MSAMetaInfoExtension"
          },
          "resources": {
            "$ref": "#/components/schemas/registration.IOMResources"
          }
        },
        "required": [
          "errors",
          "meta"
        ]
      },
      "registration.ExternalIOMEventResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.IOMEventV2"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.GCPAccountCreateRequestExtV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPAccountExtV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.GCPAccountExtRequestV2": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPAccountReqObjV2"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.GCPAccountExtV1": {
        "properties": {
          "parent_id": {
            "type": "string"
          },
          "parent_type": {
            "type": "string"
          }
        },
        "required": [
          "parent_id"
        ]
      },
      "registration.GCPAccountPatchRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPAccountPatchV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.GCPAccountPatchV1": {
        "properties": {
          "environment": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "service_account": {
            "$ref": "#/components/schemas/registration.GCPServiceAccountPatchV1"
          }
        },
        "required": [
          "parent_id",
          "service_account"
        ]
      },
      "registration.GCPAccountReqObjV2": {
        "properties": {
          "client_email": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "parent_type": {
            "type": "string"
          },
          "private_key": {
            "type": "string"
          },
          "private_key_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "parent_id"
        ]
      },
      "registration.GCPAccountResponseExtV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPAccountRspObjV2"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.GCPAccountResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.GCPAccountV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.GCPAccountRspObjV2": {
        "properties": {
          "client_email": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "parent_type": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "format": "integer",
            "type": "integer"
          }
        },
        "required": [
          "parent_id"
        ]
      },
      "registration.GCPAccountValidatedV1": {
        "properties": {
          "conditions": {
            "description": "Account conditions",
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "gcp_permissions_status": {
            "description": "Permissions status",
            "items": {
              "$ref": "#/components/schemas/domain.Permission"
            },
            "type": "array"
          },
          "parent_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "description": "Service account ID",
            "format": "integer",
            "type": "integer"
          },
          "status": {
            "description": "Account registration status",
            "type": "string"
          }
        },
        "required": [
          "gcp_permissions_status",
          "parent_id"
        ]
      },
      "registration.GCPAccountValidationReqObjV1": {
        "properties": {
          "parent_id": {
            "type": "string"
          }
        },
        "required": [
          "parent_id"
        ]
      },
      "registration.GCPAccountValidationRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPAccountValidationReqObjV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.GCPAccountValidationResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPAccountValidatedV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.GCPProvisionGetUserScriptResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPUserScript"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.GCPServiceAccountExtV1": {
        "properties": {
          "client_email": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "format": "integer",
            "type": "integer"
          }
        }
      },
      "registration.GCPServiceAccountPatchRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPServiceAccountPatchV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.GCPServiceAccountPatchV1": {
        "properties": {
          "client_email": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "private_key": {
            "type": "string"
          },
          "private_key_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "format": "integer",
            "type": "integer"
          }
        }
      },
      "registration.GCPServiceAccountResponseExtV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPServiceAccountExtV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.GCPServiceAccountValidationRequestObjV1": {
        "properties": {
          "client_email": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "private_key": {
            "type": "string"
          },
          "private_key_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "service_account_conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.Condition"
            },
            "type": "array"
          },
          "service_account_id": {
            "format": "integer",
            "type": "integer"
          }
        }
      },
      "registration.GCPServiceAccountValidationRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPServiceAccountValidationRequestObjV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.GCPServiceAccountValidationResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.GCPServiceAccountExtV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.GCPUserScript": {
        "properties": {
          "bash": {
            "type": "string"
          },
          "service_account_emails": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "service_account_emails"
        ]
      },
      "registration.IOAEvent": {
        "properties": {
          "additional_event_data": {
            "type": "string"
          },
          "aggregate": {
            "$ref": "#/components/schemas/ioa.EventAggregate"
          },
          "api_version": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_account_id": {
            "$ref": "#/components/schemas/ioa.CloudAccountID"
          },
          "cloud_provider": {
            "type": "string"
          },
          "cloud_region": {
            "type": "string"
          },
          "enrichments": {
            "$ref": "#/components/schemas/ioa.Enrichments"
          },
          "error_code": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "event_category": {
            "type": "string"
          },
          "event_created": {
            "type": "string"
          },
          "event_id": {
            "type": "string"
          },
          "event_name": {
            "type": "string"
          },
          "event_source": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "management_event": {
            "type": "boolean"
          },
          "policy_id": {
            "format": "int32",
            "type": "integer"
          },
          "policy_statement": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          },
          "recipient_account_id": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          },
          "request_parameters": {
            "type": "object"
          },
          "resources": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "response_elements": {
            "type": "object"
          },
          "service": {
            "type": "string"
          },
          "service_event_details": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "shared_event_id": {
            "type": "string"
          },
          "source_ip_address": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_identity": {
            "type": "object"
          },
          "vertex_id": {
            "type": "string"
          },
          "vertex_type": {
            "type": "string"
          },
          "vpc_endpoint_id": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "cloud_provider",
          "policy_id",
          "policy_statement",
          "service",
          "severity",
          "state",
          "vertex_id",
          "vertex_type"
        ]
      },
      "registration.IOMEvent": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "azure_tenant_id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_provider": {
            "type": "string"
          },
          "custom_policy_id": {
            "type": "string"
          },
          "finding": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "policy_statement": {
            "type": "string"
          },
          "policy_type": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "report_date_time": {
            "type": "string"
          },
          "resource_attributes": {
            "type": "string"
          },
          "resource_create_time": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_id_type": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "account_name",
          "azure_tenant_id",
          "cid",
          "cloud_provider",
          "finding",
          "policy_statement",
          "region",
          "report_date_time",
          "resource_attributes",
          "resource_create_time",
          "resource_id",
          "resource_id_type",
          "resource_url",
          "service",
          "severity",
          "status",
          "tags"
        ]
      },
      "registration.IOMEventIDResponseMeta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/registration.NextTokenPagination"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "pagination",
          "powered_by",
          "query_time",
          "trace_id"
        ]
      },
      "registration.IOMEventIDsResponseV2": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/registration.IOMEventIDResponseMeta"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.IOMEventV2": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "agent_id": {
            "type": "string"
          },
          "azure_tenant_id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_labels": {
            "items": {
              "$ref": "#/components/schemas/classification.Label"
            },
            "type": "array"
          },
          "cloud_provider": {
            "type": "string"
          },
          "cloud_scopes": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudScope"
            },
            "type": "array"
          },
          "custom_policy_id": {
            "format": "int32",
            "type": "integer"
          },
          "finding": {
            "type": "object"
          },
          "findings": {
            "items": {
              "$ref": "#/components/schemas/registration.IOMEventV2.findings"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "is_managed": {
            "type": "boolean"
          },
          "policy_id": {
            "format": "int32",
            "type": "integer"
          },
          "policy_statement": {
            "type": "string"
          },
          "policy_type": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "report_date_time": {
            "format": "date-time",
            "type": "string"
          },
          "resource_attributes": {
            "type": "object"
          },
          "resource_create_time": {
            "format": "date-time",
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_id_type": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "resource_uuid": {
            "type": "string"
          },
          "scan_id": {
            "type": "string"
          },
          "scan_time": {
            "format": "date-time",
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "object"
          },
          "vm_id": {
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "account_name",
          "cid",
          "cloud_provider",
          "finding",
          "findings",
          "id",
          "policy_statement",
          "region",
          "report_date_time",
          "resource_attributes",
          "resource_create_time",
          "resource_id",
          "resource_id_type",
          "resource_url",
          "resource_uuid",
          "scan_time",
          "service",
          "severity",
          "status",
          "tags"
        ]
      },
      "registration.IOMEventV2.findings": {
        "type": "object"
      },
      "registration.IOMResources": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/registration.IOMEvent"
            },
            "type": "array"
          }
        }
      },
      "registration.MSAMetaInfoExtension": {
        "properties": {
          "MetaInfo": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "pagination": {
            "$ref": "#/components/schemas/registration.MSAPagingExtension"
          }
        },
        "required": [
          "MetaInfo"
        ]
      },
      "registration.MSAPagingExtension": {
        "properties": {
          "Paging": {
            "$ref": "#/components/schemas/msaspec.Paging"
          },
          "next_token": {
            "type": "string"
          }
        },
        "required": [
          "Paging"
        ]
      },
      "registration.NextTokenPagination": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "next_token": {
            "type": "string"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "limit"
        ]
      },
      "registration.PolicyExtV1": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "type": "boolean"
          },
          "policy_id": {
            "format": "int32",
            "type": "integer"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "type": "string"
          },
          "tag_excluded": {
            "type": "boolean"
          }
        },
        "required": [
          "account_id",
          "account_ids",
          "enabled",
          "policy_id",
          "regions",
          "severity",
          "tag_excluded"
        ]
      },
      "registration.PolicyRequestExtV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.PolicyExtV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.PolicyResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.PolicyInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.PolicySettingsResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CIDPolicyAssignments"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.ScanScheduleResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanScheduleDataV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "registration.ScanScheduleUpdateRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.ScanScheduleDataV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "registration.StaticScriptsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/registration.StaticScriptsResponse.resources"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "registration.StaticScriptsResponse.resources": {
        "type": "object"
      },
      "registryassessment.externalCredPayload": {
        "properties": {
          "details": {
            "type": "object"
          }
        },
        "required": [
          "details"
        ]
      },
      "registryassessment.externalRegistryPatchPayload": {
        "properties": {
          "credential": {
            "$ref": "#/components/schemas/api.CredPayload"
          },
          "state": {
            "type": "string"
          },
          "user_defined_alias": {
            "type": "string"
          }
        },
        "required": [
          "credential"
        ]
      },
      "registryassessment.externalRegistryPayload": {
        "properties": {
          "credential": {
            "$ref": "#/components/schemas/registryassessment.externalCredPayload"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "url_uniqueness_key": {
            "type": "string"
          },
          "user_defined_alias": {
            "type": "string"
          }
        },
        "required": [
          "credential",
          "type",
          "url"
        ]
      },
      "releasecontents.ReleaseContent": {
        "properties": {
          "content_category": {
            "type": "string"
          },
          "content_group_id": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          },
          "content_version": {
            "$ref": "#/components/schemas/releasecontents.ReleaseContentVersion"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "jira_ticket": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "content_category",
          "content_group_id",
          "content_type",
          "content_version",
          "id",
          "status"
        ]
      },
      "releasecontents.ReleaseContentVersion": {
        "properties": {
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "source_id",
          "source_type",
          "version"
        ]
      },
      "releasenotes.EntitiesGetRequest": {
        "properties": {
          "IDs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "IDs"
        ]
      },
      "releasenotes.EntitiesGetResponseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "$ref": "#/components/schemas/releasenotes.ReleaseNoteWrapperV1"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "releasenotes.NoteDetail": {
        "properties": {
          "category": {
            "type": "string"
          },
          "cloud": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "note_content": {
            "type": "string"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "note_content"
        ]
      },
      "releasenotes.ReleaseNoteV1": {
        "properties": {
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "early_access": {
            "type": "string"
          },
          "general_availability": {
            "type": "string"
          },
          "notes": {
            "items": {
              "$ref": "#/components/schemas/releasenotes.NoteDetail"
            },
            "type": "array"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "categories",
          "notes",
          "timestamp",
          "version"
        ]
      },
      "releasenotes.ReleaseNoteWrapperV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/releasenotes.ReleaseNoteV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "releases.Release": {
        "properties": {
          "created_by": {
            "type": "string"
          },
          "created_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "deployed_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "deployment_start_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_modified_by": {
            "type": "string"
          },
          "last_modified_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "release_contents": {
            "items": {
              "$ref": "#/components/schemas/releasecontents.ReleaseContent"
            },
            "type": "array"
          },
          "release_notes_ticket": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "created_timestamp",
          "id",
          "release_contents",
          "status"
        ]
      },
      "releases.ReleaseWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/releases.Release"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "remote_response.CreatePoliciesV1": {
        "description": "A req to create realtime policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to create",
            "items": {
              "$ref": "#/components/schemas/remote_response.CreatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "remote_response.CreatePolicyReqV1": {
        "properties": {
          "clone_id": {
            "description": "If specified the settings of the realtime response policy identified by the id will be used",
            "type": "string"
          },
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "description": "The settings to create the policy with",
            "items": {
              "$ref": "#/components/schemas/prevention.SettingReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "platform_name"
        ]
      },
      "remote_response.PolicyV1": {
        "description": "A fully formed RTR policy",
        "properties": {
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "description": "A category of settings in a RTR policy",
            "items": {
              "$ref": "#/components/schemas/prevention.CategoryRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "settings"
        ]
      },
      "remote_response.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/remote_response.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "remote_response.UpdatePoliciesReqV1": {
        "description": "A req to update realtime response policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to update",
            "items": {
              "$ref": "#/components/schemas/remote_response.UpdatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "remote_response.UpdatePolicyReqV1": {
        "description": "An update for a specific policy",
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          },
          "settings": {
            "description": "A collection of realtime response policy settings to update",
            "items": {
              "$ref": "#/components/schemas/prevention.SettingReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "settings"
        ]
      },
      "resources.App": {
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "resources.AssetGraph": {
        "properties": {
          "id": {
            "type": "string"
          },
          "res_id": {
            "type": "string"
          }
        }
      },
      "resources.CloudContext": {
        "properties": {
          "account_name": {
            "type": "string"
          },
          "allows_public_access": {
            "type": "boolean"
          },
          "asset_graph": {
            "$ref": "#/components/schemas/resources.AssetGraph"
          },
          "cspm_license": {
            "type": "string"
          },
          "data_classifications": {
            "$ref": "#/components/schemas/dataclassifications.Response"
          },
          "detections": {
            "$ref": "#/components/schemas/resources.Detections"
          },
          "has_falcon_sensor": {
            "type": "boolean"
          },
          "has_tags": {
            "type": "boolean"
          },
          "host": {
            "$ref": "#/components/schemas/resources.Host"
          },
          "insights": {
            "$ref": "#/components/schemas/resources.Insights"
          },
          "instance_id": {
            "type": "string"
          },
          "instance_state": {
            "type": "string"
          },
          "legacy_resource_id": {
            "type": "string"
          },
          "legacy_type_id": {
            "format": "int32",
            "type": "integer"
          },
          "legacy_uuid": {
            "type": "string"
          },
          "managed_by": {
            "type": "string"
          },
          "publicly_exposed": {
            "type": "boolean"
          },
          "scan_type": {
            "type": "string"
          }
        }
      },
      "resources.CloudResource": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "arn": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cloud_context": {
            "$ref": "#/components/schemas/resources.CloudContext"
          },
          "cloud_groups": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudScope"
            },
            "type": "array"
          },
          "cloud_labels": {
            "items": {
              "$ref": "#/components/schemas/classification.Label"
            },
            "type": "array"
          },
          "cloud_provider": {
            "type": "string"
          },
          "cluster_id": {
            "type": "string"
          },
          "cluster_name": {
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/resources.CloudResource.configuration"
          },
          "creation_time": {
            "format": "date-time",
            "type": "string"
          },
          "first_seen": {
            "format": "date-time",
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "project_number": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "relationships": {
            "items": {
              "$ref": "#/components/schemas/resources.Relationship"
            },
            "type": "array"
          },
          "resource_group": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_name": {
            "type": "string"
          },
          "resource_number": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "resource_type_name": {
            "type": "string"
          },
          "resource_url": {
            "type": "string"
          },
          "revision": {
            "format": "int32",
            "type": "integer"
          },
          "service": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "subscription_id": {
            "type": "string"
          },
          "supplementary_configuration": {
            "$ref": "#/components/schemas/resources.CloudResource.supplementary_configuration"
          },
          "tags": {
            "type": "object"
          },
          "tenancy_ocid": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "zones": {
            "items": {
              "$ref": "#/components/schemas/string"
            },
            "type": "array"
          }
        }
      },
      "resources.CloudResource.configuration": {},
      "resources.CloudResource.supplementary_configuration": {},
      "resources.Compliance": {
        "properties": {
          "benchmarkNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "benchmarkVersions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "controls": {
            "items": {
              "$ref": "#/components/schemas/policyframework.Control"
            },
            "type": "array"
          },
          "frameworkVersions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "frameworks": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "legacy_policy_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "rules": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "benchmarkVersions"
        ]
      },
      "resources.Detections": {
        "properties": {
          "compliant": {
            "$ref": "#/components/schemas/resources.Compliance"
          },
          "highest_severity": {
            "type": "string"
          },
          "ioa_counts": {
            "format": "integer",
            "type": "integer"
          },
          "iom_counts": {
            "format": "integer",
            "type": "integer"
          },
          "non_compliant": {
            "$ref": "#/components/schemas/resources.Compliance"
          },
          "severities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ioa_counts",
          "iom_counts"
        ]
      },
      "resources.Host": {
        "properties": {
          "aid": {
            "type": "string"
          },
          "apps": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cve_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exprt_ratings": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "managed_by": {
            "type": "string"
          },
          "os_build": {
            "type": "string"
          },
          "os_version": {
            "type": "string"
          },
          "platform_name": {
            "type": "string"
          },
          "platform_os_name": {
            "type": "string"
          },
          "platform_os_version": {
            "type": "string"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sensor_priority": {
            "type": "string"
          },
          "snapshot_detections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ssm_managed": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "vulnerabilities": {
            "items": {
              "$ref": "#/components/schemas/resources.Vulnerability"
            },
            "type": "array"
          },
          "vulnerabilities_count": {
            "format": "integer",
            "type": "integer"
          }
        }
      },
      "resources.InsightDetails": {
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/resources.InsightDetails.value"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "resources.InsightDetails.value": {},
      "resources.Insights": {
        "properties": {
          "external": {
            "items": {
              "$ref": "#/components/schemas/resources.InsightDetails"
            },
            "type": "array"
          },
          "internal": {
            "type": "object"
          }
        },
        "required": [
          "external",
          "internal"
        ]
      },
      "resources.Relationship": {
        "properties": {
          "crn": {
            "type": "string"
          },
          "relationship_name": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          }
        }
      },
      "resources.ResourceArtifact": {
        "properties": {
          "hash_sha256": {
            "type": "string"
          },
          "headers": {
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "url"
        ]
      },
      "resources.Vulnerability": {
        "properties": {
          "app": {
            "$ref": "#/components/schemas/resources.App"
          },
          "cve_id": {
            "type": "string"
          },
          "exprt_rating": {
            "type": "string"
          }
        },
        "required": [
          "cve_id",
          "exprt_rating"
        ]
      },
      "rest.AWSAccountCreateRequestExtv1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/rest.CloudAWSAccountCreateExtV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "rest.AWSAccountCreateResponseExtV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudAWSAccountV1"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "rest.AWSAccountValidated": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/domain.CloudCondition"
            },
            "type": "array"
          },
          "iam_service_permissions_status": {
            "description": "Permissions status for each product returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.ProductPermission"
            },
            "type": "array"
          },
          "status": {
            "description": "Permissions status for each product returned via API.",
            "items": {
              "$ref": "#/components/schemas/domain.ProductFeaturesStatus"
            },
            "type": "array"
          }
        },
        "required": [
          "account_id",
          "iam_service_permissions_status",
          "status"
        ]
      },
      "rest.AWSAccountValidationResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/rest.AWSAccountValidated"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "rest.AccountProductUpsertRequestExtV1": {
        "properties": {
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "product": {
            "type": "string"
          }
        },
        "required": [
          "features",
          "product"
        ]
      },
      "rest.AzureDownloadScriptRequestData": {
        "properties": {
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "rest.AzureDownloadScriptRequestV1": {
        "properties": {
          "resources": {
            "items": {
              "$ref": "#/components/schemas/rest.AzureDownloadScriptRequestData"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "rest.AzureProvisionGetAccountScriptResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/rest.AzureScript"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "rest.AzureScript": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "cid",
          "tenantId",
          "version"
        ]
      },
      "rest.CloudAWSAccountCreateExtV1": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "csp_events": {
            "type": "boolean"
          },
          "is_master": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/rest.AccountProductUpsertRequestExtV1"
            },
            "type": "array"
          }
        },
        "required": [
          "organization_id"
        ]
      },
      "rest.CursorAndLimitMetaInfo": {
        "properties": {
          "next": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/rest.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "rest.CursorMetaInfo": {
        "properties": {
          "next": {
            "type": "string"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msaspec.Writes"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "rest.CursorResponseFields": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/rest.CursorMetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "rest.Paging": {
        "properties": {
          "limit": {
            "format": "integer",
            "type": "integer"
          },
          "offset": {
            "format": "integer",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "total"
        ]
      },
      "rulegroups.AssignedRule": {
        "properties": {
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "href",
          "id"
        ]
      },
      "rulegroups.CreateRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "rulegroups.DeleteResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "rulegroups.PolicyAssignment": {
        "properties": {
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "href",
          "id"
        ]
      },
      "rulegroups.Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/rulegroups.RuleGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "rulegroups.Rule": {
        "properties": {
          "content_files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "content_registry_values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_timestamp": {
            "type": "string"
          },
          "depth": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enable_content_capture": {
            "type": "boolean"
          },
          "enable_hash_capture": {
            "type": "boolean"
          },
          "exclude": {
            "type": "string"
          },
          "exclude_processes": {
            "type": "string"
          },
          "exclude_users": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "include": {
            "type": "string"
          },
          "include_processes": {
            "type": "string"
          },
          "include_users": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "precedence": {
            "format": "int32",
            "type": "integer"
          },
          "rule_group_id": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "watch_attributes_directory_changes": {
            "type": "boolean"
          },
          "watch_attributes_file_changes": {
            "type": "boolean"
          },
          "watch_create_directory_changes": {
            "type": "boolean"
          },
          "watch_create_file_changes": {
            "type": "boolean"
          },
          "watch_create_key_changes": {
            "type": "boolean"
          },
          "watch_delete_directory_changes": {
            "type": "boolean"
          },
          "watch_delete_file_changes": {
            "type": "boolean"
          },
          "watch_delete_key_changes": {
            "type": "boolean"
          },
          "watch_delete_value_changes": {
            "type": "boolean"
          },
          "watch_permissions_directory_changes": {
            "type": "boolean"
          },
          "watch_permissions_file_changes": {
            "type": "boolean"
          },
          "watch_permissions_key_changes": {
            "type": "boolean"
          },
          "watch_rename_directory_changes": {
            "type": "boolean"
          },
          "watch_rename_file_changes": {
            "type": "boolean"
          },
          "watch_rename_key_changes": {
            "type": "boolean"
          },
          "watch_set_value_changes": {
            "type": "boolean"
          },
          "watch_write_file_changes": {
            "type": "boolean"
          }
        },
        "required": [
          "depth",
          "id",
          "include",
          "path",
          "rule_group_id",
          "severity",
          "type"
        ]
      },
      "rulegroups.RuleGroup": {
        "properties": {
          "assigned_rules": {
            "items": {
              "$ref": "#/components/schemas/rulegroups.AssignedRule"
            },
            "type": "array"
          },
          "created_by": {
            "type": "string"
          },
          "created_timestamp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_assignments": {
            "items": {
              "$ref": "#/components/schemas/rulegroups.PolicyAssignment"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "rulegroups.RulesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/rulegroups.Rule"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "rulegroups.UpdateRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "runtimedetections.DetectionsEntityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIRuntimeDetection"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "sadomain.CreateRuleRequestV1": {
        "properties": {
          "breach_monitor_only": {
            "description": "Monitor only for breach data. Must be accompanied by breach_monitoring_enabled:true.",
            "type": "boolean"
          },
          "breach_monitoring_enabled": {
            "description": "Whether to monitor for breach data. Available only for `Company Domains` and `Email addresses` rule topics. When enabled, ownership of the monitored domains or emails is required",
            "type": "boolean"
          },
          "filter": {
            "description": "The FQL filter to be used for searching",
            "type": "string"
          },
          "match_on_tsq_result_types": {
            "description": "Which result types to monitor for. Can be set to only monitor domains or subdomains, as well as both. Only available for the `Typosquatting` rule topic. Possible values: [`basedomains`, `subdomains`]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of a given rule",
            "type": "string"
          },
          "originating_template_id": {
            "description": "If the rule was generated based on a template, the id of the template",
            "type": "string"
          },
          "permissions": {
            "description": "The permissions for a given rule which specifies the rule's access by other users. Possible values: [`public`, `private`]",
            "type": "string"
          },
          "priority": {
            "description": "The priority for a given rule. Possible values: [`low`, `medium`, `high`]",
            "type": "string"
          },
          "substring_matching_enabled": {
            "description": "Whether to monitor for substring matches. Only available for the `Typosquatting` rule topic.",
            "type": "boolean"
          },
          "topic": {
            "description": "The topic of a given rule. Possible values: [`SA_BRAND_PRODUCT`, `SA_VIP`, `SA_THIRD_PARTY`, `SA_IP`, `SA_CVE`, `SA_BIN`, `SA_DOMAIN`, `SA_EMAIL`, `SA_ALIAS`, `SA_AUTHOR`, `SA_CUSTOM`, `SA_TYPOSQUATTING`]",
            "type": "string"
          }
        },
        "required": [
          "breach_monitor_only",
          "breach_monitoring_enabled",
          "filter",
          "match_on_tsq_result_types",
          "name",
          "originating_template_id",
          "permissions",
          "priority",
          "substring_matching_enabled",
          "topic"
        ]
      },
      "sadomain.CustomerAssets": {
        "properties": {
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "emails": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "sadomain.NotificationLog": {
        "properties": {
          "action": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_date": {
            "format": "date-time",
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "notification_id": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "cid",
          "created_date",
          "details",
          "id",
          "message",
          "notification_id",
          "user_email",
          "user_uuid",
          "username"
        ]
      },
      "sadomain.Rule": {
        "properties": {
          "breach_monitor_only": {
            "description": "Weather to monitor exclusively for breach data. breach_monitoring_enabled also needs to be sent as true for this to be enabled.",
            "type": "boolean"
          },
          "breach_monitoring_enabled": {
            "description": "Whether to monitor for breach data. Available only for `Company Domains` and `Email addresses` rule topics. When enabled, ownership of the monitored domains or emails is required",
            "type": "boolean"
          },
          "cid": {
            "type": "string"
          },
          "created_by": {
            "description": "The UUID of the user that created a given rule or Crowdstrike if the rule was system generated",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The creation time for a given rule",
            "format": "date-time",
            "type": "string"
          },
          "filter": {
            "description": "The FQL filter contained in a rule and used for searching. Parentheses may be added automatically for clarity",
            "type": "string"
          },
          "id": {
            "description": "The ID of a given rule",
            "type": "string"
          },
          "match_on_tsq_result_types": {
            "description": "Which result types to monitor for. Can be set to only monitor domains or subdomains, as well as both. Only available for the `Typosquatting` rule topic.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of a given rule",
            "type": "string"
          },
          "originating_template_id": {
            "description": "If the rule was generated based on a template, the id of the template",
            "type": "string"
          },
          "ownership_assets": {
            "$ref": "#/components/schemas/sadomain.CustomerAssets"
          },
          "permissions": {
            "description": "The permissions of a given rule",
            "type": "string"
          },
          "priority": {
            "description": "The priority of a given rule",
            "type": "string"
          },
          "status": {
            "description": "The status of a given rule",
            "type": "string"
          },
          "status_message": {
            "description": "The detailed status message of a given rule",
            "type": "string"
          },
          "substring_matching_enabled": {
            "description": "Whether to monitor for substring matches. Only available for the `Typosquatting` rule topic",
            "type": "boolean"
          },
          "template_priority": {
            "format": "int32",
            "type": "integer"
          },
          "topic": {
            "description": "The topic of a given rule",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "The last updated time for a given rule",
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "description": "The user ID of the user that created a given rule",
            "type": "string"
          },
          "user_name": {
            "description": "The user name of the user that created a given rule",
            "type": "string"
          },
          "user_uuid": {
            "description": "The UUID of the user that created a given rule",
            "type": "string"
          }
        },
        "required": [
          "breach_monitor_only",
          "breach_monitoring_enabled",
          "cid",
          "created_timestamp",
          "filter",
          "id",
          "match_on_tsq_result_types",
          "name",
          "permissions",
          "priority",
          "status",
          "substring_matching_enabled",
          "topic",
          "updated_timestamp",
          "user_uuid"
        ]
      },
      "sadomain.SubmissionInformation": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "date",
          "status",
          "user_uuid"
        ]
      },
      "sadomain.TyposquattingBaseDomain": {
        "properties": {
          "created_date": {
            "description": "The date when the domain was registered",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The ID of the domain",
            "type": "string"
          },
          "is_registered": {
            "description": "Whether the domain has a valid Whois record",
            "type": "boolean"
          },
          "punycode_format": {
            "description": "The Punycode representation of the domain, i.e. starting with `xn--`",
            "type": "string"
          },
          "submit_for_blocking_info": {
            "$ref": "#/components/schemas/sadomain.SubmissionInformation"
          },
          "submit_for_takedown_info": {
            "$ref": "#/components/schemas/sadomain.SubmissionInformation"
          },
          "unicode_format": {
            "description": "The Unicode representation of the domain",
            "type": "string"
          },
          "whois": {
            "$ref": "#/components/schemas/sadomain.WhoisRecord"
          }
        },
        "required": [
          "id",
          "is_registered",
          "punycode_format",
          "unicode_format"
        ]
      },
      "sadomain.TyposquattingComponent": {
        "properties": {
          "base_domain": {
            "$ref": "#/components/schemas/sadomain.TyposquattingBaseDomain"
          },
          "id": {
            "description": "The ID of the infrastructure component",
            "type": "string"
          },
          "parent_domain": {
            "$ref": "#/components/schemas/sadomain.TyposquattingParentDomain"
          },
          "punycode_format": {
            "description": "The Punycode representation of the infrastructure component, i.e. starting with `xn--`",
            "type": "string"
          },
          "subdomain": {
            "$ref": "#/components/schemas/sadomain.TyposquattingSubdomain"
          },
          "submit_for_blocking_info": {
            "$ref": "#/components/schemas/sadomain.SubmissionInformation"
          },
          "submit_for_takedown_info": {
            "$ref": "#/components/schemas/sadomain.SubmissionInformation"
          },
          "unicode_format": {
            "description": "The Unicode representation of the infrastructure component",
            "type": "string"
          }
        },
        "required": [
          "base_domain",
          "id",
          "parent_domain",
          "punycode_format",
          "unicode_format"
        ]
      },
      "sadomain.TyposquattingParentDomain": {
        "properties": {
          "id": {
            "description": "The ID of the domain",
            "type": "string"
          },
          "punycode_format": {
            "description": "The Punycode representation of the domain, i.e. starting with `xn--`",
            "type": "string"
          },
          "unicode_format": {
            "description": "The Unicode representation of the domain",
            "type": "string"
          }
        },
        "required": [
          "id",
          "punycode_format",
          "unicode_format"
        ]
      },
      "sadomain.TyposquattingSubdomain": {
        "properties": {
          "first_seen": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_seen": {
            "format": "date-time",
            "type": "string"
          },
          "punycode_format": {
            "type": "string"
          },
          "unicode_format": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "punycode_format",
          "unicode_format"
        ]
      },
      "sadomain.WhoisRecord": {
        "properties": {
          "date_collected": {
            "description": "The timestamp when the Whois snapshot was captured for a given domain",
            "format": "date-time",
            "type": "string"
          },
          "date_created": {
            "description": "The timestamp when the Whois record was created",
            "format": "date-time",
            "type": "string"
          },
          "date_expires": {
            "description": "The timestamp when the Whois record expires",
            "format": "date-time",
            "type": "string"
          },
          "date_updated": {
            "description": "The timestamp when the Whois record was updated",
            "format": "date-time",
            "type": "string"
          },
          "name_servers": {
            "description": "The list of nameservers associated with a given domain",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "registrant": {
            "$ref": "#/components/schemas/sadomain.WhoisRegistrant"
          },
          "registrar": {
            "$ref": "#/components/schemas/sadomain.WhoisRegistrar"
          }
        }
      },
      "sadomain.WhoisRegistrant": {
        "properties": {
          "email": {
            "description": "The email of the entity who registered a given domain",
            "type": "string"
          },
          "name": {
            "description": "The name of the entity who registered a given domain",
            "type": "string"
          },
          "org": {
            "description": "The organization who registered a given domain",
            "type": "string"
          }
        },
        "required": [
          "email",
          "name",
          "org"
        ]
      },
      "sadomain.WhoisRegistrar": {
        "properties": {
          "name": {
            "description": "The name of the registrar for a given domain",
            "type": "string"
          },
          "status": {
            "description": "The list of Extensible Provisioning Protocol (EPP) status codes provided by the registrar for a given domain",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "scanreports.EntitiesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.ScanReportType"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "scheduledexclusions.CreateRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "processes": {
            "type": "string"
          },
          "repeated": {
            "$ref": "#/components/schemas/scheduledexclusions.Repeated"
          },
          "schedule_end": {
            "type": "string"
          },
          "schedule_start": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "users": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "timezone"
        ]
      },
      "scheduledexclusions.Repeated": {
        "properties": {
          "all_day": {
            "type": "boolean"
          },
          "end_time": {
            "type": "string"
          },
          "frequency": {
            "type": "string"
          },
          "monthly_days": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "occurrence": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "weekly_days": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "scheduledexclusions.Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/scheduledexclusions.ScheduledExclusion"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "scheduledexclusions.ScheduledExclusion": {
        "properties": {
          "created_timestamp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "processes": {
            "type": "string"
          },
          "repeated": {
            "$ref": "#/components/schemas/scheduledexclusions.Repeated"
          },
          "schedule_end": {
            "type": "string"
          },
          "schedule_start": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "users": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "timezone"
        ]
      },
      "scheduledexclusions.UpdateRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "processes": {
            "type": "string"
          },
          "repeated": {
            "$ref": "#/components/schemas/scheduledexclusions.Repeated"
          },
          "schedule_end": {
            "type": "string"
          },
          "schedule_start": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "users": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "timezone"
        ]
      },
      "schema.SensorEvent": {
        "properties": {
          "base_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/schema.SensorEventField"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "version": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "base_id",
          "description",
          "fields",
          "id",
          "name",
          "platform",
          "version"
        ]
      },
      "schema.SensorEventField": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "optional": {
            "type": "boolean"
          },
          "version-added": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "optional",
          "version-added"
        ]
      },
      "schema.SensorEventResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/schema.SensorEvent"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "schema.SensorField": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "universal": {
            "type": "boolean"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/schema.SensorFieldValue"
            },
            "type": "array"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "type",
          "universal",
          "values"
        ]
      },
      "schema.SensorFieldResponseV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/schema.SensorField"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "schema.SensorFieldValue": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "value"
        ]
      },
      "sensor_update.BuildReqV1": {
        "properties": {
          "build": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        },
        "required": [
          "build",
          "platform"
        ]
      },
      "sensor_update.BuildRespV1": {
        "properties": {
          "build": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "sensor_version": {
            "type": "string"
          },
          "stage": {
            "description": "The release stage this build is in",
            "enum": [
              "prod",
              "early_adopter"
            ],
            "type": "string"
          }
        },
        "required": [
          "build",
          "platform",
          "sensor_version",
          "stage"
        ]
      },
      "sensor_update.BuildsRespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/sensor_update.BuildRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "sensor_update.CreatePoliciesReqV1": {
        "description": "A req to create sensor update policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to create",
            "items": {
              "$ref": "#/components/schemas/sensor_update.CreatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "sensor_update.CreatePoliciesReqV2": {
        "description": "A req to create sensor update policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to create",
            "items": {
              "$ref": "#/components/schemas/sensor_update.CreatePolicyReqV2"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "sensor_update.CreatePolicyReqV1": {
        "properties": {
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/sensor_update.SettingsReqV1"
          }
        },
        "required": [
          "name",
          "platform_name"
        ]
      },
      "sensor_update.CreatePolicyReqV2": {
        "properties": {
          "description": {
            "description": "The description to use when creating the policy",
            "type": "string"
          },
          "name": {
            "description": "The name to use when creating the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/sensor_update.SettingsReqV2"
          }
        },
        "required": [
          "name",
          "platform_name"
        ]
      },
      "sensor_update.KernelRespV1": {
        "properties": {
          "architecture": {
            "type": "string"
          },
          "base_package_supported_sensor_versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_timestamp": {
            "type": "string"
          },
          "distro": {
            "type": "string"
          },
          "distro_version": {
            "type": "string"
          },
          "flavor": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "modified_timestamp": {
            "type": "string"
          },
          "release": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "ztl_module_supported_sensor_versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ztl_supported_sensor_versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "architecture",
          "base_package_supported_sensor_versions",
          "created_timestamp",
          "distro",
          "distro_version",
          "flavor",
          "id",
          "modified_timestamp",
          "release",
          "vendor",
          "version",
          "ztl_module_supported_sensor_versions",
          "ztl_supported_sensor_versions"
        ]
      },
      "sensor_update.KernelsRespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/sensor_update.KernelRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "sensor_update.PolicyV1": {
        "properties": {
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/sensor_update.SettingsRespV1"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "settings"
        ]
      },
      "sensor_update.PolicyV2": {
        "properties": {
          "cid": {
            "description": "The customer id associated with the policy",
            "type": "string"
          },
          "created_by": {
            "description": "The email of the user which created the policy",
            "type": "string"
          },
          "created_timestamp": {
            "description": "The time at which the policy was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of a policy. Use this field to provide a high level summary of what this policy enforces",
            "type": "string"
          },
          "enabled": {
            "description": "If a policy is enabled it will be used during the course of policy evaluation",
            "type": "boolean"
          },
          "groups": {
            "description": "The groups that are currently attached to the policy",
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the policy",
            "type": "string"
          },
          "modified_by": {
            "description": "The email of the user which last modified the policy",
            "type": "string"
          },
          "modified_timestamp": {
            "description": "The time at which the policy was last modified",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The human readable name of the policy",
            "type": "string"
          },
          "platform_name": {
            "description": "The name of the platform",
            "enum": [
              "Windows",
              "Mac",
              "Linux"
            ],
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/sensor_update.SettingsRespV2"
          }
        },
        "required": [
          "cid",
          "created_by",
          "created_timestamp",
          "description",
          "enabled",
          "groups",
          "id",
          "modified_by",
          "modified_timestamp",
          "name",
          "platform_name",
          "settings"
        ]
      },
      "sensor_update.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/sensor_update.PolicyV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "sensor_update.RespV2": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/sensor_update.PolicyV2"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "sensor_update.SettingsReqV1": {
        "properties": {
          "build": {
            "type": "string"
          }
        }
      },
      "sensor_update.SettingsReqV2": {
        "properties": {
          "build": {
            "description": "The target build to apply to the policy",
            "type": "string"
          },
          "scheduler": {
            "$ref": "#/components/schemas/policy.SensorUpdateScheduler"
          },
          "show_early_adopter_builds": {
            "description": "If true, early adopter builds will be visible on the sensor update policy page",
            "type": "boolean"
          },
          "uninstall_protection": {
            "description": "The uninstall protection state to apply to the policy",
            "enum": [
              "ENABLED",
              "DISABLED",
              "MAINTENANCE_MODE",
              "IGNORE",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/sensor_update.BuildReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "scheduler",
          "variants"
        ]
      },
      "sensor_update.SettingsRespV1": {
        "properties": {
          "build": {
            "type": "string"
          }
        },
        "required": [
          "build"
        ]
      },
      "sensor_update.SettingsRespV2": {
        "properties": {
          "build": {
            "description": "The target build applied to devices in the policy",
            "type": "string"
          },
          "scheduler": {
            "$ref": "#/components/schemas/policy.SensorUpdateScheduler"
          },
          "sensor_version": {
            "type": "string"
          },
          "show_early_adopter_builds": {
            "description": "If true, early adopter builds will be visible on the sensor update policy page",
            "type": "boolean"
          },
          "stage": {
            "description": "The release stage this build is in",
            "enum": [
              "prod",
              "early_adopter"
            ],
            "type": "string"
          },
          "uninstall_protection": {
            "description": "The uninstall protection setting to apply to devices in the policy",
            "enum": [
              "ENABLED",
              "DISABLED",
              "MAINTENANCE_MODE",
              "IGNORE",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/sensor_update.BuildRespV1"
            },
            "type": "array"
          }
        },
        "required": [
          "build",
          "scheduler",
          "sensor_version",
          "show_early_adopter_builds",
          "stage",
          "uninstall_protection",
          "variants"
        ]
      },
      "sensor_update.UpdatePoliciesReqV1": {
        "description": "A req to update sensorUpdate policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to update",
            "items": {
              "$ref": "#/components/schemas/sensor_update.UpdatePolicyReqV1"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "sensor_update.UpdatePoliciesReqV2": {
        "description": "A req to update sensorUpdate policies",
        "properties": {
          "resources": {
            "description": "A collection of policies to update",
            "items": {
              "$ref": "#/components/schemas/sensor_update.UpdatePolicyReqV2"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ]
      },
      "sensor_update.UpdatePolicyReqV1": {
        "description": "An update for a specific policy",
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/sensor_update.SettingsReqV1"
          }
        },
        "required": [
          "id"
        ]
      },
      "sensor_update.UpdatePolicyReqV2": {
        "description": "An update for a specific policy",
        "properties": {
          "description": {
            "description": "The new description to assign to the policy",
            "type": "string"
          },
          "id": {
            "description": "The id of the policy to update",
            "type": "string"
          },
          "name": {
            "description": "The new name to assign to the policy",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/sensor_update.SettingsReqV2"
          }
        },
        "required": [
          "id"
        ]
      },
      "state.OnlineStateRespV1": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/state.OnlineStateResultV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "state.OnlineStateResultV1": {
        "properties": {
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_seen": {
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "state"
        ]
      },
      "string": {},
      "stringWrapper": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "sv_exclusions.CreateReqV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "is_descendant_process": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "sv_exclusions.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/sv_exclusions.SVExclusionV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "sv_exclusions.SVExclusionV1": {
        "properties": {
          "applied_globally": {
            "type": "boolean"
          },
          "created_by": {
            "type": "string"
          },
          "created_on": {
            "format": "date-time",
            "type": "string"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/host_groups.HostGroupV1"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "is_descendant_process": {
            "type": "boolean"
          },
          "last_modified": {
            "format": "date-time",
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "regexp_value": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "value_hash": {
            "type": "string"
          }
        },
        "required": [
          "applied_globally",
          "created_by",
          "created_on",
          "groups",
          "id",
          "last_modified",
          "modified_by",
          "regexp_value",
          "value",
          "value_hash"
        ]
      },
      "sv_exclusions.UpdateReqV1": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "is_descendant_process": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "threatgraph.Meta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/threatgraph.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "threatgraph.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "next_page": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          }
        },
        "required": [
          "limit"
        ]
      },
      "threatgraph.VertexDetails": {
        "properties": {
          "customer_id": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "properties": {
            "type": "object"
          },
          "scope": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "vertex_type": {
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "id",
          "properties",
          "scope",
          "timestamp",
          "vertex_type"
        ]
      },
      "threatgraph.VertexDetailsResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/threatgraph.Meta"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/threatgraph.VertexDetails"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "triggers.TriggerExt": {
        "properties": {
          "api_scope": {
            "description": "Required api scope to use this trigger.",
            "type": "string"
          },
          "category": {
            "description": "Category for the trigger.",
            "type": "string"
          },
          "description": {
            "description": "Description for the trigger.",
            "type": "string"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/triggers.TriggerExtField"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the trigger.",
            "type": "string"
          },
          "name": {
            "description": "User friendly display name for the trigger, this the fully qualified name that provides the context hierarchy.",
            "type": "string"
          },
          "version": {
            "description": "Version of the trigger.",
            "type": "string"
          }
        },
        "required": [
          "api_scope",
          "category",
          "id",
          "name",
          "version"
        ]
      },
      "triggers.TriggerExtField": {
        "properties": {
          "description": {
            "description": "Description for the field.",
            "type": "string"
          },
          "display": {
            "description": "User friendly display name for the field",
            "type": "string"
          },
          "example": {
            "$ref": "#/components/schemas/triggers.TriggerExtField.example"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/triggers.TriggerExtField"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the field as it should be passed back to the API through conditions or data mapping.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/fielddata.FieldSource"
          },
          "type": {
            "description": "Underlying type for the field, can be a primitive json schema type or signal field type.",
            "type": "string"
          }
        },
        "required": [
          "display",
          "name"
        ]
      },
      "triggers.TriggerExtField.example": {},
      "triggers.TriggerExternalResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/triggers.TriggerExt"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "types.AWSMetadata": {
        "properties": {
          "accountArn": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "types.ActionRun": {
        "properties": {
          "create_time": {
            "$ref": "#/components/schemas/types.timestamp"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/types.ActionRunEvent"
            },
            "type": "array"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "latest_event": {
            "$ref": "#/components/schemas/types.ActionRunEvent"
          },
          "metadata": {
            "$ref": "#/components/schemas/types.ActionRunMetadata"
          },
          "progress": {
            "format": "int32",
            "type": "integer"
          },
          "scheduled": {
            "type": "boolean"
          },
          "trace_uuid": {
            "type": "string"
          }
        }
      },
      "types.ActionRunEvent": {
        "properties": {
          "FlatData": {
            "type": "object"
          },
          "additional_data": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/types.ActionRunEventData"
          },
          "flat_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "send_time": {
            "$ref": "#/components/schemas/types.timestamp"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "FlatData"
        ]
      },
      "types.ActionRunEventData": {
        "properties": {
          "additional_info": {
            "type": "string"
          },
          "aws": {
            "$ref": "#/components/schemas/types.AWSMetadata"
          },
          "azureSite": {
            "$ref": "#/components/schemas/types.AzureSiteMetadata"
          },
          "azureVm": {
            "$ref": "#/components/schemas/types.AzureVmMetadata"
          },
          "cloud_function": {
            "$ref": "#/components/schemas/types.CloudFunctionMetadata"
          },
          "crowdstrike_cloud_security": {
            "$ref": "#/components/schemas/types.CrowdStrikeCloudSecurityMetadata"
          },
          "ec2": {
            "$ref": "#/components/schemas/types.EC2Metadata"
          },
          "ecs": {
            "$ref": "#/components/schemas/types.ECSMetadata"
          },
          "gcp": {
            "$ref": "#/components/schemas/types.GCPMetadata"
          },
          "host": {
            "$ref": "#/components/schemas/types.HostMetadata"
          },
          "k8s": {
            "$ref": "#/components/schemas/types.K8SMetadata"
          },
          "lambda": {
            "$ref": "#/components/schemas/types.LambdaMetadata"
          },
          "remedy": {
            "$ref": "#/components/schemas/types.Remediation"
          },
          "snyk": {
            "$ref": "#/components/schemas/types.SnykMetadata"
          },
          "sonatype": {
            "$ref": "#/components/schemas/types.SonatypeMetadata"
          }
        }
      },
      "types.ActionRunMetadata": {
        "properties": {
          "collected_objects": {
            "format": "int32",
            "type": "integer"
          },
          "end_time": {
            "$ref": "#/components/schemas/types.timestamp"
          },
          "integration_task_id": {
            "format": "int64",
            "type": "integer"
          },
          "integration_task_name": {
            "type": "string"
          },
          "integration_task_type": {
            "$ref": "#/components/schemas/types.IntegrationTaskType"
          },
          "start_time": {
            "$ref": "#/components/schemas/types.timestamp"
          },
          "total_objects": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "types.Artifact": {
        "properties": {
          "fullPath": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "types.Artifacts": {
        "properties": {
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/types.Artifact"
            },
            "type": "array"
          }
        }
      },
      "types.AwsApiGatewayReasonTag": {
        "properties": {
          "apiType": {
            "type": "string"
          },
          "hostType": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "types.AwsElasticIpReasonTag": {
        "properties": {
          "ec2Instance": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "types.AwsLambdaApiGatewayReasonTag": {
        "properties": {
          "apiType": {
            "type": "string"
          },
          "lambdaArn": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "restUrl": {
            "type": "string"
          }
        }
      },
      "types.AwsLoadBalancerReasonTag": {
        "properties": {
          "dnsName": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "types.AzureApplicationGatewayReasonTag": {
        "properties": {
          "appGwAddress": {
            "type": "string"
          },
          "appGwName": {
            "type": "string"
          },
          "listenerPort": {
            "type": "string"
          },
          "paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "types.AzureLoadBalancerReasonTag": {
        "properties": {
          "name": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "vmName": {
            "type": "string"
          }
        }
      },
      "types.AzureSiteMetadata": {
        "properties": {
          "location": {
            "type": "string"
          },
          "resourceGroup": {
            "type": "string"
          },
          "siteId": {
            "type": "string"
          },
          "siteKind": {
            "type": "string"
          },
          "siteName": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          }
        }
      },
      "types.AzureVmMetadata": {
        "properties": {
          "id": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resourceGroup": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "vmName": {
            "type": "string"
          }
        }
      },
      "types.BusinessApplication": {
        "properties": {
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "types.CloudFunctionMetadata": {
        "properties": {
          "function_name": {
            "type": "string"
          }
        }
      },
      "types.ComposedSchedule": {
        "properties": {
          "every": {
            "format": "int32",
            "type": "integer"
          },
          "every_unit": {
            "format": "int32",
            "type": "integer"
          },
          "hour": {
            "format": "int32",
            "type": "integer"
          },
          "minute": {
            "format": "int32",
            "type": "integer"
          },
          "startTimeTimezoneOffsetMinutes": {
            "format": "int32",
            "type": "integer"
          },
          "start_time": {
            "$ref": "#/components/schemas/types.timestamp"
          },
          "timezone": {
            "format": "int32",
            "type": "integer"
          },
          "weekdays": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        }
      },
      "types.Configuration": {
        "properties": {
          "address": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "secretManager": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "types.CountResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/types.QueryCountResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "types.CreateIntegrationRequest": {
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/types.Integration"
          }
        }
      },
      "types.CreateIntegrationTaskRequest": {
        "properties": {
          "integration_task": {
            "$ref": "#/components/schemas/types.IntegrationTask"
          }
        }
      },
      "types.CrowdStrikeCloudSecurityMetadata": {
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "cloudProvider": {
            "type": "string"
          },
          "iomID": {
            "type": "string"
          },
          "policyId": {
            "format": "int32",
            "type": "integer"
          },
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          }
        }
      },
      "types.DataTypeDbReasonTag": {
        "properties": {
          "columnNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source": {
            "type": "string"
          },
          "tableNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.DataTypeMqReasonTag": {
        "properties": {
          "source": {
            "type": "string"
          },
          "topicNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.Dependency": {
        "properties": {
          "connectionType": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "interfaceCount": {
            "format": "integer",
            "type": "integer"
          },
          "networkInterfaceCount": {
            "format": "integer",
            "type": "integer"
          },
          "port": {
            "format": "integer",
            "type": "integer"
          },
          "realInterfaceCount": {
            "format": "integer",
            "type": "integer"
          },
          "service": {
            "$ref": "#/components/schemas/types.InterfaceService"
          },
          "technologyType": {
            "type": "string"
          }
        }
      },
      "types.DeploymentUnitDescriptor": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/types.Struct"
          },
          "relatedServices": {
            "items": {
              "$ref": "#/components/schemas/types.DeploymentUnitService"
            },
            "type": "array"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          },
          "unique_id": {
            "type": "string"
          }
        }
      },
      "types.DeploymentUnitService": {
        "properties": {
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "persistentSignature": {
            "type": "string"
          }
        }
      },
      "types.DeploymentUnitsTupleFilters": {
        "properties": {
          "excludes": {
            "items": {
              "$ref": "#/components/schemas/types.TupleToString"
            },
            "type": "array"
          },
          "includes": {
            "items": {
              "$ref": "#/components/schemas/types.TupleToString"
            },
            "type": "array"
          }
        }
      },
      "types.EC2Metadata": {
        "properties": {
          "instance_id": {
            "type": "string"
          },
          "instance_name": {
            "type": "string"
          }
        }
      },
      "types.ECSMetadata": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "collectionMethod": {
            "format": "int32",
            "type": "integer"
          },
          "resourceArn": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          }
        }
      },
      "types.EditTagRequest": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/types.TagEntry"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "entries",
          "name"
        ]
      },
      "types.EditUniqueTagRequest": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/types.UniqueTagEntry"
            },
            "type": "array"
          }
        },
        "required": [
          "entries"
        ]
      },
      "types.ErrorMessage": {
        "properties": {
          "error": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "reason"
        ]
      },
      "types.ExecutorNode": {
        "properties": {
          "additional_header": {
            "type": "string"
          },
          "current_aws_arn": {
            "type": "string"
          },
          "dashboard_url": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "last_health_check": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "node_type": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "pod_settings": {
            "$ref": "#/components/schemas/types.K8SPodSettings"
          },
          "proxy_address": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/types.ExecutorNodeStatus"
          },
          "type": {
            "type": "string"
          },
          "useJobs": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "types.ExecutorNodeStatus": {
        "properties": {
          "State": {
            "format": "int32",
            "type": "integer"
          },
          "StateLastUpdated": {
            "format": "int64",
            "type": "integer"
          },
          "StateReason": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "State",
          "StateLastUpdated",
          "StateReason"
        ]
      },
      "types.Framework": {
        "properties": {
          "accessingElements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "types.GCPMetadata": {
        "properties": {
          "project": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "types.GeneralQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/types.QueryResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "types.GenericUserFacingRequest": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/types.ResultsFilter"
          },
          "optionalTime": {
            "format": "int64",
            "type": "integer"
          },
          "revisionId": {
            "format": "integer",
            "type": "integer"
          }
        }
      },
      "types.GetCloudSecurityIntegrationStateResponse": {
        "properties": {
          "customerHasCSPM": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "customerHasCSPM",
          "isEnabled"
        ]
      },
      "types.GetExecutorNodesMetadataResponse": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "executorNodeIds": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "executorNodeNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "executorNodeStates": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "executorNodeTypes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.GetIntegrationTasksMetadataResponse": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "ids": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "integration_task_types": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.GetServicesRelatedEntity": {
        "properties": {
          "aggregation_type": {
            "format": "int32",
            "type": "integer"
          },
          "entity_type": {
            "format": "int32",
            "type": "integer"
          },
          "filters": {
            "$ref": "#/components/schemas/types.GetServicesRelatedEntityFilters"
          },
          "groupByFields": {
            "$ref": "#/components/schemas/types.GetServicesRelatedEntityGroupByFields"
          }
        }
      },
      "types.GetServicesRelatedEntityFilters": {
        "properties": {
          "include_du_services": {
            "type": "boolean"
          },
          "only_du_types": {
            "type": "boolean"
          },
          "only_get_brokers": {
            "type": "boolean"
          }
        }
      },
      "types.GetServicesRelatedEntityGroupByFields": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.GetServicesRequest": {
        "properties": {
          "cids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deploymentTupleFilters": {
            "items": {
              "$ref": "#/components/schemas/types.DeploymentUnitsTupleFilters"
            },
            "type": "array"
          },
          "nestingLevel": {
            "format": "integer",
            "type": "integer"
          },
          "onlyCount": {
            "type": "boolean"
          },
          "optionalTime": {
            "format": "int64",
            "type": "integer"
          },
          "pagination": {
            "$ref": "#/components/schemas/types.Pagination"
          },
          "persistentSignatures": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "qlFilters": {
            "type": "string"
          },
          "relatedEntities": {
            "items": {
              "$ref": "#/components/schemas/types.GetServicesRelatedEntity"
            },
            "type": "array"
          },
          "revisionId": {
            "format": "integer",
            "type": "integer"
          },
          "rolesSignature": {
            "type": "string"
          }
        }
      },
      "types.GetViolationTypesResponse": {
        "properties": {
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "violations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.HostMetadata": {
        "properties": {
          "address": {
            "type": "string"
          }
        }
      },
      "types.Integration": {
        "properties": {
          "data": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "integration_type": {
            "$ref": "#/components/schemas/types.IntegrationType"
          },
          "name": {
            "type": "string"
          },
          "node": {
            "$ref": "#/components/schemas/types.ExecutorNode"
          },
          "type": {
            "$ref": "#/components/schemas/types.IntegrationType"
          },
          "update_time": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "types.IntegrationResponse": {
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/types.Integration"
          },
          "new_executor_node": {
            "$ref": "#/components/schemas/types.ExecutorNode"
          }
        }
      },
      "types.IntegrationTask": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "additional_header": {
            "type": "string"
          },
          "business_application": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "integration": {
            "$ref": "#/components/schemas/types.Integration"
          },
          "integration_task_type": {
            "$ref": "#/components/schemas/types.IntegrationTaskType"
          },
          "latest_task_run": {
            "$ref": "#/components/schemas/types.ActionRun"
          },
          "name": {
            "type": "string"
          },
          "next_run": {
            "$ref": "#/components/schemas/types.timestamp"
          },
          "progress": {
            "format": "int32",
            "type": "integer"
          },
          "schedule": {
            "$ref": "#/components/schemas/types.ComposedSchedule"
          },
          "schedule_every_unit_display_name": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/types.IntegrationTaskType"
          }
        }
      },
      "types.IntegrationTaskResponse": {
        "properties": {
          "integration_task": {
            "$ref": "#/components/schemas/types.IntegrationTask"
          },
          "new_executor_node": {
            "$ref": "#/components/schemas/types.ExecutorNode"
          }
        }
      },
      "types.IntegrationTaskTestConnectionResponse": {
        "properties": {
          "action_run_id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "types.IntegrationTaskType": {
        "properties": {
          "category": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "required_integration_types": {
            "items": {
              "$ref": "#/components/schemas/types.IntegrationType"
            },
            "type": "array"
          }
        }
      },
      "types.IntegrationType": {
        "properties": {
          "configured": {
            "type": "boolean"
          },
          "display_name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "types.Interface": {
        "properties": {
          "Properties": {
            "type": "object"
          },
          "accessingMethods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "beanClassName": {
            "type": "string"
          },
          "beanName": {
            "type": "string"
          },
          "brokerHost": {
            "type": "string"
          },
          "brokerPort": {
            "format": "integer",
            "type": "integer"
          },
          "catalog": {
            "type": "string"
          },
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "consumes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "database": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "durableSubscription": {
            "type": "string"
          },
          "ejbVersion": {
            "type": "string"
          },
          "framework": {
            "type": "string"
          },
          "hasPassword": {
            "type": "boolean"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "interfaceName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "port": {
            "format": "integer",
            "type": "integer"
          },
          "portType": {
            "type": "string"
          },
          "produces": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "provider": {
            "type": "string"
          },
          "puName": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/types.InterfaceService"
            },
            "type": "array"
          },
          "sessionType": {
            "type": "string"
          },
          "table": {
            "type": "string"
          },
          "technology": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "topicType": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "Properties"
        ]
      },
      "types.InterfaceService": {
        "properties": {
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "persistentSignature": {
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/types.Tag"
            },
            "type": "array"
          }
        }
      },
      "types.K8SLoadBalancerReasonTag": {
        "properties": {
          "lbAddress": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "ports": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "types.K8SMetadata": {
        "properties": {
          "container": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "pod_name": {
            "type": "string"
          }
        }
      },
      "types.K8SPodSettings": {
        "properties": {
          "imageAddress": {
            "type": "string"
          },
          "imagePullSecrets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "podLabels": {
            "items": {
              "$ref": "#/components/schemas/types.KeyValue"
            },
            "type": "array"
          }
        }
      },
      "types.KeyValue": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "types.LambdaMetadata": {
        "properties": {
          "lambdaArn": {
            "type": "string"
          },
          "lambdaName": {
            "type": "string"
          }
        }
      },
      "types.Library": {
        "properties": {
          "fullPaths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "isReachable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "usageLevel": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "types.ListExecutorNodesResponse": {
        "properties": {
          "executor_nodes": {
            "items": {
              "$ref": "#/components/schemas/types.ExecutorNode"
            },
            "type": "array"
          }
        }
      },
      "types.ListIntegrationTasksResponse": {
        "properties": {
          "integration_tasks": {
            "items": {
              "$ref": "#/components/schemas/types.IntegrationTask"
            },
            "type": "array"
          }
        }
      },
      "types.ListIntegrationTypesResponse": {
        "properties": {
          "types": {
            "items": {
              "$ref": "#/components/schemas/types.IntegrationType"
            },
            "type": "array"
          }
        }
      },
      "types.ListIntegrationsResponse": {
        "properties": {
          "integrations": {
            "items": {
              "$ref": "#/components/schemas/types.Integration"
            },
            "type": "array"
          }
        }
      },
      "types.ListValue": {},
      "types.MSAQueryRequest": {
        "properties": {
          "field": {
            "type": "string"
          }
        },
        "required": [
          "field"
        ]
      },
      "types.OrderBy": {
        "properties": {
          "by_field": {
            "type": "string"
          },
          "direction": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "types.OvertimeResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/types.QueryOvertimeResponseItem"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "types.Paginate": {
        "properties": {
          "direction": {
            "type": "string"
          },
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "offset": {
            "format": "int64",
            "type": "integer"
          },
          "orderBy": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.Pagination": {
        "properties": {
          "direction": {
            "type": "string"
          },
          "limit": {
            "format": "int64",
            "type": "integer"
          },
          "offset": {
            "format": "int64",
            "type": "integer"
          },
          "order_by": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.PolicyRulesCreateBody": {
        "properties": {
          "action": {
            "type": "string"
          },
          "activity": {
            "$ref": "#/components/schemas/.activity"
          },
          "destination": {
            "$ref": "#/components/schemas/.destination"
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "simulationMode": {
            "type": "boolean"
          },
          "sourceEndpoint": {
            "$ref": "#/components/schemas/.sourceEndpoint"
          },
          "sourceUser": {
            "$ref": "#/components/schemas/.sourceUser"
          },
          "trigger": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "enabled",
          "name",
          "simulationMode",
          "trigger"
        ]
      },
      "types.QueryCountResponse": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "resultType": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "resultType"
        ]
      },
      "types.QueryOvertimeResponseItem": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/types.QueryOvertimeResponseItem.result"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "result",
          "timestamp"
        ]
      },
      "types.QueryOvertimeResponseItem.result": {},
      "types.QueryRequest": {
        "properties": {
          "paginate": {
            "$ref": "#/components/schemas/types.Paginate"
          },
          "query": {
            "type": "string"
          },
          "selectFields": {
            "$ref": "#/components/schemas/types.QueryRequestSelectFields"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "query"
        ]
      },
      "types.QueryRequestSelectFields": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serviceFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "withoutServices": {
            "type": "boolean"
          }
        }
      },
      "types.QueryResponse": {
        "properties": {
          "resultJSON": {
            "items": {
              "$ref": "#/components/schemas/types.QueryResponse.resultJSON"
            },
            "type": "array"
          },
          "resultType": {
            "type": "string"
          }
        },
        "required": [
          "resultJSON",
          "resultType"
        ]
      },
      "types.QueryResponse.resultJSON": {},
      "types.QueryResult": {
        "properties": {
          "result_json": {
            "type": "string"
          },
          "result_type": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "types.ReasonTag": {
        "properties": {
          "awsApiGatewayType": {
            "$ref": "#/components/schemas/types.AwsApiGatewayReasonTag"
          },
          "awsElasticIpType": {
            "$ref": "#/components/schemas/types.AwsElasticIpReasonTag"
          },
          "awsLambdaApiGatewayType": {
            "$ref": "#/components/schemas/types.AwsLambdaApiGatewayReasonTag"
          },
          "awsLoadBalancerType": {
            "$ref": "#/components/schemas/types.AwsLoadBalancerReasonTag"
          },
          "azureApplicationGatewayType": {
            "$ref": "#/components/schemas/types.AzureApplicationGatewayReasonTag"
          },
          "azureLoadBalancerType": {
            "$ref": "#/components/schemas/types.AzureLoadBalancerReasonTag"
          },
          "dbReasonTag": {
            "$ref": "#/components/schemas/types.DataTypeDbReasonTag"
          },
          "k8sLoadBalancerType": {
            "$ref": "#/components/schemas/types.K8SLoadBalancerReasonTag"
          },
          "mqReasonTag": {
            "$ref": "#/components/schemas/types.DataTypeMqReasonTag"
          },
          "type": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "types.Remediation": {
        "properties": {
          "content": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "types.ResultsFilter": {
        "properties": {
          "order_by": {
            "$ref": "#/components/schemas/types.OrderBy"
          },
          "paginate": {
            "$ref": "#/components/schemas/types.Paginate"
          }
        }
      },
      "types.RunIntegrationTaskRequest": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "override": {
            "type": "boolean"
          },
          "scheduled": {
            "type": "boolean"
          },
          "task_id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "types.ServiceNowDeployment": {
        "properties": {
          "DeploymentUnitDescriptor": {
            "$ref": "#/components/schemas/types.DeploymentUnitDescriptor"
          },
          "type_name": {
            "type": "string"
          }
        },
        "required": [
          "DeploymentUnitDescriptor",
          "type_name"
        ]
      },
      "types.ServiceNowDeploymentsResponse": {
        "properties": {
          "deployment_units": {
            "items": {
              "$ref": "#/components/schemas/types.ServiceNowServiceDeployments"
            },
            "type": "array"
          },
          "error": {
            "type": "string"
          },
          "total_deployments": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "deployment_units",
          "error",
          "total_deployments"
        ]
      },
      "types.ServiceNowService": {
        "properties": {
          "applicationServer": {
            "type": "string"
          },
          "businessApplications": {
            "$ref": "#/components/schemas/types.Service_ServiceBusinessApplication"
          },
          "consumers": {
            "format": "int64",
            "type": "integer"
          },
          "datasourceCount": {
            "format": "int64",
            "type": "integer"
          },
          "dependencies": {
            "format": "int64",
            "type": "integer"
          },
          "downstreamCount": {
            "format": "int64",
            "type": "integer"
          },
          "groupBy": {
            "type": "object"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "languageType": {
            "type": "string"
          },
          "languageVersion": {
            "type": "string"
          },
          "momCount": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "ownerDepartment": {
            "type": "string"
          },
          "ownerEmail": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "persistentSignature": {
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/types.Service_ServiceTraits"
          },
          "serviceVersion": {
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/types.Service_ServiceTag"
          },
          "technologyType": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatedAt": {
            "format": "int64",
            "type": "integer"
          },
          "upstreamCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "applicationServer",
          "businessApplications",
          "consumers",
          "datasourceCount",
          "dependencies",
          "downstreamCount",
          "groupBy",
          "id",
          "languageType",
          "languageVersion",
          "momCount",
          "name",
          "ownerDepartment",
          "ownerEmail",
          "ownerName",
          "persistentSignature",
          "properties",
          "serviceVersion",
          "tags",
          "technologyType",
          "type",
          "updatedAt",
          "upstreamCount"
        ]
      },
      "types.ServiceNowServiceData": {
        "properties": {
          "ServiceNowService": {
            "$ref": "#/components/schemas/types.ServiceNowService"
          },
          "apis": {
            "$ref": "#/components/schemas/types.Service_ServiceInterface"
          },
          "artifacts": {
            "$ref": "#/components/schemas/types.Service_ServiceArtifact"
          },
          "configurations": {
            "$ref": "#/components/schemas/types.Service_ServiceConfiguration"
          },
          "dependencies": {
            "$ref": "#/components/schemas/types.Service_ServiceDependency"
          },
          "deployment_units": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "frameworks": {
            "$ref": "#/components/schemas/types.Service_ServiceFramework"
          },
          "libraries": {
            "$ref": "#/components/schemas/types.Service_ServiceLibrary"
          },
          "topics_queues": {
            "items": {
              "$ref": "#/components/schemas/types.Interface"
            },
            "type": "array"
          }
        },
        "required": [
          "ServiceNowService",
          "apis",
          "artifacts",
          "configurations",
          "dependencies",
          "deployment_units",
          "frameworks",
          "libraries",
          "topics_queues"
        ]
      },
      "types.ServiceNowServiceDeployments": {
        "properties": {
          "deployments": {
            "items": {
              "$ref": "#/components/schemas/types.ServiceNowDeployment"
            },
            "type": "array"
          },
          "service_id": {
            "type": "string"
          }
        },
        "required": [
          "deployments",
          "service_id"
        ]
      },
      "types.ServiceNowServicesResponse": {
        "properties": {
          "error": {
            "type": "string"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/types.ServiceNowServiceData"
            },
            "type": "array"
          },
          "total_services": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "error",
          "services",
          "total_services"
        ]
      },
      "types.Service_ServiceArtifact": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Artifact"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceBusinessApplication": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.BusinessApplication"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceConfiguration": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Configuration"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceDependency": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Dependency"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceFramework": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Framework"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceInterface": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Interface"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceLibrary": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Library"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceTag": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Tag"
            },
            "type": "array"
          }
        }
      },
      "types.Service_ServiceTraits": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/types.Trait"
            },
            "type": "array"
          }
        }
      },
      "types.SetCloudSecurityIntegrationStateRequest": {
        "properties": {
          "isEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "isEnabled"
        ]
      },
      "types.SnykMetadata": {
        "properties": {
          "apiEndpointUrl": {
            "type": "string"
          },
          "appEndpointUrl": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          }
        }
      },
      "types.SonatypeMetadata": {
        "properties": {
          "CVEId": {
            "type": "string"
          },
          "applicationPublicId": {
            "type": "string"
          },
          "componentNameVersion": {
            "type": "string"
          },
          "iqServerUrl": {
            "type": "string"
          }
        }
      },
      "types.Struct": {
        "properties": {
          "Fields": {
            "type": "object"
          }
        },
        "required": [
          "Fields"
        ]
      },
      "types.Tag": {
        "properties": {
          "automated": {
            "type": "boolean"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "is_sensitive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "persistentSignatures": {
            "items": {
              "$ref": "#/components/schemas/types.Tag.persistentSignatures"
            },
            "type": "array"
          },
          "reason_tag": {
            "items": {
              "$ref": "#/components/schemas/types.ReasonTag"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "types.Tag.persistentSignatures": {},
      "types.TagData": {
        "properties": {
          "automations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "classifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isDefault": {
            "type": "boolean"
          },
          "serviceCount": {
            "format": "int64",
            "type": "integer"
          },
          "tag": {
            "$ref": "#/components/schemas/types.Tag"
          }
        }
      },
      "types.TagEntry": {
        "properties": {
          "isSensitive": {
            "type": "boolean"
          },
          "persistentSignature": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "persistentSignature"
        ]
      },
      "types.TagsDataResponse": {
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/types.TagData"
            },
            "type": "array"
          },
          "totalCount": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "types.Trait": {
        "properties": {
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "types.TupleToString": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "types.UniqueTagEntry": {
        "properties": {
          "isSensitive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "tag_type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "types.UpdateIntegrationRequest": {
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/types.Integration"
          },
          "overwriteFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.UpdateIntegrationTaskRequest": {
        "properties": {
          "integration_task": {
            "$ref": "#/components/schemas/types.IntegrationTask"
          }
        }
      },
      "types.UpsertBusinessApplicationRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "persistentSignatures": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "persistentSignatures"
        ]
      },
      "types.Value": {},
      "types.policyRulesCondition": {
        "properties": {
          "exclude": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "types.timestamp": {
        "properties": {
          "nanos": {
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "nanos",
          "seconds"
        ]
      },
      "unidentifiedcontainers.UnidentifiedContainerAPIResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIUnidentifiedContainer"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "unidentifiedcontainers.unidentifiedContainersCountValue": {
        "properties": {
          "Resources": {
            "items": {
              "$ref": "#/components/schemas/common.CountAsResource"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "Resources",
          "meta"
        ]
      },
      "uninstall_token.RespV1": {
        "properties": {
          "errors": {
            "description": "A collection of any errors which occurred during execution of the request",
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "A collection of uninstall tokens",
            "items": {
              "$ref": "#/components/schemas/uninstall_token.UninstallTokenV1"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "uninstall_token.RevealUninstallTokenReqV1": {
        "description": "A req to reveal an uninstall token for a specific device",
        "properties": {
          "audit_message": {
            "description": "An optional message to append to the recorded audit log",
            "type": "string"
          },
          "device_id": {
            "description": "The id of the device to reveal the token for",
            "type": "string"
          }
        },
        "required": [
          "device_id"
        ]
      },
      "uninstall_token.UninstallTokenV1": {
        "description": "An uninstall token for a device",
        "properties": {
          "device_id": {
            "description": "The device the token belongs to",
            "type": "string"
          },
          "seed_id": {
            "description": "The seedID of the uninstall token",
            "format": "integer",
            "type": "integer"
          },
          "uninstall_token": {
            "description": "The uninstall token",
            "type": "string"
          }
        },
        "required": [
          "device_id",
          "seed_id",
          "uninstall_token"
        ]
      },
      "v2.Activity": {
        "properties": {
          "class": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inline_configuration": {
            "$ref": "#/components/schemas/v2.InlineConfig"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "properties"
        ]
      },
      "v2.ActivityParameters": {
        "properties": {
          "configuration": {
            "type": "object"
          }
        },
        "required": [
          "configuration"
        ]
      },
      "v2.ActivityProperties": {
        "properties": {
          "properties": {
            "type": "object"
          }
        },
        "required": [
          "properties"
        ]
      },
      "v2.Condition": {
        "properties": {
          "cel_expression": {
            "type": "string"
          },
          "display": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "else": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "else_if": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "next"
        ]
      },
      "v2.ConditionGroups": {
        "properties": {
          "fields": {
            "type": "object"
          },
          "parameter_order": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "fields",
          "parameter_order"
        ]
      },
      "v2.Definition": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "loops": {
            "type": "object"
          },
          "multi_instance": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "output_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameters": {
            "$ref": "#/components/schemas/v2.Parameters"
          },
          "parent": {
            "$ref": "#/components/schemas/v2.Model"
          },
          "provision_on_install": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          },
          "type": {
            "type": "string"
          },
          "uniqNodeSeen": {
            "type": "object"
          },
          "use_cases": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vendors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "nodeRegistry",
          "parent",
          "trigger",
          "uniqNodeSeen"
        ]
      },
      "v2.ForLoop": {
        "properties": {
          "cel_condition": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "condition_display": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "continue_on_partial_execution": {
            "type": "boolean"
          },
          "input": {
            "type": "string"
          },
          "max_execution_seconds": {
            "format": "int32",
            "type": "integer"
          },
          "max_iteration_count": {
            "format": "int32",
            "type": "integer"
          },
          "sequential": {
            "type": "boolean"
          }
        },
        "required": [
          "continue_on_partial_execution",
          "input"
        ]
      },
      "v2.InlineConfig": {
        "properties": {
          "config": {
            "type": "object"
          },
          "input_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "output_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          }
        }
      },
      "v2.Loop": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "display": {
            "type": "string"
          },
          "for": {
            "$ref": "#/components/schemas/v2.ForLoop"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          }
        },
        "required": [
          "for"
        ]
      },
      "v2.Model": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "loops": {
            "type": "object"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "output_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent": {
            "$ref": "#/components/schemas/v2.Model"
          },
          "summary": {
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          },
          "uniqNodeSeen": {
            "type": "object"
          }
        },
        "required": [
          "nodeRegistry",
          "parent",
          "trigger",
          "uniqNodeSeen"
        ]
      },
      "v2.Parameters": {
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/v2.ActivityParameters"
          },
          "conditions": {
            "type": "object"
          },
          "install_instructions": {
            "description": "Installation instructions for the template.",
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/parameter.TriggerParameter"
          }
        }
      },
      "v2.Trigger": {
        "properties": {
          "event": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameters": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "schedule": {
            "$ref": "#/components/schemas/graph.TimerEventDefinition"
          }
        },
        "required": [
          "next"
        ]
      },
      "vulncheck.EPSS": {
        "properties": {
          "epss_percentile": {
            "format": "double",
            "type": "number"
          },
          "epss_score": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "epss_percentile",
          "epss_score"
        ]
      },
      "vulncheck.ExploitBotnets": {
        "properties": {
          "botnet_name": {
            "type": "string"
          },
          "cve_references": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitCVEReference"
            },
            "type": "array"
          },
          "malpedia_url": {
            "type": "string"
          }
        },
        "required": [
          "botnet_name",
          "cve_references",
          "malpedia_url"
        ]
      },
      "vulncheck.ExploitCVEReference": {
        "properties": {
          "cve": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "date_added": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "cve",
          "date_added",
          "url"
        ]
      },
      "vulncheck.ExploitCounts": {
        "properties": {
          "botnets": {
            "format": "int32",
            "type": "integer"
          },
          "exploits": {
            "format": "int32",
            "type": "integer"
          },
          "threat_actors": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "botnets",
          "exploits",
          "threat_actors"
        ]
      },
      "vulncheck.ExploitDetails": {
        "properties": {
          "botnets": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitBotnets"
            },
            "type": "array"
          },
          "counts": {
            "$ref": "#/components/schemas/vulncheck.ExploitCounts"
          },
          "epss": {
            "$ref": "#/components/schemas/vulncheck.EPSS"
          },
          "exploit_found": {
            "type": "boolean"
          },
          "exploits": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitRecord"
            },
            "type": "array"
          },
          "max_exploit_maturity": {
            "type": "string"
          },
          "ransomware": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitRansomware"
            },
            "type": "array"
          },
          "reported_exploited_by_botnets": {
            "type": "boolean"
          },
          "reported_exploited_by_named_threat_actors": {
            "type": "boolean"
          },
          "reported_exploited_by_ransomware": {
            "type": "boolean"
          },
          "reported_exploited_in_the_wild": {
            "type": "boolean"
          },
          "threat_actors": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitThreatActor"
            },
            "type": "array"
          },
          "timeline": {
            "$ref": "#/components/schemas/vulncheck.ExploitTimeline"
          },
          "trending": {
            "$ref": "#/components/schemas/vulncheck.ExploitTrending"
          }
        },
        "required": [
          "counts",
          "exploit_found",
          "max_exploit_maturity",
          "reported_exploited_by_botnets",
          "reported_exploited_by_named_threat_actors",
          "reported_exploited_by_ransomware",
          "reported_exploited_in_the_wild",
          "timeline",
          "trending"
        ]
      },
      "vulncheck.ExploitRansomware": {
        "properties": {
          "ransomware_families": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reference_data": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitRansomwareData"
            },
            "type": "array"
          }
        },
        "required": [
          "ransomware_families",
          "reference_data"
        ]
      },
      "vulncheck.ExploitRansomwareData": {
        "properties": {
          "date_added": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "date_added",
          "url"
        ]
      },
      "vulncheck.ExploitRecord": {
        "properties": {
          "cve": {
            "type": "string"
          },
          "date_added": {
            "type": "string"
          },
          "exploit_availability": {
            "type": "string"
          },
          "exploit_maturity": {
            "type": "string"
          },
          "exploit_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "refsource": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "vulncheck.ExploitThreatActor": {
        "properties": {
          "cve_references": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ExploitCVEReference"
            },
            "type": "array"
          },
          "malpedia_url": {
            "type": "string"
          },
          "misp_id": {
            "type": "string"
          },
          "misp_threat_actor_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mitre_id": {
            "type": "string"
          },
          "mitre_threat_actor_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "threat_actor_name": {
            "type": "string"
          },
          "vendor_names_for_threat_actors": {
            "items": {
              "$ref": "#/components/schemas/vulncheck.ThreatActorVendorName"
            },
            "type": "array"
          }
        }
      },
      "vulncheck.ExploitTimeline": {
        "properties": {
          "cisa_kev_date_added": {
            "type": "string"
          },
          "cisa_kev_date_due": {
            "type": "string"
          },
          "first_exploit_poc_or_higher": {
            "type": "string"
          },
          "first_exploit_published": {
            "type": "string"
          },
          "first_exploit_weaponized_or_higher": {
            "type": "string"
          },
          "first_reported_botnet": {
            "type": "string"
          },
          "first_reported_ransomware": {
            "type": "string"
          },
          "first_reported_threat_actor": {
            "type": "string"
          },
          "most_recent_exploit_published": {
            "type": "string"
          },
          "most_recent_reported_botnet": {
            "type": "string"
          },
          "most_recent_reported_ransomware": {
            "type": "string"
          },
          "most_recent_reported_threat_actor": {
            "type": "string"
          },
          "nvd_published": {
            "type": "string"
          }
        }
      },
      "vulncheck.ExploitTrending": {
        "properties": {
          "github": {
            "type": "boolean"
          }
        },
        "required": [
          "github"
        ]
      },
      "vulncheck.ThreatActorVendorName": {
        "properties": {
          "threat_actor_name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "vendor_name": {
            "type": "string"
          }
        }
      },
      "vulnerabilities.VulnerabilityEntitySARIFResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.VulnerabilitySARIF"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiCombinedVulnerability": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnerabilityCombined"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiCombinedVulnerabilityDetails": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnerabilityDetails"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiCombinedVulnerabilityInfo": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnerabilityInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnByImageCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnByImageCount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnByPublication": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnByPublicationDate"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnCount": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnCount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnCountByActivelyExploited": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIVulnCount"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnCountByCSPRating": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnCountByCVSSScore": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "vulnerabilities.apiVulnCountBySeverity": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/models.APIFilterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "workflow.Request": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "workflow.Response": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "ids"
        ]
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "clientCredentials": {
            "scopes": {
              "alerts:read": "Grants read access on alerts resources",
              "alerts:write": "Grants write access on alerts resources",
              "api-integrations:read": "Grants read access on api-integrations resources",
              "api-integrations:write": "Grants write access on api-integrations resources",
              "app-logs:read": "Grants read access on app-logs resources",
              "app-logs:write": "Grants write access on app-logs resources",
              "aspm-admin:read": "Grants read access on aspm-admin resources",
              "aspm-admin:write": "Grants write access on aspm-admin resources",
              "aspm-user:write": "Grants write access on aspm-user resources",
              "aspm-viewer:read": "Grants read access on aspm-viewer resources",
              "cloud-aws-registration:read": "Grants read access on cloud-aws-registration resources",
              "cloud-aws-registration:write": "Grants write access on cloud-aws-registration resources",
              "cloud-azure-registration:write": "Grants write access on cloud-azure-registration resources",
              "cloud-connect-aws:read": "Grants read access on cloud-connect-aws resources",
              "cloud-connect-aws:write": "Grants write access on cloud-connect-aws resources",
              "cloud-security-assets:read": "Grants read access on cloud-security-assets resources",
              "configvantage:read": "Grants read access on configvantage resources",
              "content-update-policies:read": "Grants read access on content-update-policies resources",
              "content-update-policies:write": "Grants write access on content-update-policies resources",
              "correlation-rules:read": "Grants read access on correlation-rules resources",
              "correlation-rules:write": "Grants write access on correlation-rules resources",
              "cspm-registration:read": "Grants read access on cspm-registration resources",
              "cspm-registration:write": "Grants write access on cspm-registration resources",
              "custom-ioa:read": "Grants read access on custom-ioa resources",
              "custom-ioa:write": "Grants write access on custom-ioa resources",
              "custom-storage:read": "Grants read access on custom-storage resources",
              "custom-storage:write": "Grants write access on custom-storage resources",
              "d4c-registration:read": "Grants read access on d4c-registration resources",
              "d4c-registration:write": "Grants write access on d4c-registration resources",
              "delivery-settings:read": "Grants read access on delivery-settings resources",
              "delivery-settings:write": "Grants write access on delivery-settings resources",
              "deploymentcoordinator:read": "Grants read access on deploymentcoordinator resources",
              "detects:read": "Grants read access on detects resources",
              "detects:write": "Grants write access on detects resources",
              "device-content:read": "Grants read access on device-content resources",
              "device-control-policies:read": "Grants read access on device-control-policies resources",
              "device-control-policies:write": "Grants write access on device-control-policies resources",
              "devices:read": "Grants read access on devices resources",
              "devices:write": "Grants write access on devices resources",
              "discover-iot:read": "Grants read access on discover-iot resources",
              "discover:read": "Grants read access on discover resources",
              "discover:write": "Grants write access on discover resources",
              "dspm-data-scanner:read": "Grants read access on dspm-data-scanner resources",
              "dspm-data-scanner:write": "Grants write access on dspm-data-scanner resources",
              "falcon-container-cli:write": "Grants write access on falcon-container-cli resources",
              "falcon-container-image:read": "Grants read access on falcon-container-image resources",
              "falcon-container-image:write": "Grants write access on falcon-container-image resources",
              "falcon-container:read": "Grants read access on falcon-container resources",
              "falconcomplete-dashboard:read": "Grants read access on falconcomplete-dashboard resources",
              "falconx-actors:read": "Grants read access on falconx-actors resources",
              "falconx-indicators:read": "Grants read access on falconx-indicators resources",
              "falconx-malware:read": "Grants read access on falconx-malware resources",
              "falconx-reports:read": "Grants read access on falconx-reports resources",
              "falconx-rules:read": "Grants read access on falconx-rules resources",
              "falconx-sandbox:read": "Grants read access on falconx-sandbox resources",
              "falconx-sandbox:write": "Grants write access on falconx-sandbox resources",
              "fdr:read": "Grants read access on fdr resources",
              "fim-content:read": "Grants read access on fim-content resources",
              "fim:read": "Grants read access on fim resources",
              "fim:write": "Grants write access on fim resources",
              "firewall-management:read": "Grants read access on firewall-management resources",
              "firewall-management:write": "Grants write access on firewall-management resources",
              "host-group:read": "Grants read access on host-group resources",
              "host-group:write": "Grants write access on host-group resources",
              "host-migration:read": "Grants read access on host-migration resources",
              "host-migration:write": "Grants write access on host-migration resources",
              "humio-auth-proxy:read": "Grants read access on humio-auth-proxy resources",
              "humio-auth-proxy:write": "Grants write access on humio-auth-proxy resources",
              "iac:read": "Grants read access on iac resources",
              "identity-entities:read": "Grants read access on identity-entities resources",
              "identity-graphql:write": "Grants write access on identity-graphql resources",
              "identity-policy-rules:read": "Grants read access on identity-policy-rules resources",
              "identity-policy-rules:write": "Grants write access on identity-policy-rules resources",
              "incidents:read": "Grants read access on incidents resources",
              "incidents:write": "Grants write access on incidents resources",
              "installation-tokens-settings:write": "Grants write access on installation-tokens-settings resources",
              "installation-tokens:read": "Grants read access on installation-tokens resources",
              "installation-tokens:write": "Grants write access on installation-tokens resources",
              "intel-vulnerabilities:read": "Grants read access on intel-vulnerabilities resources",
              "ioc:read": "Grants read access on ioc resources",
              "ioc:write": "Grants write access on ioc resources",
              "iocs:read": "Grants read access on iocs resources",
              "kubernetes-protection:read": "Grants read access on kubernetes-protection resources",
              "kubernetes-protection:write": "Grants write access on kubernetes-protection resources",
              "malquery:read": "Grants read access on malquery resources",
              "malquery:write": "Grants write access on malquery resources",
              "message-center:read": "Grants read access on message-center resources",
              "message-center:write": "Grants write access on message-center resources",
              "ml-exclusions:read": "Grants read access on ml-exclusions resources",
              "ml-exclusions:write": "Grants write access on ml-exclusions resources",
              "mobile-enrollment:write": "Grants write access on mobile-enrollment resources",
              "mssp:read": "Grants read access on mssp resources",
              "mssp:write": "Grants write access on mssp resources",
              "ods:read": "Grants read access on ods resources",
              "ods:write": "Grants write access on ods resources",
              "overwatch-dashboard:read": "Grants read access on overwatch-dashboard resources",
              "prevention-policies:read": "Grants read access on prevention-policies resources",
              "prevention-policies:write": "Grants write access on prevention-policies resources",
              "quarantine:read": "Grants read access on quarantine resources",
              "quarantine:write": "Grants write access on quarantine resources",
              "quick-scan-pro:read": "Grants read access on quick-scan-pro resources",
              "quick-scan-pro:write": "Grants write access on quick-scan-pro resources",
              "quick-scan:read": "Grants read access on quick-scan resources",
              "quick-scan:write": "Grants write access on quick-scan resources",
              "real-time-response-admin:write": "Grants write access on real-time-response-admin resources",
              "real-time-response-audit:read": "Grants read access on real-time-response-audit resources",
              "real-time-response:read": "Grants read access on real-time-response resources",
              "real-time-response:write": "Grants write access on real-time-response resources",
              "recon-monitoring-rules:read": "Grants read access on recon-monitoring-rules resources",
              "recon-monitoring-rules:write": "Grants write access on recon-monitoring-rules resources",
              "response-policies:read": "Grants read access on response-policies resources",
              "response-policies:write": "Grants write access on response-policies resources",
              "samplestore:read": "Grants read access on samplestore resources",
              "samplestore:write": "Grants write access on samplestore resources",
              "scheduled-report:read": "Grants read access on scheduled-report resources",
              "self-service-ioa-exclusions:read": "Grants read access on self-service-ioa-exclusions resources",
              "self-service-ioa-exclusions:write": "Grants write access on self-service-ioa-exclusions resources",
              "sensor-installers:read": "Grants read access on sensor-installers resources",
              "sensor-update-policies:read": "Grants read access on sensor-update-policies resources",
              "sensor-update-policies:write": "Grants write access on sensor-update-policies resources",
              "sensor-usage-api:read": "Grants read access on sensor-usage-api resources",
              "sensor-visibility-exclusions:read": "Grants read access on sensor-visibility-exclusions resources",
              "sensor-visibility-exclusions:write": "Grants write access on sensor-visibility-exclusions resources",
              "snapshot-scanner:read": "Grants read access on snapshot-scanner resources",
              "snapshot:read": "Grants read access on snapshot resources",
              "snapshot:write": "Grants write access on snapshot resources",
              "spotlight-vulnerabilities:read": "Grants read access on spotlight-vulnerabilities resources",
              "streaming:read": "Grants read access on streaming resources",
              "tailored-intelligence:read": "Grants read access on tailored-intelligence resources",
              "usermgmt:read": "Grants read access on usermgmt resources",
              "usermgmt:write": "Grants write access on usermgmt resources",
              "workflow:read": "Grants read access on workflow resources",
              "workflow:write": "Grants write access on workflow resources",
              "zero-trust-assessment:read": "Grants read access on zero-trust-assessment resources"
            },
            "tokenUrl": "https://api.crowdstrike.com/oauth2/token",
            "x-cs-client-secret": "[SECRET]"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "javier.carrasco@crowdstrike.com"
    },
    "description": "Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2  and interact with detections and network containment. For detailed usage guides and examples,  see our [documentation inside the Falcon console] (https://falcon.crowdstrike.com/support/documentation).\n\n\n  To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.\n\n  Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.",
    "title": "Crowdstrike Intelligence",
    "version": ""
  },
  "openapi": "3.0.3",
  "paths": {
    "/iocs/combined/indicator/v1": {
      "get": {
        "operationId": "ioccombinedindicator",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "This generated schema may need tweaking. In particular format fields are attempts at matching workflow field types but may not be correct.",
                  "properties": {
                    "errors": {},
                    "meta": {
                      "properties": {
                        "pagination": {
                          "properties": {
                            "after": {
                              "type": "string"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "powered_by": {
                          "type": "string"
                        },
                        "query_time": {
                          "type": "number"
                        },
                        "trace_id": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "resources": {
                      "items": {
                        "properties": {
                          "action": {
                            "type": "string"
                          },
                          "applied_globally": {
                            "type": "boolean"
                          },
                          "created_by": {
                            "format": "email",
                            "type": "string"
                          },
                          "created_on": {
                            "type": "string"
                          },
                          "deleted": {
                            "type": "boolean"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expired": {
                            "type": "boolean"
                          },
                          "from_parent": {
                            "type": "boolean"
                          },
                          "id": {
                            "format": "sha256",
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object"
                          },
                          "mobile_action": {
                            "type": "string"
                          },
                          "modified_by": {
                            "format": "email",
                            "type": "string"
                          },
                          "modified_on": {
                            "type": "string"
                          },
                          "platforms": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "severity": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK fgfdgdf"
          }
        }
      }
    },
    "/malquery/entities/metadata/v1": {
      "get": {
        "operationId": "GetMalQueryMetadataV1",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "This generated schema may need tweaking. In particular format fields are attempts at matching workflow field types but may not be correct.",
                  "properties": {
                    "errors": {
                      "items": {
                        "properties": {
                          "code": {
                            "type": "integer"
                          },
                          "id": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "pagination": {
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "powered_by": {
                          "type": "string"
                        },
                        "query_time": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string"
                        },
                        "trace_id": {
                          "type": "string"
                        },
                        "writes": {
                          "properties": {
                            "resources_affected": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "resources": {
                      "items": {
                        "properties": {
                          "family": {
                            "type": "string"
                          },
                          "filesize": {
                            "type": "integer"
                          },
                          "filetype": {
                            "type": "string"
                          },
                          "first_seen": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "md5": {
                            "type": "string"
                          },
                          "sha1": {
                            "type": "string"
                          },
                          "sha256": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/malquery.SampleMetadataResponse"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ErrorsOnly"
                }
              }
            },
            "description": "Unauthorized",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ErrorsOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/malquery.SampleMetadataResponse"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "servers": [
    {
      "url": "https://api.crowdstrike.com"
    }
  ],
  "x-cs-multi-instance": true
}